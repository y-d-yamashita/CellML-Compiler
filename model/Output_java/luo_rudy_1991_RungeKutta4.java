import java.lang.Math


public static void main ( String args[] ) {

	int __DATA_NUM = 1;
	double Main_h_x2[];
	double Main_V_x2[];
	double Main_time_t1[];
	double Main_f_x4[];
	double Main_Cai_x1[];
	double Main_X_x3[];
	double Main_time_t2[];
	double Main_j_x2[];
	double Main_V_x1[];
	double Main_Cai_x2[];
	double Main_m_x3[];
	double Main_h_x1[];
	double Main_V_x4[];
	double Main_time_t3[];
	double Main_m_x1[];
	double Main_f_x1[];
	double Main_X_x2[];
	double Main_f_x3[];
	double Main_h_x3[];
	double Main_time_t4[];
	double Main_X_x1[];
	double Main_X_x4[];
	double Main_d_x3[];
	double Main_j_x3[];
	double Main_d_x2[];
	double Main_f_x2[];
	double Main_V_x3[];
	double Main_m_x4[];
	double Main_d_x4[];
	double Main_Cai_x3[];
	double Main_j_x1[];
	double Main_m_x2[];
	double Main_h_x4[];
	double Main_Cai_x4[];
	double Main_d_x1[];
	double Main_j_x4[];
	double Main_alpha_d_i4[];
	double Main_K1_infinity_i1[];
	double Main_E_Na_i2[];
	double Main_g_K1_i1[];
	double Main_kh_k4[];
	double Main_g_K1_i3[];
	double Main_kf_k4[];
	double Main_beta_X_i4[];
	double Main_i_si_i4[];
	double Main_beta_j_i4[];
	double hend;
	double Main_beta_f_i3[];
	double Main_beta_K1_i4[];
	double Main_alpha_j_i4[];
	double Main_I_stim_i4[];
	double Main_i_b_i2[];
	double Main_i_K1_i1[];
	double Main_i_Kp_i4[];
	double Main_kh_k3[];
	double Main_kh_k1[];
	double Main_i_Na_i4[];
	double Main_alpha_m_i3[];
	double Main_Xi_i2[];
	double Main_kd_k2[];
	double Main_i_K1_i4[];
	double Main_kd_k3[];
	double Main_g_K_i1[];
	double Main_km_k4[];
	double Main_kX_k2[];
	double Main_beta_h_i1[];
	double Main_alpha_m_i4[];
	double Main_E_K_i2[];
	double mend;
	double Main_beta_j_i2[];
	double Main_i_Na_i2[];
	double Main_g_K_i2[];
	double Main_K1_infinity_i2[];
	double Main_beta_K1_i1[];
	double Main_alpha_f_i3[];
	double Main_alpha_m_i2[];
	double Main_kCai_k2[];
	double Main_alpha_X_i4[];
	double Main_E_Kp_i1[];
	double Main_beta_d_i1[];
	double Main_i_Kp_i2[];
	double Main_beta_j_i3[];
	double Main_E_si_i1[];
	double Main_km_k1[];
	double Main_kV_k2[];
	double Main_Kp_i2[];
	double Main_E_Na_i1[];
	double Main_alpha_d_i3[];
	double Main_alpha_X_i1[];
	double Main_i_b_i1[];
	double Main_beta_X_i3[];
	double Xend;
	double Main_i_si_i3[];
	double Main_I_stim_i1[];
	double Main_i_K1_i2[];
	double Main_g_K_i3[];
	double Main_i_b_i3[];
	double Main_E_K_i1[];
	double Main_kd_k4[];
	double Main_alpha_K1_i3[];
	double Main_i_si_i2[];
	double Main_beta_h_i3[];
	double Main_alpha_m_i1[];
	double Main_kX_k1[];
	double Main_alpha_K1_i2[];
	double Main_i_Kp_i1[];
	double Main_E_K1_i4[];
	double Main_beta_m_i1[];
	double Main_Xi_i1[];
	double Main_E_Na_i4[];
	double Main_E_si_i2[];
	double Main_Kp_i4[];
	double Main_beta_h_i2[];
	double Main_kV_k4[];
	double Main_beta_m_i2[];
	double Main_kCai_k1[];
	double Main_i_Na_i3[];
	double Main_E_Kp_i4[];
	double Main_beta_K1_i3[];
	double Main_K1_infinity_i3[];
	double Main_i_Na_i1[];
	double Main_kCai_k4[];
	double Main_i_si_i1[];
	double Main_alpha_d_i2[];
	double Main_kf_k2[];
	double Main_beta_d_i3[];
	double dend;
	double Main_K1_infinity_i4[];
	double Main_g_K_i4[];
	double Main_beta_K1_i2[];
	double Main_beta_X_i2[];
	double Main_kCai_k3[];
	double Main_E_si_i3[];
	double Main_alpha_j_i3[];
	double Main_kV_k1[];
	double Main_alpha_X_i2[];
	double Main_g_K1_i2[];
	double Main_i_K_i1[];
	double Main_kf_k1[];
	double Main_kh_k2[];
	double jend;
	double Main_E_si_i4[];
	double Main_E_Kp_i3[];
	double Main_alpha_j_i1[];
	double Main_E_K_i4[];
	double Main_Kp_i1[];
	double Main_kX_k4[];
	double Main_alpha_K1_i1[];
	double Main_Kp_i3[];
	double Main_beta_m_i4[];
	double Main_i_b_i4[];
	double Main_I_stim_i3[];
	double Main_kd_k1[];
	double Main_kX_k3[];
	double Main_E_K_i3[];
	double Main_beta_f_i2[];
	double Main_alpha_h_i1[];
	double Main_kj_k3[];
	double Main_beta_f_i1[];
	double Main_alpha_f_i1[];
	double Main_alpha_X_i3[];
	double Vend;
	double Main_beta_m_i3[];
	double Main_i_K_i4[];
	double Main_I_stim_i2[];
	double Main_i_Kp_i3[];
	double Main_alpha_h_i3[];
	double Main_kj_k4[];
	double Main_E_Kp_i2[];
	double Main_i_K1_i3[];
	double Main_i_K_i3[];
	double Main_beta_h_i4[];
	double Main_alpha_j_i2[];
	double Main_E_Na_i3[];
	double Main_i_K_i2[];
	double Main_kj_k2[];
	double Main_Xi_i4[];
	double Main_beta_f_i4[];
	double Main_E_K1_i1[];
	double Main_kj_k1[];
	double t;
	double Main_E_K1_i2[];
	double Main_alpha_f_i4[];
	double fend;
	double Main_beta_d_i4[];
	double Main_E_K1_i3[];
	double Main_Xi_i3[];
	double Main_kV_k3[];
	double Main_beta_X_i1[];
	double Main_km_k3[];
	double Main_alpha_h_i4[];
	double Main_alpha_f_i2[];
	double Main_alpha_h_i2[];
	double Main_g_K1_i4[];
	double Main_km_k2[];
	double Main_beta_j_i1[];
	double Main_alpha_K1_i4[];
	double Main_kf_k3[];
	double Main_beta_d_i2[];
	double Caiend;
	double Main_alpha_d_i1[];
	double Main_g_b_z;
	double Main_stim_amplitude_z;
	double Main_stim_period_z;
	double Main_g_Kp_z;
	double Main_T_z;
	double Main_Nai_z;
	double Main_C_z;
	double d;
	double Main_Nao_z;
	double Main_g_Na_z;
	double Main_E_b_z;
	double Main_F_z;
	double Main_PR_NaK_z;
	double Main_Ki_z;
	double Main_R_z;
	double Main_Ko_z;
	double Main_stim_duration_z;
	double Main_stim_end_z;
	double Main_stim_start_z;
	int n;

	Main_h_x2 = new double[__DATA_NUM];
	Main_V_x2 = new double[__DATA_NUM];
	Main_time_t1 = new double[__DATA_NUM];
	Main_f_x4 = new double[__DATA_NUM];
	Main_Cai_x1 = new double[__DATA_NUM];
	Main_X_x3 = new double[__DATA_NUM];
	Main_time_t2 = new double[__DATA_NUM];
	Main_j_x2 = new double[__DATA_NUM];
	Main_V_x1 = new double[__DATA_NUM];
	Main_Cai_x2 = new double[__DATA_NUM];
	Main_m_x3 = new double[__DATA_NUM];
	Main_h_x1 = new double[__DATA_NUM];
	Main_V_x4 = new double[__DATA_NUM];
	Main_time_t3 = new double[__DATA_NUM];
	Main_m_x1 = new double[__DATA_NUM];
	Main_f_x1 = new double[__DATA_NUM];
	Main_X_x2 = new double[__DATA_NUM];
	Main_f_x3 = new double[__DATA_NUM];
	Main_h_x3 = new double[__DATA_NUM];
	Main_time_t4 = new double[__DATA_NUM];
	Main_X_x1 = new double[__DATA_NUM];
	Main_X_x4 = new double[__DATA_NUM];
	Main_d_x3 = new double[__DATA_NUM];
	Main_j_x3 = new double[__DATA_NUM];
	Main_d_x2 = new double[__DATA_NUM];
	Main_f_x2 = new double[__DATA_NUM];
	Main_V_x3 = new double[__DATA_NUM];
	Main_m_x4 = new double[__DATA_NUM];
	Main_d_x4 = new double[__DATA_NUM];
	Main_Cai_x3 = new double[__DATA_NUM];
	Main_j_x1 = new double[__DATA_NUM];
	Main_m_x2 = new double[__DATA_NUM];
	Main_h_x4 = new double[__DATA_NUM];
	Main_Cai_x4 = new double[__DATA_NUM];
	Main_d_x1 = new double[__DATA_NUM];
	Main_j_x4 = new double[__DATA_NUM];
	Main_alpha_d_i4 = new double[__DATA_NUM];
	Main_K1_infinity_i1 = new double[__DATA_NUM];
	Main_E_Na_i2 = new double[__DATA_NUM];
	Main_g_K1_i1 = new double[__DATA_NUM];
	Main_kh_k4 = new double[__DATA_NUM];
	Main_g_K1_i3 = new double[__DATA_NUM];
	Main_kf_k4 = new double[__DATA_NUM];
	Main_beta_X_i4 = new double[__DATA_NUM];
	Main_i_si_i4 = new double[__DATA_NUM];
	Main_beta_j_i4 = new double[__DATA_NUM];
	Main_beta_f_i3 = new double[__DATA_NUM];
	Main_beta_K1_i4 = new double[__DATA_NUM];
	Main_alpha_j_i4 = new double[__DATA_NUM];
	Main_I_stim_i4 = new double[__DATA_NUM];
	Main_i_b_i2 = new double[__DATA_NUM];
	Main_i_K1_i1 = new double[__DATA_NUM];
	Main_i_Kp_i4 = new double[__DATA_NUM];
	Main_kh_k3 = new double[__DATA_NUM];
	Main_kh_k1 = new double[__DATA_NUM];
	Main_i_Na_i4 = new double[__DATA_NUM];
	Main_alpha_m_i3 = new double[__DATA_NUM];
	Main_Xi_i2 = new double[__DATA_NUM];
	Main_kd_k2 = new double[__DATA_NUM];
	Main_i_K1_i4 = new double[__DATA_NUM];
	Main_kd_k3 = new double[__DATA_NUM];
	Main_g_K_i1 = new double[__DATA_NUM];
	Main_km_k4 = new double[__DATA_NUM];
	Main_kX_k2 = new double[__DATA_NUM];
	Main_beta_h_i1 = new double[__DATA_NUM];
	Main_alpha_m_i4 = new double[__DATA_NUM];
	Main_E_K_i2 = new double[__DATA_NUM];
	Main_beta_j_i2 = new double[__DATA_NUM];
	Main_i_Na_i2 = new double[__DATA_NUM];
	Main_g_K_i2 = new double[__DATA_NUM];
	Main_K1_infinity_i2 = new double[__DATA_NUM];
	Main_beta_K1_i1 = new double[__DATA_NUM];
	Main_alpha_f_i3 = new double[__DATA_NUM];
	Main_alpha_m_i2 = new double[__DATA_NUM];
	Main_kCai_k2 = new double[__DATA_NUM];
	Main_alpha_X_i4 = new double[__DATA_NUM];
	Main_E_Kp_i1 = new double[__DATA_NUM];
	Main_beta_d_i1 = new double[__DATA_NUM];
	Main_i_Kp_i2 = new double[__DATA_NUM];
	Main_beta_j_i3 = new double[__DATA_NUM];
	Main_E_si_i1 = new double[__DATA_NUM];
	Main_km_k1 = new double[__DATA_NUM];
	Main_kV_k2 = new double[__DATA_NUM];
	Main_Kp_i2 = new double[__DATA_NUM];
	Main_E_Na_i1 = new double[__DATA_NUM];
	Main_alpha_d_i3 = new double[__DATA_NUM];
	Main_alpha_X_i1 = new double[__DATA_NUM];
	Main_i_b_i1 = new double[__DATA_NUM];
	Main_beta_X_i3 = new double[__DATA_NUM];
	Main_i_si_i3 = new double[__DATA_NUM];
	Main_I_stim_i1 = new double[__DATA_NUM];
	Main_i_K1_i2 = new double[__DATA_NUM];
	Main_g_K_i3 = new double[__DATA_NUM];
	Main_i_b_i3 = new double[__DATA_NUM];
	Main_E_K_i1 = new double[__DATA_NUM];
	Main_kd_k4 = new double[__DATA_NUM];
	Main_alpha_K1_i3 = new double[__DATA_NUM];
	Main_i_si_i2 = new double[__DATA_NUM];
	Main_beta_h_i3 = new double[__DATA_NUM];
	Main_alpha_m_i1 = new double[__DATA_NUM];
	Main_kX_k1 = new double[__DATA_NUM];
	Main_alpha_K1_i2 = new double[__DATA_NUM];
	Main_i_Kp_i1 = new double[__DATA_NUM];
	Main_E_K1_i4 = new double[__DATA_NUM];
	Main_beta_m_i1 = new double[__DATA_NUM];
	Main_Xi_i1 = new double[__DATA_NUM];
	Main_E_Na_i4 = new double[__DATA_NUM];
	Main_E_si_i2 = new double[__DATA_NUM];
	Main_Kp_i4 = new double[__DATA_NUM];
	Main_beta_h_i2 = new double[__DATA_NUM];
	Main_kV_k4 = new double[__DATA_NUM];
	Main_beta_m_i2 = new double[__DATA_NUM];
	Main_kCai_k1 = new double[__DATA_NUM];
	Main_i_Na_i3 = new double[__DATA_NUM];
	Main_E_Kp_i4 = new double[__DATA_NUM];
	Main_beta_K1_i3 = new double[__DATA_NUM];
	Main_K1_infinity_i3 = new double[__DATA_NUM];
	Main_i_Na_i1 = new double[__DATA_NUM];
	Main_kCai_k4 = new double[__DATA_NUM];
	Main_i_si_i1 = new double[__DATA_NUM];
	Main_alpha_d_i2 = new double[__DATA_NUM];
	Main_kf_k2 = new double[__DATA_NUM];
	Main_beta_d_i3 = new double[__DATA_NUM];
	Main_K1_infinity_i4 = new double[__DATA_NUM];
	Main_g_K_i4 = new double[__DATA_NUM];
	Main_beta_K1_i2 = new double[__DATA_NUM];
	Main_beta_X_i2 = new double[__DATA_NUM];
	Main_kCai_k3 = new double[__DATA_NUM];
	Main_E_si_i3 = new double[__DATA_NUM];
	Main_alpha_j_i3 = new double[__DATA_NUM];
	Main_kV_k1 = new double[__DATA_NUM];
	Main_alpha_X_i2 = new double[__DATA_NUM];
	Main_g_K1_i2 = new double[__DATA_NUM];
	Main_i_K_i1 = new double[__DATA_NUM];
	Main_kf_k1 = new double[__DATA_NUM];
	Main_kh_k2 = new double[__DATA_NUM];
	Main_E_si_i4 = new double[__DATA_NUM];
	Main_E_Kp_i3 = new double[__DATA_NUM];
	Main_alpha_j_i1 = new double[__DATA_NUM];
	Main_E_K_i4 = new double[__DATA_NUM];
	Main_Kp_i1 = new double[__DATA_NUM];
	Main_kX_k4 = new double[__DATA_NUM];
	Main_alpha_K1_i1 = new double[__DATA_NUM];
	Main_Kp_i3 = new double[__DATA_NUM];
	Main_beta_m_i4 = new double[__DATA_NUM];
	Main_i_b_i4 = new double[__DATA_NUM];
	Main_I_stim_i3 = new double[__DATA_NUM];
	Main_kd_k1 = new double[__DATA_NUM];
	Main_kX_k3 = new double[__DATA_NUM];
	Main_E_K_i3 = new double[__DATA_NUM];
	Main_beta_f_i2 = new double[__DATA_NUM];
	Main_alpha_h_i1 = new double[__DATA_NUM];
	Main_kj_k3 = new double[__DATA_NUM];
	Main_beta_f_i1 = new double[__DATA_NUM];
	Main_alpha_f_i1 = new double[__DATA_NUM];
	Main_alpha_X_i3 = new double[__DATA_NUM];
	Main_beta_m_i3 = new double[__DATA_NUM];
	Main_i_K_i4 = new double[__DATA_NUM];
	Main_I_stim_i2 = new double[__DATA_NUM];
	Main_i_Kp_i3 = new double[__DATA_NUM];
	Main_alpha_h_i3 = new double[__DATA_NUM];
	Main_kj_k4 = new double[__DATA_NUM];
	Main_E_Kp_i2 = new double[__DATA_NUM];
	Main_i_K1_i3 = new double[__DATA_NUM];
	Main_i_K_i3 = new double[__DATA_NUM];
	Main_beta_h_i4 = new double[__DATA_NUM];
	Main_alpha_j_i2 = new double[__DATA_NUM];
	Main_E_Na_i3 = new double[__DATA_NUM];
	Main_i_K_i2 = new double[__DATA_NUM];
	Main_kj_k2 = new double[__DATA_NUM];
	Main_Xi_i4 = new double[__DATA_NUM];
	Main_beta_f_i4 = new double[__DATA_NUM];
	Main_E_K1_i1 = new double[__DATA_NUM];
	Main_kj_k1 = new double[__DATA_NUM];
	Main_E_K1_i2 = new double[__DATA_NUM];
	Main_alpha_f_i4 = new double[__DATA_NUM];
	Main_beta_d_i4 = new double[__DATA_NUM];
	Main_E_K1_i3 = new double[__DATA_NUM];
	Main_Xi_i3 = new double[__DATA_NUM];
	Main_kV_k3 = new double[__DATA_NUM];
	Main_beta_X_i1 = new double[__DATA_NUM];
	Main_km_k3 = new double[__DATA_NUM];
	Main_alpha_h_i4 = new double[__DATA_NUM];
	Main_alpha_f_i2 = new double[__DATA_NUM];
	Main_alpha_h_i2 = new double[__DATA_NUM];
	Main_g_K1_i4 = new double[__DATA_NUM];
	Main_km_k2 = new double[__DATA_NUM];
	Main_beta_j_i1 = new double[__DATA_NUM];
	Main_alpha_K1_i4 = new double[__DATA_NUM];
	Main_kf_k3 = new double[__DATA_NUM];
	Main_beta_d_i2 = new double[__DATA_NUM];
	Main_alpha_d_i1 = new double[__DATA_NUM];
	Main_g_b_z = (double)0.03921;
	Main_stim_amplitude_z = (double)-25.5;
	Main_stim_period_z = (double)1000.0;
	Main_g_Kp_z = (double)0.0183;
	Main_T_z = (double)310.0;
	Main_Nai_z = (double)18.0;
	Main_C_z = (double)1.0;
	d = (double)0.01;
	Main_Nao_z = (double)140.0;
	Main_g_Na_z = (double)23.0;
	Main_E_b_z = (double)-59.87;
	Main_F_z = (double)96484.6;
	Main_PR_NaK_z = (double)0.01833;
	Main_Ki_z = (double)145.0;
	Main_R_z = (double)8314.0;
	Main_Ko_z = (double)5.4;
	Main_stim_duration_z = (double)2.0;
	Main_stim_end_z = (double)1.0E11;
	Main_stim_start_z = (double)100.0;
	
	
	Main_time_t1[0] = (double)0.0;
	Main_Cai_x1[0] = (double)2.0E-4;
	Main_X_x1[0] = (double)0.16647703;
	Main_f_x1[0] = (double)0.99427859;
	Main_d_x1[0] = (double)0.00316354;
	Main_j_x1[0] = (double)0.98767124;
	Main_h_x1[0] = (double)0.9804713;
	Main_m_x1[0] = (double)0.00187018;
	Main_V_x1[0] = (double)-83.853;
	
	
	n = 0;
	do{

		Main_E_K1_i4[n] =  (  (  ( Main_R_z * Main_T_z )  / Main_F_z )  * log(  ( Main_Ko_z / Main_Ki_z )  ) ) ;
		Main_E_Kp_i4[n] = Main_E_K1_i4[n];
		Main_g_K1_i4[n] =  ( (double)0.6047 * sqrt(  ( Main_Ko_z / (double)5.4 )  ) ) ;
		Main_E_K_i4[n] =  (  (  ( Main_R_z * Main_T_z )  / Main_F_z )  * log(  (  ( Main_Ko_z +  ( Main_PR_NaK_z * Main_Nao_z )  )  /  ( Main_Ki_z +  ( Main_PR_NaK_z * Main_Nai_z )  )  )  ) ) ;
		Main_g_K_i4[n] =  ( (double)0.282 * sqrt(  ( Main_Ko_z / (double)5.4 )  ) ) ;
		Main_E_Na_i4[n] =  (  (  ( Main_R_z * Main_T_z )  / Main_F_z )  * log(  ( Main_Nao_z / Main_Nai_z )  ) ) ;
		Main_E_K1_i3[n] =  (  (  ( Main_R_z * Main_T_z )  / Main_F_z )  * log(  ( Main_Ko_z / Main_Ki_z )  ) ) ;
		Main_E_Kp_i3[n] = Main_E_K1_i3[n];
		Main_g_K1_i3[n] =  ( (double)0.6047 * sqrt(  ( Main_Ko_z / (double)5.4 )  ) ) ;
		Main_E_K_i3[n] =  (  (  ( Main_R_z * Main_T_z )  / Main_F_z )  * log(  (  ( Main_Ko_z +  ( Main_PR_NaK_z * Main_Nao_z )  )  /  ( Main_Ki_z +  ( Main_PR_NaK_z * Main_Nai_z )  )  )  ) ) ;
		Main_g_K_i3[n] =  ( (double)0.282 * sqrt(  ( Main_Ko_z / (double)5.4 )  ) ) ;
		Main_E_Na_i3[n] =  (  (  ( Main_R_z * Main_T_z )  / Main_F_z )  * log(  ( Main_Nao_z / Main_Nai_z )  ) ) ;
		Main_E_K1_i2[n] =  (  (  ( Main_R_z * Main_T_z )  / Main_F_z )  * log(  ( Main_Ko_z / Main_Ki_z )  ) ) ;
		Main_E_Kp_i2[n] = Main_E_K1_i2[n];
		Main_g_K1_i2[n] =  ( (double)0.6047 * sqrt(  ( Main_Ko_z / (double)5.4 )  ) ) ;
		Main_E_K_i2[n] =  (  (  ( Main_R_z * Main_T_z )  / Main_F_z )  * log(  (  ( Main_Ko_z +  ( Main_PR_NaK_z * Main_Nao_z )  )  /  ( Main_Ki_z +  ( Main_PR_NaK_z * Main_Nai_z )  )  )  ) ) ;
		Main_g_K_i2[n] =  ( (double)0.282 * sqrt(  ( Main_Ko_z / (double)5.4 )  ) ) ;
		Main_E_Na_i2[n] =  (  (  ( Main_R_z * Main_T_z )  / Main_F_z )  * log(  ( Main_Nao_z / Main_Nai_z )  ) ) ;
		Main_E_K1_i1[n] =  (  (  ( Main_R_z * Main_T_z )  / Main_F_z )  * log(  ( Main_Ko_z / Main_Ki_z )  ) ) ;
		Main_E_Kp_i1[n] = Main_E_K1_i1[n];
		Main_g_K1_i1[n] =  ( (double)0.6047 * sqrt(  ( Main_Ko_z / (double)5.4 )  ) ) ;
		Main_E_K_i1[n] =  (  (  ( Main_R_z * Main_T_z )  / Main_F_z )  * log(  (  ( Main_Ko_z +  ( Main_PR_NaK_z * Main_Nao_z )  )  /  ( Main_Ki_z +  ( Main_PR_NaK_z * Main_Nai_z )  )  )  ) ) ;
		Main_g_K_i1[n] =  ( (double)0.282 * sqrt(  ( Main_Ko_z / (double)5.4 )  ) ) ;
		Main_E_Na_i1[n] =  (  (  ( Main_R_z * Main_T_z )  / Main_F_z )  * log(  ( Main_Nao_z / Main_Nai_z )  ) ) ;
		Main_time_t1[ ( n + 1 ) ] =  ( Main_time_t1[n] + d ) ;
		Main_time_t4[n] =  ( Main_time_t1[n] + d ) ;
		Main_I_stim_i4[n] =  (  (  ( Main_time_t4[n] >= Main_stim_start_z )  &&  ( Main_time_t4[n] <= Main_stim_end_z )  &&  (  (  ( Main_time_t4[n] - Main_stim_start_z )  -  ( floor(  (  ( Main_time_t4[n] - Main_stim_start_z )  / Main_stim_period_z )  ) * Main_stim_period_z )  )  <= Main_stim_duration_z )  )  ? Main_stim_amplitude_z : (double)0 ) ;
		Main_time_t3[n] =  ( Main_time_t1[n] +  ( d / (double)2 )  ) ;
		Main_I_stim_i3[n] =  (  (  ( Main_time_t3[n] >= Main_stim_start_z )  &&  ( Main_time_t3[n] <= Main_stim_end_z )  &&  (  (  ( Main_time_t3[n] - Main_stim_start_z )  -  ( floor(  (  ( Main_time_t3[n] - Main_stim_start_z )  / Main_stim_period_z )  ) * Main_stim_period_z )  )  <= Main_stim_duration_z )  )  ? Main_stim_amplitude_z : (double)0 ) ;
		Main_time_t2[n] =  ( Main_time_t1[n] +  ( d / (double)2 )  ) ;
		Main_I_stim_i2[n] =  (  (  ( Main_time_t2[n] >= Main_stim_start_z )  &&  ( Main_time_t2[n] <= Main_stim_end_z )  &&  (  (  ( Main_time_t2[n] - Main_stim_start_z )  -  ( floor(  (  ( Main_time_t2[n] - Main_stim_start_z )  / Main_stim_period_z )  ) * Main_stim_period_z )  )  <= Main_stim_duration_z )  )  ? Main_stim_amplitude_z : (double)0 ) ;
		Main_I_stim_i1[n] =  (  (  ( Main_time_t1[n] >= Main_stim_start_z )  &&  ( Main_time_t1[n] <= Main_stim_end_z )  &&  (  (  ( Main_time_t1[n] - Main_stim_start_z )  -  ( floor(  (  ( Main_time_t1[n] - Main_stim_start_z )  / Main_stim_period_z )  ) * Main_stim_period_z )  )  <= Main_stim_duration_z )  )  ? Main_stim_amplitude_z : (double)0 ) ;
		Main_E_si_i1[n] =  ( (double)7.7 -  ( (double)13.0287 * log(  ( Main_Cai_x1[n] / (double)1 )  ) )  ) ;
		Main_i_b_i1[n] =  ( Main_g_b_z *  ( Main_V_x1[n] - Main_E_b_z )  ) ;
		Main_Kp_i1[n] =  ( (double)1 /  ( (double)1 + exp(  (  ( (double)7.488 - Main_V_x1[n] )  / (double)5.98 )  ) )  ) ;
		Main_i_Kp_i1[n] =  ( Main_g_Kp_z * Main_Kp_i1[n] *  ( Main_V_x1[n] - Main_E_Kp_i1[n] )  ) ;
		Main_beta_K1_i1[n] =  (  (  ( (double)0.49124 * exp(  ( (double)0.08032 *  (  ( Main_V_x1[n] + (double)5.476 )  - Main_E_K1_i1[n] )  )  ) )  +  ( (double)1 * exp(  ( (double)0.06175 *  ( Main_V_x1[n] -  ( Main_E_K1_i1[n] + (double)594.31 )  )  )  ) )  )  /  ( (double)1 + exp(  (  ( - (double)0.5143 )  *  (  ( Main_V_x1[n] - Main_E_K1_i1[n] )  + (double)4.753 )  )  ) )  ) ;
		Main_alpha_K1_i1[n] =  ( (double)1.02 /  ( (double)1 + exp(  ( (double)0.2385 *  (  ( Main_V_x1[n] - Main_E_K1_i1[n] )  - (double)59.215 )  )  ) )  ) ;
		Main_K1_infinity_i1[n] =  ( Main_alpha_K1_i1[n] /  ( Main_alpha_K1_i1[n] + Main_beta_K1_i1[n] )  ) ;
		Main_i_K1_i1[n] =  ( Main_g_K1_i1[n] * Main_K1_infinity_i1[n] *  ( Main_V_x1[n] - Main_E_K1_i1[n] )  ) ;
		Main_beta_X_i1[n] =  (  ( (double)0.0013 * exp(  (  ( - (double)0.06 )  *  ( Main_V_x1[n] + (double)20 )  )  ) )  /  ( (double)1 + exp(  (  ( - (double)0.04 )  *  ( Main_V_x1[n] + (double)20 )  )  ) )  ) ;
		Main_alpha_X_i1[n] =  (  ( (double)0.0005 * exp(  ( (double)0.083 *  ( Main_V_x1[n] + (double)50 )  )  ) )  /  ( (double)1 + exp(  ( (double)0.057 *  ( Main_V_x1[n] + (double)50 )  )  ) )  ) ;
		Main_kX_k1[n] =  (  ( Main_alpha_X_i1[n] *  ( (double)1 - Main_X_x1[n] )  )  -  ( Main_beta_X_i1[n] * Main_X_x1[n] )  ) ;
		Main_X_x2[n] =  ( Main_X_x1[n] +  ( Main_kX_k1[n] *  ( d / (double)2 )  )  ) ;
		Main_Xi_i1[n] =  (  ( Main_V_x1[n] >  ( - (double)100 )  )  ?  (  ( (double)2.837 *  ( exp(  ( (double)0.04 *  ( Main_V_x1[n] + (double)77 )  )  ) - (double)1 )  )  /  (  ( Main_V_x1[n] + (double)77 )  * exp(  ( (double)0.04 *  ( Main_V_x1[n] + (double)35 )  )  ) )  )  : (double)1 ) ;
		Main_beta_f_i1[n] =  (  ( (double)0.0065 * exp(  (  ( - (double)0.02 )  *  ( Main_V_x1[n] + (double)30 )  )  ) )  /  ( (double)1 + exp(  (  ( - (double)0.2 )  *  ( Main_V_x1[n] + (double)30 )  )  ) )  ) ;
		Main_i_K_i1[n] =  ( Main_g_K_i1[n] * Main_X_x1[n] * Main_Xi_i1[n] *  ( Main_V_x1[n] - Main_E_K_i1[n] )  ) ;
		Main_beta_d_i1[n] =  (  ( (double)0.07 * exp(  (  ( - (double)0.017 )  *  ( Main_V_x1[n] + (double)44 )  )  ) )  /  ( (double)1 + exp(  ( (double)0.05 *  ( Main_V_x1[n] + (double)44 )  )  ) )  ) ;
		Main_alpha_f_i1[n] =  (  ( (double)0.012 * exp(  (  ( - (double)0.008 )  *  ( Main_V_x1[n] + (double)28 )  )  ) )  /  ( (double)1 + exp(  ( (double)0.15 *  ( Main_V_x1[n] + (double)28 )  )  ) )  ) ;
		Main_kf_k1[n] =  (  ( Main_alpha_f_i1[n] *  ( (double)1 - Main_f_x1[n] )  )  -  ( Main_beta_f_i1[n] * Main_f_x1[n] )  ) ;
		Main_f_x2[n] =  ( Main_f_x1[n] +  ( Main_kf_k1[n] *  ( d / (double)2 )  )  ) ;
		Main_i_si_i1[n] =  ( (double)0.09 * Main_d_x1[n] * Main_f_x1[n] *  ( Main_V_x1[n] - Main_E_si_i1[n] )  ) ;
		Main_kCai_k1[n] =  (  (  (  ( - (double)0.0001 )  / (double)1 )  * Main_i_si_i1[n] )  +  ( (double)0.07 *  ( (double)0.0001 - Main_Cai_x1[n] )  )  ) ;
		Main_Cai_x2[n] =  ( Main_Cai_x1[n] +  ( Main_kCai_k1[n] *  ( d / (double)2 )  )  ) ;
		Main_E_si_i2[n] =  ( (double)7.7 -  ( (double)13.0287 * log(  ( Main_Cai_x2[n] / (double)1 )  ) )  ) ;
		Main_alpha_d_i1[n] =  (  ( (double)0.095 * exp(  (  ( - (double)0.01 )  *  ( Main_V_x1[n] - (double)5 )  )  ) )  /  ( (double)1 + exp(  (  ( - (double)0.072 )  *  ( Main_V_x1[n] - (double)5 )  )  ) )  ) ;
		Main_kd_k1[n] =  (  ( Main_alpha_d_i1[n] *  ( (double)1 - Main_d_x1[n] )  )  -  ( Main_beta_d_i1[n] * Main_d_x1[n] )  ) ;
		Main_d_x2[n] =  ( Main_d_x1[n] +  ( Main_kd_k1[n] *  ( d / (double)2 )  )  ) ;
		Main_beta_j_i1[n] =  (  ( Main_V_x1[n] <  ( - (double)40 )  )  ?  (  ( (double)0.1212 * exp(  (  ( - (double)0.01052 )  * Main_V_x1[n] )  ) )  /  ( (double)1 + exp(  (  ( - (double)0.1378 )  *  ( Main_V_x1[n] + (double)40.14 )  )  ) )  )  :  (  ( (double)0.3 * exp(  (  ( - (double)0.0000002535 )  * Main_V_x1[n] )  ) )  /  ( (double)1 + exp(  (  ( - (double)0.1 )  *  ( Main_V_x1[n] + (double)32 )  )  ) )  )  ) ;
		Main_beta_h_i1[n] =  (  ( Main_V_x1[n] <  ( - (double)40 )  )  ?  (  ( (double)3.56 * exp(  ( (double)0.079 * Main_V_x1[n] )  ) )  +  ( (double)310000 * exp(  ( (double)0.35 * Main_V_x1[n] )  ) )  )  :  ( (double)1 /  ( (double)0.13 *  ( (double)1 + exp(  (  ( Main_V_x1[n] + (double)10.66 )  /  ( - (double)11.1 )  )  ) )  )  )  ) ;
		Main_alpha_j_i1[n] =  (  ( Main_V_x1[n] <  ( - (double)40 )  )  ?  (  (  (  (  ( - (double)127140 )  * exp(  ( (double)0.2444 * Main_V_x1[n] )  ) )  -  ( (double)0.00003474 * exp(  (  ( - (double)0.04391 )  * Main_V_x1[n] )  ) )  )  *  ( Main_V_x1[n] + (double)37.78 )  )  /  ( (double)1 + exp(  ( (double)0.311 *  ( Main_V_x1[n] + (double)79.23 )  )  ) )  )  : (double)0 ) ;
		Main_kj_k1[n] =  (  ( Main_alpha_j_i1[n] *  ( (double)1 - Main_j_x1[n] )  )  -  ( Main_beta_j_i1[n] * Main_j_x1[n] )  ) ;
		Main_j_x2[n] =  ( Main_j_x1[n] +  ( Main_kj_k1[n] *  ( d / (double)2 )  )  ) ;
		Main_beta_m_i1[n] =  ( (double)0.08 * exp(  (  ( - Main_V_x1[n] )  / (double)11 )  ) ) ;
		Main_alpha_h_i1[n] =  (  ( Main_V_x1[n] <  ( - (double)40 )  )  ?  ( (double)0.135 * exp(  (  ( (double)80 + Main_V_x1[n] )  /  ( - (double)6.8 )  )  ) )  : (double)0 ) ;
		Main_kh_k1[n] =  (  ( Main_alpha_h_i1[n] *  ( (double)1 - Main_h_x1[n] )  )  -  ( Main_beta_h_i1[n] * Main_h_x1[n] )  ) ;
		Main_h_x2[n] =  ( Main_h_x1[n] +  ( Main_kh_k1[n] *  ( d / (double)2 )  )  ) ;
		Main_i_Na_i1[n] =  ( Main_g_Na_z * pow( Main_m_x1[n] , (double)3 ) * Main_h_x1[n] * Main_j_x1[n] *  ( Main_V_x1[n] - Main_E_Na_i1[n] )  ) ;
		Main_kV_k1[n] =  (  (  ( - (double)1 )  / Main_C_z )  *  ( Main_I_stim_i1[n] + Main_i_Na_i1[n] + Main_i_si_i1[n] + Main_i_K_i1[n] + Main_i_K1_i1[n] + Main_i_Kp_i1[n] + Main_i_b_i1[n] )  ) ;
		Main_V_x2[n] =  ( Main_V_x1[n] +  ( Main_kV_k1[n] *  ( d / (double)2 )  )  ) ;
		Main_alpha_K1_i2[n] =  ( (double)1.02 /  ( (double)1 + exp(  ( (double)0.2385 *  (  ( Main_V_x2[n] - Main_E_K1_i2[n] )  - (double)59.215 )  )  ) )  ) ;
		Main_beta_K1_i2[n] =  (  (  ( (double)0.49124 * exp(  ( (double)0.08032 *  (  ( Main_V_x2[n] + (double)5.476 )  - Main_E_K1_i2[n] )  )  ) )  +  ( (double)1 * exp(  ( (double)0.06175 *  ( Main_V_x2[n] -  ( Main_E_K1_i2[n] + (double)594.31 )  )  )  ) )  )  /  ( (double)1 + exp(  (  ( - (double)0.5143 )  *  (  ( Main_V_x2[n] - Main_E_K1_i2[n] )  + (double)4.753 )  )  ) )  ) ;
		Main_K1_infinity_i2[n] =  ( Main_alpha_K1_i2[n] /  ( Main_alpha_K1_i2[n] + Main_beta_K1_i2[n] )  ) ;
		Main_i_K1_i2[n] =  ( Main_g_K1_i2[n] * Main_K1_infinity_i2[n] *  ( Main_V_x2[n] - Main_E_K1_i2[n] )  ) ;
		Main_Kp_i2[n] =  ( (double)1 /  ( (double)1 + exp(  (  ( (double)7.488 - Main_V_x2[n] )  / (double)5.98 )  ) )  ) ;
		Main_i_Kp_i2[n] =  ( Main_g_Kp_z * Main_Kp_i2[n] *  ( Main_V_x2[n] - Main_E_Kp_i2[n] )  ) ;
		Main_beta_f_i2[n] =  (  ( (double)0.0065 * exp(  (  ( - (double)0.02 )  *  ( Main_V_x2[n] + (double)30 )  )  ) )  /  ( (double)1 + exp(  (  ( - (double)0.2 )  *  ( Main_V_x2[n] + (double)30 )  )  ) )  ) ;
		Main_Xi_i2[n] =  (  ( Main_V_x2[n] >  ( - (double)100 )  )  ?  (  ( (double)2.837 *  ( exp(  ( (double)0.04 *  ( Main_V_x2[n] + (double)77 )  )  ) - (double)1 )  )  /  (  ( Main_V_x2[n] + (double)77 )  * exp(  ( (double)0.04 *  ( Main_V_x2[n] + (double)35 )  )  ) )  )  : (double)1 ) ;
		Main_i_K_i2[n] =  ( Main_g_K_i2[n] * Main_X_x2[n] * Main_Xi_i2[n] *  ( Main_V_x2[n] - Main_E_K_i2[n] )  ) ;
		Main_alpha_X_i2[n] =  (  ( (double)0.0005 * exp(  ( (double)0.083 *  ( Main_V_x2[n] + (double)50 )  )  ) )  /  ( (double)1 + exp(  ( (double)0.057 *  ( Main_V_x2[n] + (double)50 )  )  ) )  ) ;
		Main_beta_X_i2[n] =  (  ( (double)0.0013 * exp(  (  ( - (double)0.06 )  *  ( Main_V_x2[n] + (double)20 )  )  ) )  /  ( (double)1 + exp(  (  ( - (double)0.04 )  *  ( Main_V_x2[n] + (double)20 )  )  ) )  ) ;
		Main_kX_k2[n] =  (  ( Main_alpha_X_i2[n] *  ( (double)1 - Main_X_x2[n] )  )  -  ( Main_beta_X_i2[n] * Main_X_x2[n] )  ) ;
		Main_X_x3[n] =  ( Main_X_x1[n] +  ( Main_kX_k2[n] *  ( d / (double)2 )  )  ) ;
		Main_beta_j_i2[n] =  (  ( Main_V_x2[n] <  ( - (double)40 )  )  ?  (  ( (double)0.1212 * exp(  (  ( - (double)0.01052 )  * Main_V_x2[n] )  ) )  /  ( (double)1 + exp(  (  ( - (double)0.1378 )  *  ( Main_V_x2[n] + (double)40.14 )  )  ) )  )  :  (  ( (double)0.3 * exp(  (  ( - (double)0.0000002535 )  * Main_V_x2[n] )  ) )  /  ( (double)1 + exp(  (  ( - (double)0.1 )  *  ( Main_V_x2[n] + (double)32 )  )  ) )  )  ) ;
		Main_alpha_j_i2[n] =  (  ( Main_V_x2[n] <  ( - (double)40 )  )  ?  (  (  (  (  ( - (double)127140 )  * exp(  ( (double)0.2444 * Main_V_x2[n] )  ) )  -  ( (double)0.00003474 * exp(  (  ( - (double)0.04391 )  * Main_V_x2[n] )  ) )  )  *  ( Main_V_x2[n] + (double)37.78 )  )  /  ( (double)1 + exp(  ( (double)0.311 *  ( Main_V_x2[n] + (double)79.23 )  )  ) )  )  : (double)0 ) ;
		Main_kj_k2[n] =  (  ( Main_alpha_j_i2[n] *  ( (double)1 - Main_j_x2[n] )  )  -  ( Main_beta_j_i2[n] * Main_j_x2[n] )  ) ;
		Main_j_x3[n] =  ( Main_j_x1[n] +  ( Main_kj_k2[n] *  ( d / (double)2 )  )  ) ;
		Main_beta_h_i2[n] =  (  ( Main_V_x2[n] <  ( - (double)40 )  )  ?  (  ( (double)3.56 * exp(  ( (double)0.079 * Main_V_x2[n] )  ) )  +  ( (double)310000 * exp(  ( (double)0.35 * Main_V_x2[n] )  ) )  )  :  ( (double)1 /  ( (double)0.13 *  ( (double)1 + exp(  (  ( Main_V_x2[n] + (double)10.66 )  /  ( - (double)11.1 )  )  ) )  )  )  ) ;
		Main_alpha_f_i2[n] =  (  ( (double)0.012 * exp(  (  ( - (double)0.008 )  *  ( Main_V_x2[n] + (double)28 )  )  ) )  /  ( (double)1 + exp(  ( (double)0.15 *  ( Main_V_x2[n] + (double)28 )  )  ) )  ) ;
		Main_kf_k2[n] =  (  ( Main_alpha_f_i2[n] *  ( (double)1 - Main_f_x2[n] )  )  -  ( Main_beta_f_i2[n] * Main_f_x2[n] )  ) ;
		Main_f_x3[n] =  ( Main_f_x1[n] +  ( Main_kf_k2[n] *  ( d / (double)2 )  )  ) ;
		Main_beta_d_i2[n] =  (  ( (double)0.07 * exp(  (  ( - (double)0.017 )  *  ( Main_V_x2[n] + (double)44 )  )  ) )  /  ( (double)1 + exp(  ( (double)0.05 *  ( Main_V_x2[n] + (double)44 )  )  ) )  ) ;
		Main_alpha_d_i2[n] =  (  ( (double)0.095 * exp(  (  ( - (double)0.01 )  *  ( Main_V_x2[n] - (double)5 )  )  ) )  /  ( (double)1 + exp(  (  ( - (double)0.072 )  *  ( Main_V_x2[n] - (double)5 )  )  ) )  ) ;
		Main_kd_k2[n] =  (  ( Main_alpha_d_i2[n] *  ( (double)1 - Main_d_x2[n] )  )  -  ( Main_beta_d_i2[n] * Main_d_x2[n] )  ) ;
		Main_d_x3[n] =  ( Main_d_x1[n] +  ( Main_kd_k2[n] *  ( d / (double)2 )  )  ) ;
		Main_i_si_i2[n] =  ( (double)0.09 * Main_d_x2[n] * Main_f_x2[n] *  ( Main_V_x2[n] - Main_E_si_i2[n] )  ) ;
		Main_kCai_k2[n] =  (  (  (  ( - (double)0.0001 )  / (double)1 )  * Main_i_si_i2[n] )  +  ( (double)0.07 *  ( (double)0.0001 - Main_Cai_x2[n] )  )  ) ;
		Main_Cai_x3[n] =  ( Main_Cai_x1[n] +  ( Main_kCai_k2[n] *  ( d / (double)2 )  )  ) ;
		Main_E_si_i3[n] =  ( (double)7.7 -  ( (double)13.0287 * log(  ( Main_Cai_x3[n] / (double)1 )  ) )  ) ;
		Main_i_b_i2[n] =  ( Main_g_b_z *  ( Main_V_x2[n] - Main_E_b_z )  ) ;
		Main_alpha_h_i2[n] =  (  ( Main_V_x2[n] <  ( - (double)40 )  )  ?  ( (double)0.135 * exp(  (  ( (double)80 + Main_V_x2[n] )  /  ( - (double)6.8 )  )  ) )  : (double)0 ) ;
		Main_kh_k2[n] =  (  ( Main_alpha_h_i2[n] *  ( (double)1 - Main_h_x2[n] )  )  -  ( Main_beta_h_i2[n] * Main_h_x2[n] )  ) ;
		Main_h_x3[n] =  ( Main_h_x1[n] +  ( Main_kh_k2[n] *  ( d / (double)2 )  )  ) ;
		Main_beta_m_i2[n] =  ( (double)0.08 * exp(  (  ( - Main_V_x2[n] )  / (double)11 )  ) ) ;
		Main_alpha_m_i2[n] =  (  ( (double)0.32 *  ( Main_V_x2[n] + (double)47.13 )  )  /  ( (double)1 - exp(  (  ( - (double)0.1 )  *  ( Main_V_x2[n] + (double)47.13 )  )  ) )  ) ;
		Main_alpha_m_i1[n] =  (  ( (double)0.32 *  ( Main_V_x1[n] + (double)47.13 )  )  /  ( (double)1 - exp(  (  ( - (double)0.1 )  *  ( Main_V_x1[n] + (double)47.13 )  )  ) )  ) ;
		Main_km_k1[n] =  (  ( Main_alpha_m_i1[n] *  ( (double)1 - Main_m_x1[n] )  )  -  ( Main_beta_m_i1[n] * Main_m_x1[n] )  ) ;
		Main_m_x2[n] =  ( Main_m_x1[n] +  ( Main_km_k1[n] *  ( d / (double)2 )  )  ) ;
		Main_km_k2[n] =  (  ( Main_alpha_m_i2[n] *  ( (double)1 - Main_m_x2[n] )  )  -  ( Main_beta_m_i2[n] * Main_m_x2[n] )  ) ;
		Main_m_x3[n] =  ( Main_m_x1[n] +  ( Main_km_k2[n] *  ( d / (double)2 )  )  ) ;
		Main_i_Na_i2[n] =  ( Main_g_Na_z * pow( Main_m_x2[n] , (double)3 ) * Main_h_x2[n] * Main_j_x2[n] *  ( Main_V_x2[n] - Main_E_Na_i2[n] )  ) ;
		Main_kV_k2[n] =  (  (  ( - (double)1 )  / Main_C_z )  *  ( Main_I_stim_i2[n] + Main_i_Na_i2[n] + Main_i_si_i2[n] + Main_i_K_i2[n] + Main_i_K1_i2[n] + Main_i_Kp_i2[n] + Main_i_b_i2[n] )  ) ;
		Main_V_x3[n] =  ( Main_V_x1[n] +  ( Main_kV_k2[n] *  ( d / (double)2 )  )  ) ;
		Main_beta_h_i3[n] =  (  ( Main_V_x3[n] <  ( - (double)40 )  )  ?  (  ( (double)3.56 * exp(  ( (double)0.079 * Main_V_x3[n] )  ) )  +  ( (double)310000 * exp(  ( (double)0.35 * Main_V_x3[n] )  ) )  )  :  ( (double)1 /  ( (double)0.13 *  ( (double)1 + exp(  (  ( Main_V_x3[n] + (double)10.66 )  /  ( - (double)11.1 )  )  ) )  )  )  ) ;
		Main_alpha_j_i3[n] =  (  ( Main_V_x3[n] <  ( - (double)40 )  )  ?  (  (  (  (  ( - (double)127140 )  * exp(  ( (double)0.2444 * Main_V_x3[n] )  ) )  -  ( (double)0.00003474 * exp(  (  ( - (double)0.04391 )  * Main_V_x3[n] )  ) )  )  *  ( Main_V_x3[n] + (double)37.78 )  )  /  ( (double)1 + exp(  ( (double)0.311 *  ( Main_V_x3[n] + (double)79.23 )  )  ) )  )  : (double)0 ) ;
		Main_beta_j_i3[n] =  (  ( Main_V_x3[n] <  ( - (double)40 )  )  ?  (  ( (double)0.1212 * exp(  (  ( - (double)0.01052 )  * Main_V_x3[n] )  ) )  /  ( (double)1 + exp(  (  ( - (double)0.1378 )  *  ( Main_V_x3[n] + (double)40.14 )  )  ) )  )  :  (  ( (double)0.3 * exp(  (  ( - (double)0.0000002535 )  * Main_V_x3[n] )  ) )  /  ( (double)1 + exp(  (  ( - (double)0.1 )  *  ( Main_V_x3[n] + (double)32 )  )  ) )  )  ) ;
		Main_kj_k3[n] =  (  ( Main_alpha_j_i3[n] *  ( (double)1 - Main_j_x3[n] )  )  -  ( Main_beta_j_i3[n] * Main_j_x3[n] )  ) ;
		Main_j_x4[n] =  ( Main_j_x1[n] +  ( Main_kj_k3[n] * d )  ) ;
		Main_i_si_i3[n] =  ( (double)0.09 * Main_d_x3[n] * Main_f_x3[n] *  ( Main_V_x3[n] - Main_E_si_i3[n] )  ) ;
		Main_kCai_k3[n] =  (  (  (  ( - (double)0.0001 )  / (double)1 )  * Main_i_si_i3[n] )  +  ( (double)0.07 *  ( (double)0.0001 - Main_Cai_x3[n] )  )  ) ;
		Main_Cai_x4[n] =  ( Main_Cai_x1[n] +  ( Main_kCai_k3[n] * d )  ) ;
		Main_E_si_i4[n] =  ( (double)7.7 -  ( (double)13.0287 * log(  ( Main_Cai_x4[n] / (double)1 )  ) )  ) ;
		Main_alpha_d_i3[n] =  (  ( (double)0.095 * exp(  (  ( - (double)0.01 )  *  ( Main_V_x3[n] - (double)5 )  )  ) )  /  ( (double)1 + exp(  (  ( - (double)0.072 )  *  ( Main_V_x3[n] - (double)5 )  )  ) )  ) ;
		Main_beta_d_i3[n] =  (  ( (double)0.07 * exp(  (  ( - (double)0.017 )  *  ( Main_V_x3[n] + (double)44 )  )  ) )  /  ( (double)1 + exp(  ( (double)0.05 *  ( Main_V_x3[n] + (double)44 )  )  ) )  ) ;
		Main_kd_k3[n] =  (  ( Main_alpha_d_i3[n] *  ( (double)1 - Main_d_x3[n] )  )  -  ( Main_beta_d_i3[n] * Main_d_x3[n] )  ) ;
		Main_d_x4[n] =  ( Main_d_x1[n] +  ( Main_kd_k3[n] * d )  ) ;
		Main_alpha_f_i3[n] =  (  ( (double)0.012 * exp(  (  ( - (double)0.008 )  *  ( Main_V_x3[n] + (double)28 )  )  ) )  /  ( (double)1 + exp(  ( (double)0.15 *  ( Main_V_x3[n] + (double)28 )  )  ) )  ) ;
		Main_i_b_i3[n] =  ( Main_g_b_z *  ( Main_V_x3[n] - Main_E_b_z )  ) ;
		Main_i_Na_i3[n] =  ( Main_g_Na_z * pow( Main_m_x3[n] , (double)3 ) * Main_h_x3[n] * Main_j_x3[n] *  ( Main_V_x3[n] - Main_E_Na_i3[n] )  ) ;
		Main_alpha_m_i3[n] =  (  ( (double)0.32 *  ( Main_V_x3[n] + (double)47.13 )  )  /  ( (double)1 - exp(  (  ( - (double)0.1 )  *  ( Main_V_x3[n] + (double)47.13 )  )  ) )  ) ;
		Main_beta_m_i3[n] =  ( (double)0.08 * exp(  (  ( - Main_V_x3[n] )  / (double)11 )  ) ) ;
		Main_km_k3[n] =  (  ( Main_alpha_m_i3[n] *  ( (double)1 - Main_m_x3[n] )  )  -  ( Main_beta_m_i3[n] * Main_m_x3[n] )  ) ;
		Main_m_x4[n] =  ( Main_m_x1[n] +  ( Main_km_k3[n] * d )  ) ;
		Main_alpha_h_i3[n] =  (  ( Main_V_x3[n] <  ( - (double)40 )  )  ?  ( (double)0.135 * exp(  (  ( (double)80 + Main_V_x3[n] )  /  ( - (double)6.8 )  )  ) )  : (double)0 ) ;
		Main_kh_k3[n] =  (  ( Main_alpha_h_i3[n] *  ( (double)1 - Main_h_x3[n] )  )  -  ( Main_beta_h_i3[n] * Main_h_x3[n] )  ) ;
		Main_h_x4[n] =  ( Main_h_x1[n] +  ( Main_kh_k3[n] * d )  ) ;
		Main_Xi_i3[n] =  (  ( Main_V_x3[n] >  ( - (double)100 )  )  ?  (  ( (double)2.837 *  ( exp(  ( (double)0.04 *  ( Main_V_x3[n] + (double)77 )  )  ) - (double)1 )  )  /  (  ( Main_V_x3[n] + (double)77 )  * exp(  ( (double)0.04 *  ( Main_V_x3[n] + (double)35 )  )  ) )  )  : (double)1 ) ;
		Main_alpha_X_i3[n] =  (  ( (double)0.0005 * exp(  ( (double)0.083 *  ( Main_V_x3[n] + (double)50 )  )  ) )  /  ( (double)1 + exp(  ( (double)0.057 *  ( Main_V_x3[n] + (double)50 )  )  ) )  ) ;
		Main_beta_X_i3[n] =  (  ( (double)0.0013 * exp(  (  ( - (double)0.06 )  *  ( Main_V_x3[n] + (double)20 )  )  ) )  /  ( (double)1 + exp(  (  ( - (double)0.04 )  *  ( Main_V_x3[n] + (double)20 )  )  ) )  ) ;
		Main_kX_k3[n] =  (  ( Main_alpha_X_i3[n] *  ( (double)1 - Main_X_x3[n] )  )  -  ( Main_beta_X_i3[n] * Main_X_x3[n] )  ) ;
		Main_X_x4[n] =  ( Main_X_x1[n] +  ( Main_kX_k3[n] * d )  ) ;
		Main_i_K_i3[n] =  ( Main_g_K_i3[n] * Main_X_x3[n] * Main_Xi_i3[n] *  ( Main_V_x3[n] - Main_E_K_i3[n] )  ) ;
		Main_beta_f_i3[n] =  (  ( (double)0.0065 * exp(  (  ( - (double)0.02 )  *  ( Main_V_x3[n] + (double)30 )  )  ) )  /  ( (double)1 + exp(  (  ( - (double)0.2 )  *  ( Main_V_x3[n] + (double)30 )  )  ) )  ) ;
		Main_kf_k3[n] =  (  ( Main_alpha_f_i3[n] *  ( (double)1 - Main_f_x3[n] )  )  -  ( Main_beta_f_i3[n] * Main_f_x3[n] )  ) ;
		Main_f_x4[n] =  ( Main_f_x1[n] +  ( Main_kf_k3[n] * d )  ) ;
		Main_Kp_i3[n] =  ( (double)1 /  ( (double)1 + exp(  (  ( (double)7.488 - Main_V_x3[n] )  / (double)5.98 )  ) )  ) ;
		Main_i_Kp_i3[n] =  ( Main_g_Kp_z * Main_Kp_i3[n] *  ( Main_V_x3[n] - Main_E_Kp_i3[n] )  ) ;
		Main_alpha_K1_i3[n] =  ( (double)1.02 /  ( (double)1 + exp(  ( (double)0.2385 *  (  ( Main_V_x3[n] - Main_E_K1_i3[n] )  - (double)59.215 )  )  ) )  ) ;
		Main_beta_K1_i3[n] =  (  (  ( (double)0.49124 * exp(  ( (double)0.08032 *  (  ( Main_V_x3[n] + (double)5.476 )  - Main_E_K1_i3[n] )  )  ) )  +  ( (double)1 * exp(  ( (double)0.06175 *  ( Main_V_x3[n] -  ( Main_E_K1_i3[n] + (double)594.31 )  )  )  ) )  )  /  ( (double)1 + exp(  (  ( - (double)0.5143 )  *  (  ( Main_V_x3[n] - Main_E_K1_i3[n] )  + (double)4.753 )  )  ) )  ) ;
		Main_K1_infinity_i3[n] =  ( Main_alpha_K1_i3[n] /  ( Main_alpha_K1_i3[n] + Main_beta_K1_i3[n] )  ) ;
		Main_i_K1_i3[n] =  ( Main_g_K1_i3[n] * Main_K1_infinity_i3[n] *  ( Main_V_x3[n] - Main_E_K1_i3[n] )  ) ;
		Main_kV_k3[n] =  (  (  ( - (double)1 )  / Main_C_z )  *  ( Main_I_stim_i3[n] + Main_i_Na_i3[n] + Main_i_si_i3[n] + Main_i_K_i3[n] + Main_i_K1_i3[n] + Main_i_Kp_i3[n] + Main_i_b_i3[n] )  ) ;
		Main_V_x4[n] =  ( Main_V_x1[n] +  ( Main_kV_k3[n] * d )  ) ;
		Main_beta_X_i4[n] =  (  ( (double)0.0013 * exp(  (  ( - (double)0.06 )  *  ( Main_V_x4[n] + (double)20 )  )  ) )  /  ( (double)1 + exp(  (  ( - (double)0.04 )  *  ( Main_V_x4[n] + (double)20 )  )  ) )  ) ;
		Main_alpha_X_i4[n] =  (  ( (double)0.0005 * exp(  ( (double)0.083 *  ( Main_V_x4[n] + (double)50 )  )  ) )  /  ( (double)1 + exp(  ( (double)0.057 *  ( Main_V_x4[n] + (double)50 )  )  ) )  ) ;
		Main_kX_k4[n] =  (  ( Main_alpha_X_i4[n] *  ( (double)1 - Main_X_x4[n] )  )  -  ( Main_beta_X_i4[n] * Main_X_x4[n] )  ) ;
		Main_X_x1[ ( n + 1 ) ] =  ( Main_X_x1[n] +  (  ( d / (double)6 )  *  ( Main_kX_k1[n] +  ( (double)2 * Main_kX_k2[n] )  +  ( (double)2 * Main_kX_k3[n] )  + Main_kX_k4[n] )  )  ) ;
		Main_Xi_i4[n] =  (  ( Main_V_x4[n] >  ( - (double)100 )  )  ?  (  ( (double)2.837 *  ( exp(  ( (double)0.04 *  ( Main_V_x4[n] + (double)77 )  )  ) - (double)1 )  )  /  (  ( Main_V_x4[n] + (double)77 )  * exp(  ( (double)0.04 *  ( Main_V_x4[n] + (double)35 )  )  ) )  )  : (double)1 ) ;
		Main_beta_f_i4[n] =  (  ( (double)0.0065 * exp(  (  ( - (double)0.02 )  *  ( Main_V_x4[n] + (double)30 )  )  ) )  /  ( (double)1 + exp(  (  ( - (double)0.2 )  *  ( Main_V_x4[n] + (double)30 )  )  ) )  ) ;
		Main_i_K_i4[n] =  ( Main_g_K_i4[n] * Main_X_x4[n] * Main_Xi_i4[n] *  ( Main_V_x4[n] - Main_E_K_i4[n] )  ) ;
		Main_Kp_i4[n] =  ( (double)1 /  ( (double)1 + exp(  (  ( (double)7.488 - Main_V_x4[n] )  / (double)5.98 )  ) )  ) ;
		Main_i_Kp_i4[n] =  ( Main_g_Kp_z * Main_Kp_i4[n] *  ( Main_V_x4[n] - Main_E_Kp_i4[n] )  ) ;
		Main_beta_K1_i4[n] =  (  (  ( (double)0.49124 * exp(  ( (double)0.08032 *  (  ( Main_V_x4[n] + (double)5.476 )  - Main_E_K1_i4[n] )  )  ) )  +  ( (double)1 * exp(  ( (double)0.06175 *  ( Main_V_x4[n] -  ( Main_E_K1_i4[n] + (double)594.31 )  )  )  ) )  )  /  ( (double)1 + exp(  (  ( - (double)0.5143 )  *  (  ( Main_V_x4[n] - Main_E_K1_i4[n] )  + (double)4.753 )  )  ) )  ) ;
		Main_alpha_K1_i4[n] =  ( (double)1.02 /  ( (double)1 + exp(  ( (double)0.2385 *  (  ( Main_V_x4[n] - Main_E_K1_i4[n] )  - (double)59.215 )  )  ) )  ) ;
		Main_K1_infinity_i4[n] =  ( Main_alpha_K1_i4[n] /  ( Main_alpha_K1_i4[n] + Main_beta_K1_i4[n] )  ) ;
		Main_i_K1_i4[n] =  ( Main_g_K1_i4[n] * Main_K1_infinity_i4[n] *  ( Main_V_x4[n] - Main_E_K1_i4[n] )  ) ;
		Main_i_Na_i4[n] =  ( Main_g_Na_z * pow( Main_m_x4[n] , (double)3 ) * Main_h_x4[n] * Main_j_x4[n] *  ( Main_V_x4[n] - Main_E_Na_i4[n] )  ) ;
		Main_alpha_m_i4[n] =  (  ( (double)0.32 *  ( Main_V_x4[n] + (double)47.13 )  )  /  ( (double)1 - exp(  (  ( - (double)0.1 )  *  ( Main_V_x4[n] + (double)47.13 )  )  ) )  ) ;
		Main_beta_m_i4[n] =  ( (double)0.08 * exp(  (  ( - Main_V_x4[n] )  / (double)11 )  ) ) ;
		Main_km_k4[n] =  (  ( Main_alpha_m_i4[n] *  ( (double)1 - Main_m_x4[n] )  )  -  ( Main_beta_m_i4[n] * Main_m_x4[n] )  ) ;
		Main_m_x1[ ( n + 1 ) ] =  ( Main_m_x1[n] +  (  ( d / (double)6 )  *  ( Main_km_k1[n] +  ( (double)2 * Main_km_k2[n] )  +  ( (double)2 * Main_km_k3[n] )  + Main_km_k4[n] )  )  ) ;
		Main_i_b_i4[n] =  ( Main_g_b_z *  ( Main_V_x4[n] - Main_E_b_z )  ) ;
		Main_alpha_h_i4[n] =  (  ( Main_V_x4[n] <  ( - (double)40 )  )  ?  ( (double)0.135 * exp(  (  ( (double)80 + Main_V_x4[n] )  /  ( - (double)6.8 )  )  ) )  : (double)0 ) ;
		Main_i_si_i4[n] =  ( (double)0.09 * Main_d_x4[n] * Main_f_x4[n] *  ( Main_V_x4[n] - Main_E_si_i4[n] )  ) ;
		Main_kV_k4[n] =  (  (  ( - (double)1 )  / Main_C_z )  *  ( Main_I_stim_i4[n] + Main_i_Na_i4[n] + Main_i_si_i4[n] + Main_i_K_i4[n] + Main_i_K1_i4[n] + Main_i_Kp_i4[n] + Main_i_b_i4[n] )  ) ;
		Main_kCai_k4[n] =  (  (  (  ( - (double)0.0001 )  / (double)1 )  * Main_i_si_i4[n] )  +  ( (double)0.07 *  ( (double)0.0001 - Main_Cai_x4[n] )  )  ) ;
		Main_Cai_x1[ ( n + 1 ) ] =  ( Main_Cai_x1[n] +  (  ( d / (double)6 )  *  ( Main_kCai_k1[n] +  ( (double)2 * Main_kCai_k2[n] )  +  ( (double)2 * Main_kCai_k3[n] )  + Main_kCai_k4[n] )  )  ) ;
		Main_alpha_d_i4[n] =  (  ( (double)0.095 * exp(  (  ( - (double)0.01 )  *  ( Main_V_x4[n] - (double)5 )  )  ) )  /  ( (double)1 + exp(  (  ( - (double)0.072 )  *  ( Main_V_x4[n] - (double)5 )  )  ) )  ) ;
		Main_beta_d_i4[n] =  (  ( (double)0.07 * exp(  (  ( - (double)0.017 )  *  ( Main_V_x4[n] + (double)44 )  )  ) )  /  ( (double)1 + exp(  ( (double)0.05 *  ( Main_V_x4[n] + (double)44 )  )  ) )  ) ;
		Main_kd_k4[n] =  (  ( Main_alpha_d_i4[n] *  ( (double)1 - Main_d_x4[n] )  )  -  ( Main_beta_d_i4[n] * Main_d_x4[n] )  ) ;
		Main_d_x1[ ( n + 1 ) ] =  ( Main_d_x1[n] +  (  ( d / (double)6 )  *  ( Main_kd_k1[n] +  ( (double)2 * Main_kd_k2[n] )  +  ( (double)2 * Main_kd_k3[n] )  + Main_kd_k4[n] )  )  ) ;
		Main_alpha_f_i4[n] =  (  ( (double)0.012 * exp(  (  ( - (double)0.008 )  *  ( Main_V_x4[n] + (double)28 )  )  ) )  /  ( (double)1 + exp(  ( (double)0.15 *  ( Main_V_x4[n] + (double)28 )  )  ) )  ) ;
		Main_kf_k4[n] =  (  ( Main_alpha_f_i4[n] *  ( (double)1 - Main_f_x4[n] )  )  -  ( Main_beta_f_i4[n] * Main_f_x4[n] )  ) ;
		Main_f_x1[ ( n + 1 ) ] =  ( Main_f_x1[n] +  (  ( d / (double)6 )  *  ( Main_kf_k1[n] +  ( (double)2 * Main_kf_k2[n] )  +  ( (double)2 * Main_kf_k3[n] )  + Main_kf_k4[n] )  )  ) ;
		Main_beta_h_i4[n] =  (  ( Main_V_x4[n] <  ( - (double)40 )  )  ?  (  ( (double)3.56 * exp(  ( (double)0.079 * Main_V_x4[n] )  ) )  +  ( (double)310000 * exp(  ( (double)0.35 * Main_V_x4[n] )  ) )  )  :  ( (double)1 /  ( (double)0.13 *  ( (double)1 + exp(  (  ( Main_V_x4[n] + (double)10.66 )  /  ( - (double)11.1 )  )  ) )  )  )  ) ;
		Main_kh_k4[n] =  (  ( Main_alpha_h_i4[n] *  ( (double)1 - Main_h_x4[n] )  )  -  ( Main_beta_h_i4[n] * Main_h_x4[n] )  ) ;
		Main_h_x1[ ( n + 1 ) ] =  ( Main_h_x1[n] +  (  ( d / (double)6 )  *  ( Main_kh_k1[n] +  ( (double)2 * Main_kh_k2[n] )  +  ( (double)2 * Main_kh_k3[n] )  + Main_kh_k4[n] )  )  ) ;
		Main_alpha_j_i4[n] =  (  ( Main_V_x4[n] <  ( - (double)40 )  )  ?  (  (  (  (  ( - (double)127140 )  * exp(  ( (double)0.2444 * Main_V_x4[n] )  ) )  -  ( (double)0.00003474 * exp(  (  ( - (double)0.04391 )  * Main_V_x4[n] )  ) )  )  *  ( Main_V_x4[n] + (double)37.78 )  )  /  ( (double)1 + exp(  ( (double)0.311 *  ( Main_V_x4[n] + (double)79.23 )  )  ) )  )  : (double)0 ) ;
		Main_beta_j_i4[n] =  (  ( Main_V_x4[n] <  ( - (double)40 )  )  ?  (  ( (double)0.1212 * exp(  (  ( - (double)0.01052 )  * Main_V_x4[n] )  ) )  /  ( (double)1 + exp(  (  ( - (double)0.1378 )  *  ( Main_V_x4[n] + (double)40.14 )  )  ) )  )  :  (  ( (double)0.3 * exp(  (  ( - (double)0.0000002535 )  * Main_V_x4[n] )  ) )  /  ( (double)1 + exp(  (  ( - (double)0.1 )  *  ( Main_V_x4[n] + (double)32 )  )  ) )  )  ) ;
		Main_kj_k4[n] =  (  ( Main_alpha_j_i4[n] *  ( (double)1 - Main_j_x4[n] )  )  -  ( Main_beta_j_i4[n] * Main_j_x4[n] )  ) ;
		Main_j_x1[ ( n + 1 ) ] =  ( Main_j_x1[n] +  (  ( d / (double)6 )  *  ( Main_kj_k1[n] +  ( (double)2 * Main_kj_k2[n] )  +  ( (double)2 * Main_kj_k3[n] )  + Main_kj_k4[n] )  )  ) ;
		Main_V_x1[ ( n + 1 ) ] =  ( Main_V_x1[n] +  (  ( d / (double)6 )  *  ( Main_kV_k1[n] +  ( (double)2 * Main_kV_k2[n] )  +  ( (double)2 * Main_kV_k3[n] )  + Main_kV_k4[n] )  )  ) ;
		
		
		n =  ( n + 1 ) ;

	}while(!(Main_time_t1[n] == 400));

	t = Main_time_t1[ ( n + 1 ) ];
	Xend = Main_X_x1[ ( n + 1 ) ];
	mend = Main_m_x1[ ( n + 1 ) ];
	Caiend = Main_Cai_x1[ ( n + 1 ) ];
	dend = Main_d_x1[ ( n + 1 ) ];
	fend = Main_f_x1[ ( n + 1 ) ];
	hend = Main_h_x1[ ( n + 1 ) ];
	jend = Main_j_x1[ ( n + 1 ) ];
	Vend = Main_V_x1[ ( n + 1 ) ];
	
	
	
	
	
}



