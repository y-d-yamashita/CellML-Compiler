#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#define __DATA_NUM 32
#define __DATA_NUMX 32
#define __DATA_NUMY 1


int main ( int argc , char** argv ) ;

int main ( int argc , char** argv ) {

	int __i;
	double* xi;
	double* xo;
	double* x0;
	double* x1;
	double* x2;
	double* x3;
	double* k1;
	double* k2;
	double* k3;
	double* y0;
	double* y1;
	double* y2;
	double* z;
	double t;
	double d = 0.010000;
	double** ym;
	double zz;

	xi = (double*)malloc (  ( sizeof( double ) *  ( 1 * __DATA_NUM )  )  ) ; ;
	xo = (double*)malloc (  ( sizeof( double ) *  ( 1 * __DATA_NUM )  )  ) ; ;
	x0 = (double*)malloc (  ( sizeof( double ) *  ( 1 * __DATA_NUM )  )  ) ; ;
	x1 = (double*)malloc (  ( sizeof( double ) *  ( 1 * __DATA_NUM )  )  ) ; ;
	x2 = (double*)malloc (  ( sizeof( double ) *  ( 1 * __DATA_NUM )  )  ) ; ;
	x3 = (double*)malloc (  ( sizeof( double ) *  ( 1 * __DATA_NUM )  )  ) ; ;
	y0 = (double*)malloc (  ( sizeof( double ) *  ( 0 * __DATA_NUM )  )  ) ; ;
	y1 = (double*)malloc (  ( sizeof( double ) *  ( 0 * __DATA_NUM )  )  ) ; ;
	y2 = (double*)malloc (  ( sizeof( double ) *  ( 0 * __DATA_NUM )  )  ) ; ;
	k1 = (double*)malloc (  ( sizeof( double ) *  ( 1 * __DATA_NUM )  )  ) ; ;
	k2 = (double*)malloc (  ( sizeof( double ) *  ( 1 * __DATA_NUM )  )  ) ; ;
	k3 = (double*)malloc (  ( sizeof( double ) *  ( 1 * __DATA_NUM )  )  ) ; ;
	z = (double*)malloc (  ( sizeof( double ) * 0 )  ) ; ;
	ym = (double**)malloc (  ( sizeof( double ) * __DATA_NUMX )  ) ; ;
	for(__i = 0; ( __i < __DATA_NUMX ) ;__i++){

		ym[__i] = (double*)malloc (  ( sizeof( double ) * __DATA_NUMY )  ) ; ;

	}

	for(t = 0.000000; ( t <= 400.000000 ) ;t =  ( t + d ) ){

		for(ix = 0; ( ix < __DATA_NUMX ) ;ix++){

			for(iy = 0; ( iy < __DATA_NUMY ) ;iy++){

				ym[ix][iy] =  (  ( xi[ (0 * __DATA_NUM) + (ix * __DATA_NUMX) + ( (iy - 1)%__DATA_NUMY) ]  - xi[ (0 * __DATA_NUM) + (ix * __DATA_NUMX) + iy ] )  / R ) ;

			}


		}

		for(ix = 0; ( ix < __DATA_NUMX ) ;ix++){

			for(iy = 0; ( iy < __DATA_NUMY ) ;iy++){

				zz = 0;
				if( (  (  (  ( ix >= 0 )  &&  ( ix < __DATA_NUMX )  )  &&  ( iy >= 0 )  )  &&  ( iy < 1 )  ) ){

					zz =  // Insert action potential propagation statement here and indicate the action potential voltage;

				}

				zz =  ( zz + ym[ix][iy] ) ;
				x0[ (  ( 0 * __DATA_NUM )  + __i ) ] = xi[ (  ( 0 * __DATA_NUM )  + __i ) ];
				k1[ (  ( 0 * __DATA_NUM )  + __i ) ] = exp(t );
				x1[ (  ( 0 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ] +  ( k1[ (  ( 0 * __DATA_NUM )  + __i ) ] *  ( d / (double)2 )  )  ) ;
				k2[ (  ( 0 * __DATA_NUM )  + __i ) ] = exp( ( t +  ( d / (double)2 )  )  );
				x2[ (  ( 0 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ] +  ( d *  (  ( - k1[ (  ( 0 * __DATA_NUM )  + __i ) ] )  +  ( (double)2 * k2[ (  ( 0 * __DATA_NUM )  + __i ) ] )  )  )  ) ;
				k3[ (  ( 0 * __DATA_NUM )  + __i ) ] = exp( ( t + d )  );
				x3[ (  ( 0 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ] +  (  ( d / (double)6 )  *  ( k1[ (  ( 0 * __DATA_NUM )  + __i ) ] +  ( (double)4 * k2[ (  ( 0 * __DATA_NUM )  + __i ) ] )  + k3[ (  ( 0 * __DATA_NUM )  + __i ) ] )  )  ) ;
				xo[ (  ( 0 * __DATA_NUM )  + __i ) ] = x3[ (  ( 0 * __DATA_NUM )  + __i ) ];
				xi[ (  ( 0 * __DATA_NUM )  + __i ) ] = xo[ (  ( 0 * __DATA_NUM )  + __i ) ];

			}


		}


	}

	free ( xi ) ; 
	free ( xo ) ; 
	free ( x0 ) ; 
	free ( x1 ) ; 
	free ( x2 ) ; 
	free ( x3 ) ; 
	free ( y0 ) ; 
	free ( y1 ) ; 
	free ( y2 ) ; 
	free ( k1 ) ; 
	free ( k2 ) ; 
	free ( k3 ) ; 
	free ( z ) ; 
	free ( ym ) ; 
}



