#include<stdio.h>
#include<math.h>
#include<cutil.h>
#include<cuda.h>
#define __DATA_NUM 32
#define __DATA_NUMX 32
#define __DATA_NUMY 1
#define __THREADS_X 256
#define __THREADS_Y 1
#define __THREADS_Z 1
#define __BLOCKS_X ( __DATA_NUM /  ( __THREADS_X * __THREADS_Y * __THREADS_Z ) ) 
#define __BLOCKS_Y 1


int main ( int argc , char** argv ) ;
__global__ void __init_kernel ( double* xi ) ;
__global__ void __calc_kernel ( double* xi , double* xo , double* x1 , double* x2 , double* k1 , double* y1 , double* z , double t , double d , double R ) ;

int main ( int argc , char** argv ) {

	double* __host_xi;
	double* __dev_xi;
	double* __host_xo;
	double* __dev_xo;
	double* __host_x1;
	double* __dev_x1;
	double* __host_x2;
	double* __dev_x2;
	double* __host_k1;
	double* __dev_k1;
	double* __host_y1;
	double* __dev_y1;
	double* __host_z;
	double* __dev_z;
	double t;
	double d = 0.010000;
	dim3 __block ( __THREADS_X , __THREADS_Y , __THREADS_Z ) ;
	dim3 __grid ( __BLOCKS_X , __BLOCKS_Y ) ;

	CUT_DEVICE_INIT ( argc , argv ) ; 
	__host_xi = (double*)malloc (  ( sizeof( double ) *  ( __DATA_NUM * 12 )  )  ) ; ;
	__host_xo = (double*)malloc (  ( sizeof( double ) *  ( __DATA_NUM * 12 )  )  ) ; ;
	__host_x1 = (double*)malloc (  ( sizeof( double ) *  ( __DATA_NUM * 12 )  )  ) ; ;
	__host_x2 = (double*)malloc (  ( sizeof( double ) *  ( __DATA_NUM * 12 )  )  ) ; ;
	__host_k1 = (double*)malloc (  ( sizeof( double ) *  ( __DATA_NUM * 12 )  )  ) ; ;
	__host_y1 = (double*)malloc (  ( sizeof( double ) *  ( __DATA_NUM * 64 )  )  ) ; ;
	__host_z = (double*)malloc (  ( sizeof( double ) * 52 )  ) ; ;
	memset ( __host_xi , 0 ,  ( sizeof( double ) *  ( __DATA_NUM * 12 )  )  ) ; 
	memset ( __host_xo , 0 ,  ( sizeof( double ) *  ( __DATA_NUM * 12 )  )  ) ; 
	memset ( __host_x1 , 0 ,  ( sizeof( double ) *  ( __DATA_NUM * 12 )  )  ) ; 
	memset ( __host_x2 , 0 ,  ( sizeof( double ) *  ( __DATA_NUM * 12 )  )  ) ; 
	memset ( __host_k1 , 0 ,  ( sizeof( double ) *  ( __DATA_NUM * 12 )  )  ) ; 
	memset ( __host_y1 , 0 ,  ( sizeof( double ) *  ( __DATA_NUM * 64 )  )  ) ; 
	memset ( __host_z , 0 ,  ( sizeof( double ) * 52 )  ) ; 
	cudaMalloc ( ( void** ) &__dev_xi ,  ( sizeof( double ) *  ( __DATA_NUM * 12 )  )  ) ; 
	cudaMalloc ( ( void** ) &__dev_xo ,  ( sizeof( double ) *  ( __DATA_NUM * 12 )  )  ) ; 
	cudaMalloc ( ( void** ) &__dev_x1 ,  ( sizeof( double ) *  ( __DATA_NUM * 12 )  )  ) ; 
	cudaMalloc ( ( void** ) &__dev_x2 ,  ( sizeof( double ) *  ( __DATA_NUM * 12 )  )  ) ; 
	cudaMalloc ( ( void** ) &__dev_k1 ,  ( sizeof( double ) *  ( __DATA_NUM * 12 )  )  ) ; 
	cudaMalloc ( ( void** ) &__dev_y1 ,  ( sizeof( double ) *  ( __DATA_NUM * 64 )  )  ) ; 
	cudaMalloc ( ( void** ) &__dev_z ,  ( sizeof( double ) * 52 )  ) ; 
	cudaMemcpy ( __dev_xi , __host_xi ,  ( sizeof( double ) *  ( __DATA_NUM * 12 )  )  , cudaMemcpyHostToDevice ) ; 
	cudaMemcpy ( __dev_xo , __host_xo ,  ( sizeof( double ) *  ( __DATA_NUM * 12 )  )  , cudaMemcpyHostToDevice ) ; 
	cudaMemcpy ( __dev_x1 , __host_x1 ,  ( sizeof( double ) *  ( __DATA_NUM * 12 )  )  , cudaMemcpyHostToDevice ) ; 
	cudaMemcpy ( __dev_x2 , __host_x2 ,  ( sizeof( double ) *  ( __DATA_NUM * 12 )  )  , cudaMemcpyHostToDevice ) ; 
	cudaMemcpy ( __dev_k1 , __host_k1 ,  ( sizeof( double ) *  ( __DATA_NUM * 12 )  )  , cudaMemcpyHostToDevice ) ; 
	cudaMemcpy ( __dev_y1 , __host_y1 ,  ( sizeof( double ) *  ( __DATA_NUM * 64 )  )  , cudaMemcpyHostToDevice ) ; 
	cudaMemcpy ( __dev_z , __host_z ,  ( sizeof( double ) * 52 )  , cudaMemcpyHostToDevice ) ; 
	__init_kernel <<< __grid , __block >>>  ( __dev_xi ) ; 
	for(t = 0.000000; ( t <= 400.000000 ) ;t =  ( t + d ) ){

		for(ix = 0; ( ix < __DATA_NUMX ) ;ix++){

			for(iy = 0; ( iy < __DATA_NUMY ) ;iy++){

				__calc_kernel <<< __grid , __block >>>  ( __dev_xi , __dev_xo , __dev_x1 , __dev_x2 , __dev_k1 , __dev_y1 , __dev_z , t , d ) ; 

			}


		}


	}

	free ( __host_xi ) ; 
	free ( __host_xo ) ; 
	free ( __host_x1 ) ; 
	free ( __host_x2 ) ; 
	free ( __host_k1 ) ; 
	free ( __host_y1 ) ; 
	free ( __host_z ) ; 
	cudaFree ( __dev_xi ) ; 
	cudaFree ( __dev_xo ) ; 
	cudaFree ( __dev_x1 ) ; 
	cudaFree ( __dev_x2 ) ; 
	cudaFree ( __dev_k1 ) ; 
	cudaFree ( __dev_y1 ) ; 
	cudaFree ( __dev_z ) ; 
	CUT_EXIT ( argc , argv ) ; 
}


__global__ void __init_kernel ( double* xi ) {

	const unsigned int __tmp_idx_x =  ( threadIdx.x +  ( blockDim.x * blockIdx.x )  ) ;
	const unsigned int __tmp_idx_y =  ( threadIdx.y +  ( blockDim.y * blockIdx.y )  ) ;
	const unsigned int __tmp_size_x =  ( blockDim.x * gridDim.x ) ;
	const unsigned int __tid =  ( __tmp_idx_x +  ( __tmp_idx_y * __tmp_size_x )  ) ;

}


__global__ void __calc_kernel ( double* xi , double* xo , double* x1 , double* x2 , double* k1 , double* y1 , double* z , double t , double d , double R ) {

	const unsigned int __tmp_idx_x =  ( threadIdx.x +  ( blockDim.x * blockIdx.x )  ) ;
	const unsigned int __tmp_idx_y =  ( threadIdx.y +  ( blockDim.y * blockIdx.y )  ) ;
	const unsigned int __tmp_size_x =  ( blockDim.x * gridDim.x ) ;
	const unsigned int __tid =  ( __tmp_idx_x +  ( __tmp_idx_y * __tmp_size_x )  ) ;
	double ym;

	ym = (__tmp_idx_y!=0)?(xi[ (0 * __DATA_NUM) + (__tmp_idx_x + ( (__tmp_idx_y - 1)  *  __tmp_size_x) ) ] - xi[ (0 * __DATA_NUM) + __tid ])/R:(double)0.0;
	x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] = xi[ (  ( 0 * __DATA_NUM )  + __tid ) ];
	x1[ (  ( 1 * __DATA_NUM )  + __tid ) ] = xi[ (  ( 1 * __DATA_NUM )  + __tid ) ];
	x1[ (  ( 2 * __DATA_NUM )  + __tid ) ] = xi[ (  ( 2 * __DATA_NUM )  + __tid ) ];
	x1[ (  ( 3 * __DATA_NUM )  + __tid ) ] = xi[ (  ( 3 * __DATA_NUM )  + __tid ) ];
	x1[ (  ( 4 * __DATA_NUM )  + __tid ) ] = xi[ (  ( 4 * __DATA_NUM )  + __tid ) ];
	x1[ (  ( 5 * __DATA_NUM )  + __tid ) ] = xi[ (  ( 5 * __DATA_NUM )  + __tid ) ];
	x1[ (  ( 6 * __DATA_NUM )  + __tid ) ] = xi[ (  ( 6 * __DATA_NUM )  + __tid ) ];
	x1[ (  ( 7 * __DATA_NUM )  + __tid ) ] = xi[ (  ( 7 * __DATA_NUM )  + __tid ) ];
	x1[ (  ( 8 * __DATA_NUM )  + __tid ) ] = xi[ (  ( 8 * __DATA_NUM )  + __tid ) ];
	x1[ (  ( 9 * __DATA_NUM )  + __tid ) ] = xi[ (  ( 9 * __DATA_NUM )  + __tid ) ];
	x1[ (  ( 10 * __DATA_NUM )  + __tid ) ] = xi[ (  ( 10 * __DATA_NUM )  + __tid ) ];
	x1[ (  ( 11 * __DATA_NUM )  + __tid ) ] = xi[ (  ( 11 * __DATA_NUM )  + __tid ) ];
	y1[ (  ( 0 * __DATA_NUM )  + __tid ) ] = z[4];
	y1[ (  ( 1 * __DATA_NUM )  + __tid ) ] =  (  (  ( z[0] * z[1] )  / z[2] )  * log(  ( z[6] / x1[ (  ( 7 * __DATA_NUM )  + __tid ) ] )  ) ) ;
	y1[ (  ( 2 * __DATA_NUM )  + __tid ) ] =  ( (double)0.08 * exp( (  ( - x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] )  / (double)11.0 )  ) ) ;
	y1[ (  ( 3 * __DATA_NUM )  + __tid ) ] =  (  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] < (double)-40.0 )  ?  (  ( (double)3.56 * exp( ( (double)0.079 * x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] )  ) )  +  ( (double)310000.0 * exp( ( (double)0.35 * x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] )  ) )  )  :  ( (double)1.0 /  ( (double)0.13 *  ( (double)1.0 + exp( (  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] + (double)10.66 )  / (double)-11.1 )  ) )  )  )  ) ;
	y1[ (  ( 4 * __DATA_NUM )  + __tid ) ] =  (  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] < (double)-40.0 )  ?  (  ( (double)0.1212 * exp( ( (double)-0.01052 * x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] )  ) )  /  ( (double)1.0 + exp( ( (double)-0.1378 *  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] + (double)40.14 )  )  ) )  )  :  (  ( (double)0.3 * exp( ( (double)-0.0000002535 * x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] )  ) )  /  ( (double)1.0 + exp( ( (double)-0.1 *  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] + (double)32.0 )  )  ) )  )  ) ;
	y1[ (  ( 5 * __DATA_NUM )  + __tid ) ] =  ( z[11] * pow((double)2.0 , (double)2.0 ) *  (  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] * pow(z[2] , (double)2.0 ) )  /  ( z[0] * z[1] )  )  *  (  (  ( z[14] * x1[ (  ( 8 * __DATA_NUM )  + __tid ) ] * exp( (  ( (double)2.0 * x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] * z[2] )  /  ( z[0] * z[1] )  )  ) )  -  ( z[15] * z[16] )  )  /  ( exp( (  ( (double)2.0 * x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] * z[2] )  /  ( z[0] * z[1] )  )  ) - (double)1.0 )  )  ) ;
	y1[ (  ( 6 * __DATA_NUM )  + __tid ) ] =  ( z[13] * pow((double)1.0 , (double)2.0 ) *  (  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] * pow(z[2] , (double)2.0 ) )  /  ( z[0] * z[1] )  )  *  (  (  ( z[9] * x1[ (  ( 9 * __DATA_NUM )  + __tid ) ] * exp( (  ( (double)1.0 * x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] * z[2] )  /  ( z[0] * z[1] )  )  ) )  -  ( z[10] * z[17] )  )  /  ( exp( (  ( (double)1.0 * x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] * z[2] )  /  ( z[0] * z[1] )  )  ) - (double)1.0 )  )  ) ;
	y1[ (  ( 7 * __DATA_NUM )  + __tid ) ] =  ( (double)1.0 /  ( (double)1.0 + exp( ( -  (  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] + (double)10.0 )  / (double)6.24 )  )  ) )  ) ;
	y1[ (  ( 8 * __DATA_NUM )  + __tid ) ] =  (  ( (double)1.0 /  ( (double)1.0 + exp( (  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] + (double)35.06 )  / (double)8.6 )  ) )  )  +  ( (double)0.6 /  ( (double)1.0 + exp( (  ( (double)50.0 - x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] )  / (double)20.0 )  ) )  )  ) ;
	y1[ (  ( 9 * __DATA_NUM )  + __tid ) ] =  ( (double)1.0 /  ( (double)1.0 + pow( ( x1[ (  ( 8 * __DATA_NUM )  + __tid ) ] / z[18] )  , (double)2.0 ) )  ) ;
	y1[ (  ( 10 * __DATA_NUM )  + __tid ) ] =  (  (  ( z[0] * z[1] )  / z[2] )  * log(  (  ( z[17] +  ( z[20] * z[6] )  )  /  ( x1[ (  ( 9 * __DATA_NUM )  + __tid ) ] +  ( z[20] * x1[ (  ( 7 * __DATA_NUM )  + __tid ) ] )  )  )  ) ) ;
	y1[ (  ( 11 * __DATA_NUM )  + __tid ) ] =  (  ( (double)0.0000719 *  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] + (double)30.0 )  )  /  ( (double)1.0 - exp( ( (double)-0.148 *  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] + (double)30.0 )  )  ) )  ) ;
	y1[ (  ( 12 * __DATA_NUM )  + __tid ) ] =  ( (double)1.0 /  ( (double)1.0 + exp( (  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] - (double)56.26 )  / (double)32.1 )  ) )  ) ;
	y1[ (  ( 13 * __DATA_NUM )  + __tid ) ] =  (  (  ( z[0] * z[1] )  / z[2] )  * log(  ( z[17] / x1[ (  ( 9 * __DATA_NUM )  + __tid ) ] )  ) ) ;
	y1[ (  ( 14 * __DATA_NUM )  + __tid ) ] =  ( (double)1.02 /  ( (double)1.0 + exp( ( (double)0.2385 *  (  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] - y1[ (  ( 13 * __DATA_NUM )  + __tid ) ] )  - (double)59.215 )  )  ) )  ) ;
	y1[ (  ( 15 * __DATA_NUM )  + __tid ) ] = y1[ (  ( 13 * __DATA_NUM )  + __tid ) ];
	y1[ (  ( 16 * __DATA_NUM )  + __tid ) ] =  ( z[24] *  ( x1[ (  ( 8 * __DATA_NUM )  + __tid ) ] /  ( z[23] + x1[ (  ( 8 * __DATA_NUM )  + __tid ) ] )  )  ) ;
	y1[ (  ( 17 * __DATA_NUM )  + __tid ) ] =  (  (  ( z[0] * z[1] )  /  ( (double)2.0 * z[2] )  )  * log(  ( z[16] / x1[ (  ( 8 * __DATA_NUM )  + __tid ) ] )  ) ) ;
	y1[ (  ( 18 * __DATA_NUM )  + __tid ) ] =  (  ( (double)1.0 / (double)7.0 )  *  ( exp( ( z[6] / (double)67.3 )  ) - (double)1.0 )  ) ;
	y1[ (  ( 19 * __DATA_NUM )  + __tid ) ] =  (  (  ( z[0] * z[1] )  / z[2] )  * log(  (  ( z[17] + z[6] )  /  ( x1[ (  ( 9 * __DATA_NUM )  + __tid ) ] + x1[ (  ( 7 * __DATA_NUM )  + __tid ) ] )  )  ) ) ;
	y1[ (  ( 20 * __DATA_NUM )  + __tid ) ] =  ( z[32] *  ( (double)1.0 /  ( pow(z[33] , (double)3.0 ) + pow(z[6] , (double)3.0 ) )  )  *  ( (double)1.0 /  ( z[34] + z[16] )  )  *  ( (double)1.0 /  ( (double)1.0 +  ( z[35] * exp( (  ( z[36] - (double)1.0 )  * x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] *  ( z[2] /  ( z[0] * z[1] )  )  )  ) )  )  )  *  (  ( exp( ( z[36] * x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] *  ( z[2] /  ( z[0] * z[1] )  )  )  ) * pow(x1[ (  ( 7 * __DATA_NUM )  + __tid ) ] , (double)3.0 ) * z[16] )  -  ( exp( (  ( z[36] - (double)1.0 )  * x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] *  ( z[2] /  ( z[0] * z[1] )  )  )  ) * pow(z[6] , (double)3.0 ) * x1[ (  ( 8 * __DATA_NUM )  + __tid ) ] )  )  ) ;
	y1[ (  ( 21 * __DATA_NUM )  + __tid ) ] =  (  ( z[46] < z[47] )  ? (double)0.0 : z[37] ) ;
	y1[ (  ( 22 * __DATA_NUM )  + __tid ) ] =  ( z[44] / z[45] ) ;
	y1[ (  ( 23 * __DATA_NUM )  + __tid ) ] =  ( z[5] * pow(x1[ (  ( 1 * __DATA_NUM )  + __tid ) ] , (double)3.0 ) * x1[ (  ( 2 * __DATA_NUM )  + __tid ) ] * x1[ (  ( 3 * __DATA_NUM )  + __tid ) ] *  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] - y1[ (  ( 1 * __DATA_NUM )  + __tid ) ] )  ) ;
	y1[ (  ( 24 * __DATA_NUM )  + __tid ) ] =  (  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] < (double)-40.0 )  ?  ( (double)0.135 * exp( (  ( (double)80.0 + x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] )  / (double)-6.8 )  ) )  : (double)0.0 ) ;
	y1[ (  ( 25 * __DATA_NUM )  + __tid ) ] =  ( x1[ (  ( 4 * __DATA_NUM )  + __tid ) ] * x1[ (  ( 5 * __DATA_NUM )  + __tid ) ] * y1[ (  ( 9 * __DATA_NUM )  + __tid ) ] * y1[ (  ( 5 * __DATA_NUM )  + __tid ) ] ) ;
	y1[ (  ( 26 * __DATA_NUM )  + __tid ) ] =  ( x1[ (  ( 4 * __DATA_NUM )  + __tid ) ] * x1[ (  ( 5 * __DATA_NUM )  + __tid ) ] * y1[ (  ( 9 * __DATA_NUM )  + __tid ) ] * y1[ (  ( 6 * __DATA_NUM )  + __tid ) ] ) ;
	y1[ (  ( 27 * __DATA_NUM )  + __tid ) ] =  ( y1[ (  ( 7 * __DATA_NUM )  + __tid ) ] *  (  ( (double)1.0 - exp( ( -  (  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] + (double)10.0 )  / (double)6.24 )  )  ) )  /  ( (double)0.035 *  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] + (double)10.0 )  )  )  ) ;
	y1[ (  ( 28 * __DATA_NUM )  + __tid ) ] =  ( (double)1.0 /  (  ( (double)0.0197 * exp( ( - pow( ( (double)0.0337 *  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] + (double)10.0 )  )  , (double)2.0 ) )  ) )  + (double)0.02 )  ) ;
	y1[ (  ( 29 * __DATA_NUM )  + __tid ) ] =  ( z[19] * sqrt(  ( z[17] / (double)5.4 )  ) ) ;
	y1[ (  ( 30 * __DATA_NUM )  + __tid ) ] =  (  ( (double)0.000131 *  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] + (double)30.0 )  )  /  ( (double)-1.0 + exp( ( (double)0.0687 *  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] + (double)30.0 )  )  ) )  ) ;
	y1[ (  ( 31 * __DATA_NUM )  + __tid ) ] =  (  (  ( (double)0.49124 * exp( ( (double)0.08032 *  (  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] + (double)5.476 )  - y1[ (  ( 13 * __DATA_NUM )  + __tid ) ] )  )  ) )  + exp( ( (double)0.06175 *  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] -  ( y1[ (  ( 13 * __DATA_NUM )  + __tid ) ] + (double)594.31 )  )  )  ) )  /  ( (double)1.0 + exp( ( (double)-0.5143 *  (  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] - y1[ (  ( 13 * __DATA_NUM )  + __tid ) ] )  + (double)4.753 )  )  ) )  ) ;
	y1[ (  ( 32 * __DATA_NUM )  + __tid ) ] =  ( (double)1.0 /  ( (double)1.0 + exp( (  ( (double)7.488 - x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] )  / (double)5.98 )  ) )  ) ;
	y1[ (  ( 33 * __DATA_NUM )  + __tid ) ] = y1[ (  ( 1 * __DATA_NUM )  + __tid ) ];
	y1[ (  ( 34 * __DATA_NUM )  + __tid ) ] =  ( z[26] *  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] - y1[ (  ( 17 * __DATA_NUM )  + __tid ) ] )  ) ;
	y1[ (  ( 35 * __DATA_NUM )  + __tid ) ] =  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] - y1[ (  ( 19 * __DATA_NUM )  + __tid ) ] ) ;
	y1[ (  ( 36 * __DATA_NUM )  + __tid ) ] =  ( z[30] * pow((double)1.0 , (double)2.0 ) *  (  ( y1[ (  ( 35 * __DATA_NUM )  + __tid ) ] * pow(z[2] , (double)2.0 ) )  /  ( z[0] * z[1] )  )  *  (  (  ( z[7] * x1[ (  ( 7 * __DATA_NUM )  + __tid ) ] * exp( (  ( (double)1.0 * y1[ (  ( 35 * __DATA_NUM )  + __tid ) ] * z[2] )  /  ( z[0] * z[1] )  )  ) )  -  ( z[8] * z[6] )  )  /  ( exp( (  ( (double)1.0 * y1[ (  ( 35 * __DATA_NUM )  + __tid ) ] * z[2] )  /  ( z[0] * z[1] )  )  ) - (double)1.0 )  )  ) ;
	y1[ (  ( 37 * __DATA_NUM )  + __tid ) ] =  ( y1[ (  ( 21 * __DATA_NUM )  + __tid ) ] *  (  ( z[46] - z[47] )  /  (  ( z[42] + z[46] )  - z[47] )  )  *  ( (double)1.0 - exp( ( -  ( z[40] / z[38] )  )  ) )  * exp( ( -  ( z[40] / z[39] )  )  ) ) ;
	y1[ (  ( 38 * __DATA_NUM )  + __tid ) ] =  ( y1[ (  ( 22 * __DATA_NUM )  + __tid ) ] * x1[ (  ( 11 * __DATA_NUM )  + __tid ) ] ) ;
	y1[ (  ( 39 * __DATA_NUM )  + __tid ) ] =  (  ( (double)0.32 *  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] + (double)47.13 )  )  /  ( (double)1.0 - exp( ( (double)-0.1 *  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] + (double)47.13 )  )  ) )  ) ;
	y1[ (  ( 40 * __DATA_NUM )  + __tid ) ] =  ( z[12] * pow((double)1.0 , (double)2.0 ) *  (  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] * pow(z[2] , (double)2.0 ) )  /  ( z[0] * z[1] )  )  *  (  (  ( z[7] * x1[ (  ( 7 * __DATA_NUM )  + __tid ) ] * exp( (  ( (double)1.0 * x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] * z[2] )  /  ( z[0] * z[1] )  )  ) )  -  ( z[8] * z[6] )  )  /  ( exp( (  ( (double)1.0 * x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] * z[2] )  /  ( z[0] * z[1] )  )  ) - (double)1.0 )  )  ) ;
	y1[ (  ( 41 * __DATA_NUM )  + __tid ) ] =  ( y1[ (  ( 7 * __DATA_NUM )  + __tid ) ] / y1[ (  ( 27 * __DATA_NUM )  + __tid ) ] ) ;
	y1[ (  ( 42 * __DATA_NUM )  + __tid ) ] =  ( y1[ (  ( 8 * __DATA_NUM )  + __tid ) ] / y1[ (  ( 28 * __DATA_NUM )  + __tid ) ] ) ;
	y1[ (  ( 43 * __DATA_NUM )  + __tid ) ] =  ( y1[ (  ( 29 * __DATA_NUM )  + __tid ) ] * pow(x1[ (  ( 6 * __DATA_NUM )  + __tid ) ] , (double)2.0 ) * y1[ (  ( 12 * __DATA_NUM )  + __tid ) ] *  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] - y1[ (  ( 10 * __DATA_NUM )  + __tid ) ] )  ) ;
	y1[ (  ( 44 * __DATA_NUM )  + __tid ) ] =  ( y1[ (  ( 14 * __DATA_NUM )  + __tid ) ] /  ( y1[ (  ( 14 * __DATA_NUM )  + __tid ) ] + y1[ (  ( 31 * __DATA_NUM )  + __tid ) ] )  ) ;
	y1[ (  ( 45 * __DATA_NUM )  + __tid ) ] =  ( z[25] *  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] - y1[ (  ( 33 * __DATA_NUM )  + __tid ) ] )  ) ;
	y1[ (  ( 46 * __DATA_NUM )  + __tid ) ] =  ( y1[ (  ( 36 * __DATA_NUM )  + __tid ) ] *  ( (double)1.0 /  ( (double)1.0 + pow( ( z[31] / x1[ (  ( 8 * __DATA_NUM )  + __tid ) ] )  , (double)3.0 ) )  )  ) ;
	y1[ (  ( 47 * __DATA_NUM )  + __tid ) ] =  ( z[30] * pow((double)1.0 , (double)2.0 ) *  (  ( y1[ (  ( 35 * __DATA_NUM )  + __tid ) ] * pow(z[2] , (double)2.0 ) )  /  ( z[0] * z[1] )  )  *  (  (  ( z[9] * x1[ (  ( 9 * __DATA_NUM )  + __tid ) ] * exp( (  ( (double)1.0 * y1[ (  ( 35 * __DATA_NUM )  + __tid ) ] * z[2] )  /  ( z[0] * z[1] )  )  ) )  -  ( z[10] * z[17] )  )  /  ( exp( (  ( (double)1.0 * y1[ (  ( 35 * __DATA_NUM )  + __tid ) ] * z[2] )  /  ( z[0] * z[1] )  )  ) - (double)1.0 )  )  ) ;
	y1[ (  ( 48 * __DATA_NUM )  + __tid ) ] =  ( z[44] *  ( x1[ (  ( 8 * __DATA_NUM )  + __tid ) ] /  ( x1[ (  ( 8 * __DATA_NUM )  + __tid ) ] + z[43] )  )  ) ;
	y1[ (  ( 49 * __DATA_NUM )  + __tid ) ] =  (  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] < (double)-40.0 )  ?  (  (  ( (double)-127140.0 * exp( ( (double)0.2444 * x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] )  ) )  -  ( (double)0.00003474 * exp( ( (double)-0.04391 * x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] )  ) )  )  *  (  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] + (double)37.78 )  /  ( (double)1.0 + exp( ( (double)0.311 *  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] + (double)79.23 )  )  ) )  )  )  : (double)0.0 ) ;
	y1[ (  ( 50 * __DATA_NUM )  + __tid ) ] =  (  ( (double)1.0 - y1[ (  ( 7 * __DATA_NUM )  + __tid ) ] )  / y1[ (  ( 27 * __DATA_NUM )  + __tid ) ] ) ;
	y1[ (  ( 51 * __DATA_NUM )  + __tid ) ] =  ( z[21] * sqrt(  ( z[17] / (double)5.4 )  ) ) ;
	y1[ (  ( 52 * __DATA_NUM )  + __tid ) ] =  ( z[22] * y1[ (  ( 32 * __DATA_NUM )  + __tid ) ] *  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] - y1[ (  ( 15 * __DATA_NUM )  + __tid ) ] )  ) ;
	y1[ (  ( 53 * __DATA_NUM )  + __tid ) ] =  ( y1[ (  ( 47 * __DATA_NUM )  + __tid ) ] *  ( (double)1.0 /  ( (double)1.0 + pow( ( z[31] / x1[ (  ( 8 * __DATA_NUM )  + __tid ) ] )  , (double)3.0 ) )  )  ) ;
	y1[ (  ( 54 * __DATA_NUM )  + __tid ) ] =  ( y1[ (  ( 37 * __DATA_NUM )  + __tid ) ] *  ( x1[ (  ( 10 * __DATA_NUM )  + __tid ) ] - x1[ (  ( 8 * __DATA_NUM )  + __tid ) ] )  ) ;
	y1[ (  ( 55 * __DATA_NUM )  + __tid ) ] =  ( x1[ (  ( 4 * __DATA_NUM )  + __tid ) ] * x1[ (  ( 5 * __DATA_NUM )  + __tid ) ] * y1[ (  ( 9 * __DATA_NUM )  + __tid ) ] * y1[ (  ( 40 * __DATA_NUM )  + __tid ) ] ) ;
	y1[ (  ( 56 * __DATA_NUM )  + __tid ) ] =  (  ( (double)1.0 - y1[ (  ( 8 * __DATA_NUM )  + __tid ) ] )  / y1[ (  ( 28 * __DATA_NUM )  + __tid ) ] ) ;
	y1[ (  ( 57 * __DATA_NUM )  + __tid ) ] =  ( (double)1.0 /  (  ( (double)1.0 +  ( (double)0.1245 * exp( ( (double)-0.1 *  (  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] * z[2] )  /  ( z[0] * z[1] )  )  )  ) )  )  +  ( (double)0.0365 * y1[ (  ( 18 * __DATA_NUM )  + __tid ) ] * exp( ( -  (  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] * z[2] )  /  ( z[0] * z[1] )  )  )  ) )  )  ) ;
	y1[ (  ( 58 * __DATA_NUM )  + __tid ) ] =  ( y1[ (  ( 46 * __DATA_NUM )  + __tid ) ] + y1[ (  ( 53 * __DATA_NUM )  + __tid ) ] ) ;
	y1[ (  ( 59 * __DATA_NUM )  + __tid ) ] =  ( y1[ (  ( 25 * __DATA_NUM )  + __tid ) ] + y1[ (  ( 26 * __DATA_NUM )  + __tid ) ] + y1[ (  ( 55 * __DATA_NUM )  + __tid ) ] ) ;
	y1[ (  ( 60 * __DATA_NUM )  + __tid ) ] =  ( z[27] * y1[ (  ( 57 * __DATA_NUM )  + __tid ) ] *  ( (double)1.0 /  ( (double)1.0 + pow( ( z[28] / x1[ (  ( 7 * __DATA_NUM )  + __tid ) ] )  , (double)1.5 ) )  )  *  ( z[17] /  ( z[17] + z[29] )  )  ) ;
	y1[ (  ( 61 * __DATA_NUM )  + __tid ) ] =  ( y1[ (  ( 51 * __DATA_NUM )  + __tid ) ] * y1[ (  ( 44 * __DATA_NUM )  + __tid ) ] *  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] - y1[ (  ( 13 * __DATA_NUM )  + __tid ) ] )  ) ;
	y1[ (  ( 62 * __DATA_NUM )  + __tid ) ] =  (  ( z[4] -  ( y1[ (  ( 23 * __DATA_NUM )  + __tid ) ] + y1[ (  ( 59 * __DATA_NUM )  + __tid ) ] + y1[ (  ( 43 * __DATA_NUM )  + __tid ) ] + y1[ (  ( 61 * __DATA_NUM )  + __tid ) ] + y1[ (  ( 52 * __DATA_NUM )  + __tid ) ] + y1[ (  ( 20 * __DATA_NUM )  + __tid ) ] + y1[ (  ( 16 * __DATA_NUM )  + __tid ) ] + y1[ (  ( 45 * __DATA_NUM )  + __tid ) ] + y1[ (  ( 34 * __DATA_NUM )  + __tid ) ] + y1[ (  ( 60 * __DATA_NUM )  + __tid ) ] + y1[ (  ( 58 * __DATA_NUM )  + __tid ) ] )  )  / z[3] ) ;
	y1[ (  ( 63 * __DATA_NUM )  + __tid ) ] =  (  ( x1[ (  ( 11 * __DATA_NUM )  + __tid ) ] - x1[ (  ( 10 * __DATA_NUM )  + __tid ) ] )  / z[41] ) ;
	k1[ (  ( 0 * __DATA_NUM )  + __tid ) ] = y1[ (  ( 62 * __DATA_NUM )  + __tid ) ];
	k1[ (  ( 1 * __DATA_NUM )  + __tid ) ] =  (  ( y1[ (  ( 39 * __DATA_NUM )  + __tid ) ] *  ( (double)1.0 - x1[ (  ( 1 * __DATA_NUM )  + __tid ) ] )  )  -  ( y1[ (  ( 2 * __DATA_NUM )  + __tid ) ] * x1[ (  ( 1 * __DATA_NUM )  + __tid ) ] )  ) ;
	k1[ (  ( 2 * __DATA_NUM )  + __tid ) ] =  (  ( y1[ (  ( 24 * __DATA_NUM )  + __tid ) ] *  ( (double)1.0 - x1[ (  ( 2 * __DATA_NUM )  + __tid ) ] )  )  -  ( y1[ (  ( 3 * __DATA_NUM )  + __tid ) ] * x1[ (  ( 2 * __DATA_NUM )  + __tid ) ] )  ) ;
	k1[ (  ( 3 * __DATA_NUM )  + __tid ) ] =  (  ( y1[ (  ( 49 * __DATA_NUM )  + __tid ) ] *  ( (double)1.0 - x1[ (  ( 3 * __DATA_NUM )  + __tid ) ] )  )  -  ( y1[ (  ( 4 * __DATA_NUM )  + __tid ) ] * x1[ (  ( 3 * __DATA_NUM )  + __tid ) ] )  ) ;
	k1[ (  ( 4 * __DATA_NUM )  + __tid ) ] =  (  ( y1[ (  ( 41 * __DATA_NUM )  + __tid ) ] *  ( (double)1.0 - x1[ (  ( 4 * __DATA_NUM )  + __tid ) ] )  )  -  ( y1[ (  ( 50 * __DATA_NUM )  + __tid ) ] * x1[ (  ( 4 * __DATA_NUM )  + __tid ) ] )  ) ;
	k1[ (  ( 5 * __DATA_NUM )  + __tid ) ] =  (  ( y1[ (  ( 42 * __DATA_NUM )  + __tid ) ] *  ( (double)1.0 - x1[ (  ( 5 * __DATA_NUM )  + __tid ) ] )  )  -  ( y1[ (  ( 56 * __DATA_NUM )  + __tid ) ] * x1[ (  ( 5 * __DATA_NUM )  + __tid ) ] )  ) ;
	k1[ (  ( 6 * __DATA_NUM )  + __tid ) ] =  (  ( y1[ (  ( 11 * __DATA_NUM )  + __tid ) ] *  ( (double)1.0 - x1[ (  ( 6 * __DATA_NUM )  + __tid ) ] )  )  -  ( y1[ (  ( 30 * __DATA_NUM )  + __tid ) ] * x1[ (  ( 6 * __DATA_NUM )  + __tid ) ] )  ) ;
	k1[ (  ( 7 * __DATA_NUM )  + __tid ) ] =  (  ( -  ( y1[ (  ( 23 * __DATA_NUM )  + __tid ) ] + y1[ (  ( 55 * __DATA_NUM )  + __tid ) ] + y1[ (  ( 45 * __DATA_NUM )  + __tid ) ] + y1[ (  ( 46 * __DATA_NUM )  + __tid ) ] +  ( y1[ (  ( 20 * __DATA_NUM )  + __tid ) ] * (double)3.0 )  +  ( y1[ (  ( 60 * __DATA_NUM )  + __tid ) ] * (double)3.0 )  )  )  *  ( z[48] /  ( z[49] * z[2] )  )  ) ;
	k1[ (  ( 8 * __DATA_NUM )  + __tid ) ] =  (  (  ( -  (  ( y1[ (  ( 25 * __DATA_NUM )  + __tid ) ] + y1[ (  ( 16 * __DATA_NUM )  + __tid ) ] + y1[ (  ( 34 * __DATA_NUM )  + __tid ) ] )  - y1[ (  ( 20 * __DATA_NUM )  + __tid ) ] )  )  *  ( z[48] /  ( (double)2.0 * z[49] * z[2] )  )  )  +  ( y1[ (  ( 54 * __DATA_NUM )  + __tid ) ] *  ( z[50] / z[49] )  )  +  (  ( y1[ (  ( 38 * __DATA_NUM )  + __tid ) ] - y1[ (  ( 48 * __DATA_NUM )  + __tid ) ] )  *  ( z[51] / z[49] )  )  ) ;
	k1[ (  ( 9 * __DATA_NUM )  + __tid ) ] =  (  ( -  ( y1[ (  ( 26 * __DATA_NUM )  + __tid ) ] + y1[ (  ( 43 * __DATA_NUM )  + __tid ) ] + y1[ (  ( 61 * __DATA_NUM )  + __tid ) ] + y1[ (  ( 52 * __DATA_NUM )  + __tid ) ] + y1[ (  ( 53 * __DATA_NUM )  + __tid ) ] +  ( -  ( y1[ (  ( 60 * __DATA_NUM )  + __tid ) ] * (double)2.0 )  )  )  )  *  ( z[48] /  ( z[49] * z[2] )  )  ) ;
	k1[ (  ( 10 * __DATA_NUM )  + __tid ) ] =  ( -  ( y1[ (  ( 54 * __DATA_NUM )  + __tid ) ] -  ( y1[ (  ( 63 * __DATA_NUM )  + __tid ) ] *  ( z[51] / z[50] )  )  )  ) ;
	k1[ (  ( 11 * __DATA_NUM )  + __tid ) ] =  ( -  (  ( y1[ (  ( 38 * __DATA_NUM )  + __tid ) ] + y1[ (  ( 63 * __DATA_NUM )  + __tid ) ] )  - y1[ (  ( 48 * __DATA_NUM )  + __tid ) ] )  ) ;
	x2[ (  ( 0 * __DATA_NUM )  + __tid ) ] =  ( x1[ (  ( 0 * __DATA_NUM )  + __tid ) ] +  ( k1[ (  ( 0 * __DATA_NUM )  + __tid ) ] * d )  ) ;
	x2[ (  ( 1 * __DATA_NUM )  + __tid ) ] =  ( x1[ (  ( 1 * __DATA_NUM )  + __tid ) ] +  ( k1[ (  ( 1 * __DATA_NUM )  + __tid ) ] * d )  ) ;
	x2[ (  ( 2 * __DATA_NUM )  + __tid ) ] =  ( x1[ (  ( 2 * __DATA_NUM )  + __tid ) ] +  ( k1[ (  ( 2 * __DATA_NUM )  + __tid ) ] * d )  ) ;
	x2[ (  ( 3 * __DATA_NUM )  + __tid ) ] =  ( x1[ (  ( 3 * __DATA_NUM )  + __tid ) ] +  ( k1[ (  ( 3 * __DATA_NUM )  + __tid ) ] * d )  ) ;
	x2[ (  ( 4 * __DATA_NUM )  + __tid ) ] =  ( x1[ (  ( 4 * __DATA_NUM )  + __tid ) ] +  ( k1[ (  ( 4 * __DATA_NUM )  + __tid ) ] * d )  ) ;
	x2[ (  ( 5 * __DATA_NUM )  + __tid ) ] =  ( x1[ (  ( 5 * __DATA_NUM )  + __tid ) ] +  ( k1[ (  ( 5 * __DATA_NUM )  + __tid ) ] * d )  ) ;
	x2[ (  ( 6 * __DATA_NUM )  + __tid ) ] =  ( x1[ (  ( 6 * __DATA_NUM )  + __tid ) ] +  ( k1[ (  ( 6 * __DATA_NUM )  + __tid ) ] * d )  ) ;
	x2[ (  ( 7 * __DATA_NUM )  + __tid ) ] =  ( x1[ (  ( 7 * __DATA_NUM )  + __tid ) ] +  ( k1[ (  ( 7 * __DATA_NUM )  + __tid ) ] * d )  ) ;
	x2[ (  ( 8 * __DATA_NUM )  + __tid ) ] =  ( x1[ (  ( 8 * __DATA_NUM )  + __tid ) ] +  ( k1[ (  ( 8 * __DATA_NUM )  + __tid ) ] * d )  ) ;
	x2[ (  ( 9 * __DATA_NUM )  + __tid ) ] =  ( x1[ (  ( 9 * __DATA_NUM )  + __tid ) ] +  ( k1[ (  ( 9 * __DATA_NUM )  + __tid ) ] * d )  ) ;
	x2[ (  ( 10 * __DATA_NUM )  + __tid ) ] =  ( x1[ (  ( 10 * __DATA_NUM )  + __tid ) ] +  ( k1[ (  ( 10 * __DATA_NUM )  + __tid ) ] * d )  ) ;
	x2[ (  ( 11 * __DATA_NUM )  + __tid ) ] =  ( x1[ (  ( 11 * __DATA_NUM )  + __tid ) ] +  ( k1[ (  ( 11 * __DATA_NUM )  + __tid ) ] * d )  ) ;
	xo[ (  ( 0 * __DATA_NUM )  + __tid ) ] = x2[ (  ( 0 * __DATA_NUM )  + __tid ) ];
	xo[ (  ( 1 * __DATA_NUM )  + __tid ) ] = x2[ (  ( 1 * __DATA_NUM )  + __tid ) ];
	xo[ (  ( 2 * __DATA_NUM )  + __tid ) ] = x2[ (  ( 2 * __DATA_NUM )  + __tid ) ];
	xo[ (  ( 3 * __DATA_NUM )  + __tid ) ] = x2[ (  ( 3 * __DATA_NUM )  + __tid ) ];
	xo[ (  ( 4 * __DATA_NUM )  + __tid ) ] = x2[ (  ( 4 * __DATA_NUM )  + __tid ) ];
	xo[ (  ( 5 * __DATA_NUM )  + __tid ) ] = x2[ (  ( 5 * __DATA_NUM )  + __tid ) ];
	xo[ (  ( 6 * __DATA_NUM )  + __tid ) ] = x2[ (  ( 6 * __DATA_NUM )  + __tid ) ];
	xo[ (  ( 7 * __DATA_NUM )  + __tid ) ] = x2[ (  ( 7 * __DATA_NUM )  + __tid ) ];
	xo[ (  ( 8 * __DATA_NUM )  + __tid ) ] = x2[ (  ( 8 * __DATA_NUM )  + __tid ) ];
	xo[ (  ( 9 * __DATA_NUM )  + __tid ) ] = x2[ (  ( 9 * __DATA_NUM )  + __tid ) ];
	xo[ (  ( 10 * __DATA_NUM )  + __tid ) ] = x2[ (  ( 10 * __DATA_NUM )  + __tid ) ];
	xo[ (  ( 11 * __DATA_NUM )  + __tid ) ] = x2[ (  ( 11 * __DATA_NUM )  + __tid ) ];
	xi[ (  ( 0 * __DATA_NUM )  + __tid ) ] = xo[ (  ( 0 * __DATA_NUM )  + __tid ) ];
	xi[ (  ( 1 * __DATA_NUM )  + __tid ) ] = xo[ (  ( 1 * __DATA_NUM )  + __tid ) ];
	xi[ (  ( 2 * __DATA_NUM )  + __tid ) ] = xo[ (  ( 2 * __DATA_NUM )  + __tid ) ];
	xi[ (  ( 3 * __DATA_NUM )  + __tid ) ] = xo[ (  ( 3 * __DATA_NUM )  + __tid ) ];
	xi[ (  ( 4 * __DATA_NUM )  + __tid ) ] = xo[ (  ( 4 * __DATA_NUM )  + __tid ) ];
	xi[ (  ( 5 * __DATA_NUM )  + __tid ) ] = xo[ (  ( 5 * __DATA_NUM )  + __tid ) ];
	xi[ (  ( 6 * __DATA_NUM )  + __tid ) ] = xo[ (  ( 6 * __DATA_NUM )  + __tid ) ];
	xi[ (  ( 7 * __DATA_NUM )  + __tid ) ] = xo[ (  ( 7 * __DATA_NUM )  + __tid ) ];
	xi[ (  ( 8 * __DATA_NUM )  + __tid ) ] = xo[ (  ( 8 * __DATA_NUM )  + __tid ) ];
	xi[ (  ( 9 * __DATA_NUM )  + __tid ) ] = xo[ (  ( 9 * __DATA_NUM )  + __tid ) ];
	xi[ (  ( 10 * __DATA_NUM )  + __tid ) ] = xo[ (  ( 10 * __DATA_NUM )  + __tid ) ];
	xi[ (  ( 11 * __DATA_NUM )  + __tid ) ] = xo[ (  ( 11 * __DATA_NUM )  + __tid ) ];
}



