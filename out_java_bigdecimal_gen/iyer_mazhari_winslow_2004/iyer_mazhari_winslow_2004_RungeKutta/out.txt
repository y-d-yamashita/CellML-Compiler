import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;


public final class JavaBigDecimalProgram{
public static void main ( String args[] ) {

	int __i;
	BigDecimal xi[];
	BigDecimal xo[];
	BigDecimal x1[];
	BigDecimal x2[];
	BigDecimal x3[];
	BigDecimal x4[];
	BigDecimal x5[];
	BigDecimal k1[];
	BigDecimal k2[];
	BigDecimal k3[];
	BigDecimal k4[];
	BigDecimal y1[];
	BigDecimal y2[];
	BigDecimal y3[];
	BigDecimal y4[];
	BigDecimal z[];
	BigDecimal t;
	BigDecimal d = new BigDecimal( 0.010000);
	int __DATA_NUM = 32;
	int __SCALE = 80;

	xi = new BigDecimal[ ( 67 * __DATA_NUM ) ];
	xo = new BigDecimal[ ( 67 * __DATA_NUM ) ];
	x1 = new BigDecimal[ ( 67 * __DATA_NUM ) ];
	x2 = new BigDecimal[ ( 67 * __DATA_NUM ) ];
	x3 = new BigDecimal[ ( 67 * __DATA_NUM ) ];
	x4 = new BigDecimal[ ( 67 * __DATA_NUM ) ];
	x5 = new BigDecimal[ ( 67 * __DATA_NUM ) ];
	y1 = new BigDecimal[ ( 312 * __DATA_NUM ) ];
	y2 = new BigDecimal[ ( 312 * __DATA_NUM ) ];
	y3 = new BigDecimal[ ( 312 * __DATA_NUM ) ];
	y4 = new BigDecimal[ ( 312 * __DATA_NUM ) ];
	k1 = new BigDecimal[ ( 67 * __DATA_NUM ) ];
	k2 = new BigDecimal[ ( 67 * __DATA_NUM ) ];
	k3 = new BigDecimal[ ( 67 * __DATA_NUM ) ];
	k4 = new BigDecimal[ ( 67 * __DATA_NUM ) ];
	z = new BigDecimal[115];
	for(t = new BigDecimal(0.000000); ( t.compareTo(new BigDecimal(400.000000))<=0) ;t =  ( t .add( d) ) ){

		for(__i = 0; ( __i < __DATA_NUM ) ;__i++){

			x1[ (  ( 0 * __DATA_NUM )  + __i ) ] = xi[ (  ( 0 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 1 * __DATA_NUM )  + __i ) ] = xi[ (  ( 1 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 2 * __DATA_NUM )  + __i ) ] = xi[ (  ( 2 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 3 * __DATA_NUM )  + __i ) ] = xi[ (  ( 3 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 4 * __DATA_NUM )  + __i ) ] = xi[ (  ( 4 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 5 * __DATA_NUM )  + __i ) ] = xi[ (  ( 5 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 6 * __DATA_NUM )  + __i ) ] = xi[ (  ( 6 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 7 * __DATA_NUM )  + __i ) ] = xi[ (  ( 7 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 8 * __DATA_NUM )  + __i ) ] = xi[ (  ( 8 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 9 * __DATA_NUM )  + __i ) ] = xi[ (  ( 9 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 10 * __DATA_NUM )  + __i ) ] = xi[ (  ( 10 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 11 * __DATA_NUM )  + __i ) ] = xi[ (  ( 11 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 12 * __DATA_NUM )  + __i ) ] = xi[ (  ( 12 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 13 * __DATA_NUM )  + __i ) ] = xi[ (  ( 13 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 14 * __DATA_NUM )  + __i ) ] = xi[ (  ( 14 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 15 * __DATA_NUM )  + __i ) ] = xi[ (  ( 15 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 16 * __DATA_NUM )  + __i ) ] = xi[ (  ( 16 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 17 * __DATA_NUM )  + __i ) ] = xi[ (  ( 17 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 18 * __DATA_NUM )  + __i ) ] = xi[ (  ( 18 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 19 * __DATA_NUM )  + __i ) ] = xi[ (  ( 19 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 20 * __DATA_NUM )  + __i ) ] = xi[ (  ( 20 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 21 * __DATA_NUM )  + __i ) ] = xi[ (  ( 21 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 22 * __DATA_NUM )  + __i ) ] = xi[ (  ( 22 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 23 * __DATA_NUM )  + __i ) ] = xi[ (  ( 23 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 24 * __DATA_NUM )  + __i ) ] = xi[ (  ( 24 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 25 * __DATA_NUM )  + __i ) ] = xi[ (  ( 25 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 26 * __DATA_NUM )  + __i ) ] = xi[ (  ( 26 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 27 * __DATA_NUM )  + __i ) ] = xi[ (  ( 27 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 28 * __DATA_NUM )  + __i ) ] = xi[ (  ( 28 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 29 * __DATA_NUM )  + __i ) ] = xi[ (  ( 29 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 30 * __DATA_NUM )  + __i ) ] = xi[ (  ( 30 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 31 * __DATA_NUM )  + __i ) ] = xi[ (  ( 31 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 32 * __DATA_NUM )  + __i ) ] = xi[ (  ( 32 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 33 * __DATA_NUM )  + __i ) ] = xi[ (  ( 33 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 34 * __DATA_NUM )  + __i ) ] = xi[ (  ( 34 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 35 * __DATA_NUM )  + __i ) ] = xi[ (  ( 35 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 36 * __DATA_NUM )  + __i ) ] = xi[ (  ( 36 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 37 * __DATA_NUM )  + __i ) ] = xi[ (  ( 37 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 38 * __DATA_NUM )  + __i ) ] = xi[ (  ( 38 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 39 * __DATA_NUM )  + __i ) ] = xi[ (  ( 39 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 40 * __DATA_NUM )  + __i ) ] = xi[ (  ( 40 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 41 * __DATA_NUM )  + __i ) ] = xi[ (  ( 41 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 42 * __DATA_NUM )  + __i ) ] = xi[ (  ( 42 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 43 * __DATA_NUM )  + __i ) ] = xi[ (  ( 43 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 44 * __DATA_NUM )  + __i ) ] = xi[ (  ( 44 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 45 * __DATA_NUM )  + __i ) ] = xi[ (  ( 45 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 46 * __DATA_NUM )  + __i ) ] = xi[ (  ( 46 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 47 * __DATA_NUM )  + __i ) ] = xi[ (  ( 47 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 48 * __DATA_NUM )  + __i ) ] = xi[ (  ( 48 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 49 * __DATA_NUM )  + __i ) ] = xi[ (  ( 49 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 50 * __DATA_NUM )  + __i ) ] = xi[ (  ( 50 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 51 * __DATA_NUM )  + __i ) ] = xi[ (  ( 51 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 52 * __DATA_NUM )  + __i ) ] = xi[ (  ( 52 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 53 * __DATA_NUM )  + __i ) ] = xi[ (  ( 53 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 54 * __DATA_NUM )  + __i ) ] = xi[ (  ( 54 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 55 * __DATA_NUM )  + __i ) ] = xi[ (  ( 55 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 56 * __DATA_NUM )  + __i ) ] = xi[ (  ( 56 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 57 * __DATA_NUM )  + __i ) ] = xi[ (  ( 57 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 58 * __DATA_NUM )  + __i ) ] = xi[ (  ( 58 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 59 * __DATA_NUM )  + __i ) ] = xi[ (  ( 59 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 60 * __DATA_NUM )  + __i ) ] = xi[ (  ( 60 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 61 * __DATA_NUM )  + __i ) ] = xi[ (  ( 61 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 62 * __DATA_NUM )  + __i ) ] = xi[ (  ( 62 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 63 * __DATA_NUM )  + __i ) ] = xi[ (  ( 63 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 64 * __DATA_NUM )  + __i ) ] = xi[ (  ( 64 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 65 * __DATA_NUM )  + __i ) ] = xi[ (  ( 65 * __DATA_NUM )  + __i ) ];
			x1[ (  ( 66 * __DATA_NUM )  + __i ) ] = xi[ (  ( 66 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 0 * __DATA_NUM )  + __i ) ] =    ( z[2].multiply(z[1], MathContext.DECIMAL128) ) .divide(z[0] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 1 * __DATA_NUM )  + __i ) ] =  ( ((  t.divide(z[11] ,128,BigDecimal.ROUND_HALF_UP) ).setScale(0,RoundingMode.FLOOR)).multiply(z[11], MathContext.DECIMAL128) ) ;
			y1[ (  ( 2 * __DATA_NUM )  + __i ) ] = (  x1[ (  ( 2 * __DATA_NUM )  + __i ) ].divide(z[15] ,128,BigDecimal.ROUND_HALF_UP) .pow(z[16] ));
			y1[ (  ( 3 * __DATA_NUM )  + __i ) ] =  ( z[22].multiply( ( x1[ (  ( 12 * __DATA_NUM )  + __i ) ] .add( x1[ (  ( 10 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128).multiply( ( x1[ (  ( 4 * __DATA_NUM )  + __i ) ].subtract(x1[ (  ( 3 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y1[ (  ( 4 * __DATA_NUM )  + __i ) ] =    ( x1[ (  ( 3 * __DATA_NUM )  + __i ) ].subtract(x1[ (  ( 2 * __DATA_NUM )  + __i ) ])) .divide(z[24] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 5 * __DATA_NUM )  + __i ) ] =  (  ( z[27].multiply(x1[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( new BigDecimal(1).subtract(x1[ (  ( 8 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( z[28].multiply(x1[ (  ( 8 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			y1[ (  ( 6 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add(   ( z[31].multiply(z[34], MathContext.DECIMAL128) ) .divide(( ( x1[ (  ( 3 * __DATA_NUM )  + __i ) ] .add( z[34]) ) .pow(2 )) ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( z[33].multiply(z[36], MathContext.DECIMAL128) ) .divide(( ( x1[ (  ( 3 * __DATA_NUM )  + __i ) ] .add( z[36]) ) .pow(2 )) ,128,BigDecimal.ROUND_HALF_UP) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 7 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add(   ( z[31].multiply(z[34], MathContext.DECIMAL128) ) .divide(( ( x1[ (  ( 2 * __DATA_NUM )  + __i ) ] .add( z[34]) ) .pow(2 )) ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( z[33].multiply(z[36], MathContext.DECIMAL128) ) .divide(( ( x1[ (  ( 2 * __DATA_NUM )  + __i ) ] .add( z[36]) ) .pow(2 )) ,128,BigDecimal.ROUND_HALF_UP) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 8 * __DATA_NUM )  + __i ) ] =  (  ( z[39].multiply(( ( x1[ (  ( 3 * __DATA_NUM )  + __i ) ].multiply(new BigDecimal(1000), MathContext.DECIMAL128) ) .pow(z[44] )), MathContext.DECIMAL128).multiply(x1[ (  ( 12 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( z[40].multiply(x1[ (  ( 10 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			y1[ (  ( 9 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(new BigDecimal(1.2), MathContext.DECIMAL128).multiply(new BigDecimal(0.416), MathContext.DECIMAL128).multiply(exp( ( new BigDecimal(0.012).multiply( ( x1[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(new BigDecimal(35))) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 10 * __DATA_NUM )  + __i ) ] =  ( z[48].multiply(y1[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 11 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.6).multiply(new BigDecimal(0.09233), MathContext.DECIMAL128).multiply(x1[ (  ( 3 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 12 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y1[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 13 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y1[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 14 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y1[ (  ( 10 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 15 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y1[ (  ( 10 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 16 * __DATA_NUM )  + __i ) ] = y1[ (  ( 11 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 17 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 12 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 16 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 13 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 18 * __DATA_NUM )  + __i ) ] = new BigDecimal(0.82);
			y1[ (  ( 19 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (   new BigDecimal(0.00336336209452).divide( ( new BigDecimal(0.5).add(exp(  x1[ (  ( 6 * __DATA_NUM )  + __i ) ].divide( (new BigDecimal(-5.53899874036055))  ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) .add( ( new BigDecimal(0.00779046570737).multiply(exp(  x1[ (  ( 6 * __DATA_NUM )  + __i ) ].divide( (new BigDecimal(-49.51039631160386))  ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 20 * __DATA_NUM )  + __i ) ] =  ( z[51].multiply(exp( ( (z[52]).negate() .multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 21 * __DATA_NUM )  + __i ) ] =  ( z[55].multiply(exp( ( z[56].multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 22 * __DATA_NUM )  + __i ) ] = y1[ (  ( 20 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 23 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y1[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 24 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 20 * __DATA_NUM )  + __i ) ].divide(z[57] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 25 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(3).multiply(z[58], MathContext.DECIMAL128).multiply(y1[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[59] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 26 * __DATA_NUM )  + __i ) ] = y1[ (  ( 21 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 27 * __DATA_NUM )  + __i ) ] =  ( z[58].multiply(y1[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 28 * __DATA_NUM )  + __i ) ] =  ( z[60].multiply(y1[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 29 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 26 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 25 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 24 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 31 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 30 * __DATA_NUM )  + __i ) ] =  ( z[73].multiply(exp( ( z[74].multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 31 * __DATA_NUM )  + __i ) ] = z[77];
			y1[ (  ( 32 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y1[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 33 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y1[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 34 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(z[69], MathContext.DECIMAL128).multiply(y1[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 35 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(2).multiply(z[71], MathContext.DECIMAL128).multiply(y1[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[70] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 36 * __DATA_NUM )  + __i ) ] = y1[ (  ( 31 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 37 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 31 * __DATA_NUM )  + __i ) ].divide(z[70] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 38 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 31 * __DATA_NUM )  + __i ) ].divide(z[72] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 39 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 36 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 34 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 40 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 40 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 0 * __DATA_NUM )  + __i ) ].multiply(ln(   z[9].divide(x1[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 41 * __DATA_NUM )  + __i ) ] =  ( z[8].add( ( new BigDecimal(0.01833).multiply(z[9], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 42 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.5).multiply(y1[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(ln(   z[10].divide(x1[ (  ( 2 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 43 * __DATA_NUM )  + __i ) ] =  ( z[85].multiply(z[84], MathContext.DECIMAL128).multiply(new BigDecimal(0.1), MathContext.DECIMAL128) ) ;
			y1[ (  ( 44 * __DATA_NUM )  + __i ) ] = sqrt(   z[8].divide(new BigDecimal(4) ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE);
			y1[ (  ( 45 * __DATA_NUM )  + __i ) ] =   x1[ (  ( 6 * __DATA_NUM )  + __i ) ].divide(y1[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 46 * __DATA_NUM )  + __i ) ] =  (  ( x1[ (  ( 1 * __DATA_NUM )  + __i ) ].multiply(exp(y1[ (  ( 45 * __DATA_NUM )  + __i ) ],__SCALE), MathContext.DECIMAL128) ) .subtract(z[8])) ;
			y1[ (  ( 47 * __DATA_NUM )  + __i ) ] =  (  ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].multiply(exp(y1[ (  ( 45 * __DATA_NUM )  + __i ) ],__SCALE), MathContext.DECIMAL128) ) .subtract(z[9])) ;
			y1[ (  ( 48 * __DATA_NUM )  + __i ) ] =  ( z[83].multiply( ( x1[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 40 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y1[ (  ( 49 * __DATA_NUM )  + __i ) ] =    ( z[94].multiply(x1[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide( ( z[95] .add( x1[ (  ( 2 * __DATA_NUM )  + __i ) ]) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 50 * __DATA_NUM )  + __i ) ] =    ( exp(  z[9].divide(new BigDecimal(67.3) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE).subtract(new BigDecimal(1))) .divide(new BigDecimal(7) ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 51 * __DATA_NUM )  + __i ) ] =   z[8].divide( ( z[8] .add( z[93]) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 52 * __DATA_NUM )  + __i ) ] =  ( z[88] .add( z[10]) ) ;
			y1[ (  ( 53 * __DATA_NUM )  + __i ) ] =  ( z[98].multiply((double)4.574E-7, MathContext.DECIMAL128) ) ;
			y1[ (  ( 54 * __DATA_NUM )  + __i ) ] =   x1[ (  ( 6 * __DATA_NUM )  + __i ) ].divide(y1[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 55 * __DATA_NUM )  + __i ) ] =  (  ( (double)1.0E-3.multiply(exp( ( new BigDecimal(2).multiply(y1[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .subtract( ( z[10].multiply(new BigDecimal(0.341), MathContext.DECIMAL128) ) )) ;
			y1[ (  ( 56 * __DATA_NUM )  + __i ) ] =  (  ( x1[ (  ( 1 * __DATA_NUM )  + __i ) ].multiply(exp(y1[ (  ( 54 * __DATA_NUM )  + __i ) ],__SCALE), MathContext.DECIMAL128) ) .subtract(z[8])) ;
			y1[ (  ( 57 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide(y1[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 58 * __DATA_NUM )  + __i ) ] =  ( z[2].multiply(z[99], MathContext.DECIMAL128) ) ;
			y1[ (  ( 59 * __DATA_NUM )  + __i ) ] = new BigDecimal(1.38862291252871);
			y1[ (  ( 60 * __DATA_NUM )  + __i ) ] = new BigDecimal(1.40042625477401);
			y1[ (  ( 61 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(new BigDecimal(0.02608362043337), MathContext.DECIMAL128) ) ;
			y1[ (  ( 62 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[101], MathContext.DECIMAL128).multiply(exp( ( z[102].multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 63 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[105], MathContext.DECIMAL128).multiply(exp( ( z[106].multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 64 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[109], MathContext.DECIMAL128).multiply(exp( ( z[110].multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 65 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[113], MathContext.DECIMAL128).multiply(exp( ( z[114].multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 66 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 65 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 64 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 61 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 67 * __DATA_NUM )  + __i ) ] = new BigDecimal(0.00795600798004);
			y1[ (  ( 68 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.00767254363063).multiply(exp( ( new BigDecimal(0.08662945914655).multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 69 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.00379737998368).multiply(exp( (  (new BigDecimal(-0.01425668126881)) .multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 70 * __DATA_NUM )  + __i ) ] =  ( z[3].multiply((double)1.0E-3, MathContext.DECIMAL128) ) ;
			y1[ (  ( 71 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 70 * __DATA_NUM )  + __i ) ].divide( ( new BigDecimal(2).multiply(z[7], MathContext.DECIMAL128).multiply(z[0], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 72 * __DATA_NUM )  + __i ) ] =  (  (  (  ( t.subtract(y1[ (  ( 1 * __DATA_NUM )  + __i ) ]))  .compareTo(z[14])>=0)  &&  (  ( t.subtract(y1[ (  ( 1 * __DATA_NUM )  + __i ) ])) .compareTo( ( z[14] .add( z[12]) ) )<=0)  )  ? z[13] : new BigDecimal(0) ) ;
			y1[ (  ( 73 * __DATA_NUM )  + __i ) ] =    ( x1[ (  ( 5 * __DATA_NUM )  + __i ) ].subtract(x1[ (  ( 4 * __DATA_NUM )  + __i ) ])) .divide(z[23] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 74 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add(   ( z[32].multiply(z[35], MathContext.DECIMAL128) ) .divide(( ( x1[ (  ( 4 * __DATA_NUM )  + __i ) ] .add( z[35]) ) .pow(2 )) ,128,BigDecimal.ROUND_HALF_UP) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 75 * __DATA_NUM )  + __i ) ] =  (  ( z[41].multiply(x1[ (  ( 12 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( z[42].multiply(x1[ (  ( 11 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			y1[ (  ( 76 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(new BigDecimal(0.45), MathContext.DECIMAL128).multiply(new BigDecimal(0.049), MathContext.DECIMAL128).multiply(exp( (  (new BigDecimal(-0.065)) .multiply( ( x1[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(new BigDecimal(22))) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 77 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.25).multiply(new BigDecimal(0.01), MathContext.DECIMAL128) ) ;
			y1[ (  ( 78 * __DATA_NUM )  + __i ) ] = y1[ (  ( 9 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 79 * __DATA_NUM )  + __i ) ] = y1[ (  ( 10 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 80 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y1[ (  ( 76 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 81 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y1[ (  ( 76 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 82 * __DATA_NUM )  + __i ) ] =  ( z[48].multiply(y1[ (  ( 16 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 83 * __DATA_NUM )  + __i ) ] = y1[ (  ( 77 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 84 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 14 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 83 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 19 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 85 * __DATA_NUM )  + __i ) ] =  (  (   y1[ (  ( 18 * __DATA_NUM )  + __i ) ].divide( ( new BigDecimal(1).add(exp(   ( x1[ (  ( 6 * __DATA_NUM )  + __i ) ].add(new BigDecimal(28.5)) ) .divide(new BigDecimal(7.8) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) .add(new BigDecimal(1)) ) .subtract(y1[ (  ( 18 * __DATA_NUM )  + __i ) ])) ;
			y1[ (  ( 86 * __DATA_NUM )  + __i ) ] =  ( z[53].multiply(exp( ( (z[54]).negate() .multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 87 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y1[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 88 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(2).multiply(z[57], MathContext.DECIMAL128).multiply(y1[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[58] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 89 * __DATA_NUM )  + __i ) ] =  ( z[57].multiply(y1[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 90 * __DATA_NUM )  + __i ) ] = y1[ (  ( 86 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 91 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 86 * __DATA_NUM )  + __i ) ].divide(z[62] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 92 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 86 * __DATA_NUM )  + __i ) ].divide(z[64] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 93 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 22 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 26 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 90 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 94 * __DATA_NUM )  + __i ) ] =  ( z[75].multiply(exp( ( (z[76]).negate() .multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 95 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y1[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 96 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(3).multiply(z[70], MathContext.DECIMAL128).multiply(y1[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[69] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 97 * __DATA_NUM )  + __i ) ] = y1[ (  ( 94 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 98 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y1[ (  ( 94 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 99 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 94 * __DATA_NUM )  + __i ) ].divide(z[65] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 100 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(3).multiply(z[66], MathContext.DECIMAL128).multiply(y1[ (  ( 94 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[67] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 101 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 31 * __DATA_NUM )  + __i ) ].divide(z[69] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 102 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 97 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 36 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 36 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 40 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 103 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 98 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 38 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 37 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 42 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 95 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 36 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 104 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 96 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 101 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 99 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 41 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 105 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 0 * __DATA_NUM )  + __i ) ].multiply(ln(   z[8].divide(x1[ (  ( 1 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 106 * __DATA_NUM )  + __i ) ] =  (  ( new BigDecimal(1).subtract(z[85])) .multiply(z[84], MathContext.DECIMAL128).multiply((double)4.2986E-7, MathContext.DECIMAL128) ) ;
			y1[ (  ( 107 * __DATA_NUM )  + __i ) ] =  ( z[79].multiply(y1[ (  ( 44 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x1[ (  ( 61 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x1[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 105 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y1[ (  ( 108 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 43 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 29 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x1[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 105 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y1[ (  ( 109 * __DATA_NUM )  + __i ) ] =  ( exp(y1[ (  ( 45 * __DATA_NUM )  + __i ) ],__SCALE).subtract(new BigDecimal(1))) ;
			y1[ (  ( 110 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(0.94).add(exp( (   new BigDecimal(1.26).divide(y1[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( x1[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 105 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 111 * __DATA_NUM )  + __i ) ] =  ( z[96].multiply( ( x1[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 42 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y1[ (  ( 112 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(1).add((  z[92].divide(x1[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .pow(1.5 ))) ) ;
			y1[ (  ( 113 * __DATA_NUM )  + __i ) ] =    ( (z[87].pow(3 )).add((z[9].pow(3 ))) ) .divide(new BigDecimal(5000) ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 114 * __DATA_NUM )  + __i ) ] =  ( z[98].multiply((double)2.469E-4, MathContext.DECIMAL128) ) ;
			y1[ (  ( 115 * __DATA_NUM )  + __i ) ] =  ( exp( ( new BigDecimal(2).multiply(y1[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE).subtract(new BigDecimal(1))) ;
			y1[ (  ( 116 * __DATA_NUM )  + __i ) ] =  ( exp(y1[ (  ( 54 * __DATA_NUM )  + __i ) ],__SCALE).subtract(new BigDecimal(1))) ;
			y1[ (  ( 117 * __DATA_NUM )  + __i ) ] =    ( (double)1.381E-23.multiply(z[99], MathContext.DECIMAL128) ) .divide((double)6.626E-31 ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 118 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-85800.3675578326)) .divide(y1[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(70.078).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 119 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-287913.446530953)) .divide(y1[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(786.217).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 120 * __DATA_NUM )  + __i ) ] = y1[ (  ( 118 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 121 * __DATA_NUM )  + __i ) ] = y1[ (  ( 119 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 122 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(new BigDecimal(0.14832978132145), MathContext.DECIMAL128) ) ;
			y1[ (  ( 123 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[107], MathContext.DECIMAL128).multiply(exp( ( z[108].multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 124 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 62 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 58 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 122 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 125 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 65 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 63 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 122 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 126 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 123 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 64 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 61 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 127 * __DATA_NUM )  + __i ) ] = new BigDecimal(0.03966720676071);
			y1[ (  ( 128 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.2162557589585).multiply(exp( (  (new BigDecimal(-0.00001889123021)) .multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 129 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 70 * __DATA_NUM )  + __i ) ].divide( ( z[4].multiply(z[0], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 130 * __DATA_NUM )  + __i ) ] = (  x1[ (  ( 5 * __DATA_NUM )  + __i ) ].divide(z[17] ,128,BigDecimal.ROUND_HALF_UP) .pow(z[18] ));
			y1[ (  ( 131 * __DATA_NUM )  + __i ) ] =  (  ( z[29].multiply(x1[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( new BigDecimal(1).subtract(x1[ (  ( 7 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( z[30].multiply(x1[ (  ( 7 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			y1[ (  ( 132 * __DATA_NUM )  + __i ) ] =  (  ( (z[37]).negate() .multiply(( ( x1[ (  ( 3 * __DATA_NUM )  + __i ) ].multiply(new BigDecimal(1000), MathContext.DECIMAL128) ) .pow(z[43] )), MathContext.DECIMAL128).multiply(x1[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( z[38].multiply(x1[ (  ( 12 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 133 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 76 * __DATA_NUM )  + __i ) ].divide(z[47] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 134 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y1[ (  ( 10 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 135 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y1[ (  ( 76 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 136 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y1[ (  ( 133 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 137 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y1[ (  ( 133 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 138 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 83 * __DATA_NUM )  + __i ) ].divide(z[47] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 139 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 12 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 13 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 80 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 15 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 138 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 140 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 14 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 19 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 136 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 82 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 14 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 141 * __DATA_NUM )  + __i ) ] =  ( z[49].multiply(exp( ( z[50].multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 142 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y1[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 143 * __DATA_NUM )  + __i ) ] = y1[ (  ( 141 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 144 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(3).multiply(z[62], MathContext.DECIMAL128).multiply(y1[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[61] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 145 * __DATA_NUM )  + __i ) ] =    ( z[64].multiply(y1[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[63] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 146 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(4).multiply(z[59], MathContext.DECIMAL128).multiply(y1[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[60] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 147 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 86 * __DATA_NUM )  + __i ) ].divide(z[61] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 148 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 142 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 22 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 89 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 26 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 149 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 23 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 28 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 91 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 32 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 142 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 26 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 150 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 143 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 28 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 92 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 34 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 151 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 144 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 147 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 24 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 31 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 152 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 25 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 33 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 27 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 27 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 144 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 31 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 153 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 92 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 146 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 34 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 154 * __DATA_NUM )  + __i ) ] = z[78];
			y1[ (  ( 155 * __DATA_NUM )  + __i ) ] =    ( z[72].multiply(y1[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[71] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 156 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y1[ (  ( 94 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 157 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(4).multiply(z[67], MathContext.DECIMAL128).multiply(y1[ (  ( 94 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[68] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 158 * __DATA_NUM )  + __i ) ] =  ( z[65].multiply(y1[ (  ( 154 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 159 * __DATA_NUM )  + __i ) ] =  ( z[67].multiply(y1[ (  ( 154 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 160 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 31 * __DATA_NUM )  + __i ) ].divide(z[71] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 161 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 95 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 97 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 158 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 36 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 162 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 156 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 39 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 160 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 43 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 33 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 37 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 163 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 155 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 160 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 100 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 43 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 164 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 38 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 157 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 44 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 165 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 1 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(0.01833).multiply(x1[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 166 * __DATA_NUM )  + __i ) ] =  ( z[82].multiply( ( x1[ (  ( 50 * __DATA_NUM )  + __i ) ] .add( x1[ (  ( 51 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128).multiply( ( x1[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 40 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y1[ (  ( 167 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(1000).multiply(z[0], MathContext.DECIMAL128).multiply(y1[ (  ( 45 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 168 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.02).multiply(y1[ (  ( 106 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x1[ (  ( 39 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y1[ (  ( 167 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y1[ (  ( 47 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y1[ (  ( 109 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 169 * __DATA_NUM )  + __i ) ] =  ( z[81].multiply(sqrt(   z[8].divide(new BigDecimal(1) ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128).multiply(y1[ (  ( 110 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x1[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 105 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y1[ (  ( 170 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(1000).multiply(z[0], MathContext.DECIMAL128).multiply(y1[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 171 * __DATA_NUM )  + __i ) ] =    ( z[2].multiply(z[99], MathContext.DECIMAL128) ) .divide(z[0] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 172 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-272470.273489681)) .divide(y1[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(708.146).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   (  (new BigDecimal(-2.28528417586424)) .multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y1[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 173 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-133689.9304091)) .divide(y1[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(229.205).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   (  (new BigDecimal(-1.55804214553883)) .multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y1[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 174 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-97657.8497137015)) .divide(y1[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(1.51).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( new BigDecimal(0.0684861993100685).multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y1[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 175 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-55700.6624658307)) .divide(y1[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(   (new BigDecimal(-130.639)) .divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   (  (new BigDecimal(-3.64981672927078)) .multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y1[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 176 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-147813.990005035)) .divide(y1[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(338.915).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( new BigDecimal(2.1360043702126).multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y1[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 177 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-59565.2236284584)) .divide(y1[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(0.00711).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 178 * __DATA_NUM )  + __i ) ] = y1[ (  ( 176 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 179 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y1[ (  ( 172 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 180 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y1[ (  ( 172 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 181 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 179 * __DATA_NUM )  + __i ) ].divide(y1[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 182 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 180 * __DATA_NUM )  + __i ) ].divide(y1[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 183 * __DATA_NUM )  + __i ) ] = y1[ (  ( 177 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 184 * __DATA_NUM )  + __i ) ] = y1[ (  ( 174 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 185 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[103], MathContext.DECIMAL128).multiply(exp( ( z[104].multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 186 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 185 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 61 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 59 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 187 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.00700806628929).multiply(exp( (  (new BigDecimal(-0.14999754700285)) .multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 188 * __DATA_NUM )  + __i ) ] =    ( z[19].multiply( (  ( z[20].multiply(y1[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( z[21].multiply(y1[ (  ( 130 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) , MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1) .add( y1[ (  ( 2 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 130 * __DATA_NUM )  + __i ) ]) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 189 * __DATA_NUM )  + __i ) ] = ( ( y1[ (  ( 132 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 8 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 75 * __DATA_NUM )  + __i ) ]) ) ).negate() ;
			y1[ (  ( 190 * __DATA_NUM )  + __i ) ] = y1[ (  ( 76 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 191 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y1[ (  ( 133 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 192 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 138 * __DATA_NUM )  + __i ) ].divide(z[47] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 193 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 190 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 14 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 83 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 19 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 194 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 136 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 15 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 192 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 195 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y1[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 196 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(z[61], MathContext.DECIMAL128).multiply(y1[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 197 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y1[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 198 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 86 * __DATA_NUM )  + __i ) ].divide(z[63] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 199 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 87 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 27 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 147 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 31 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 195 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 25 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 200 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 197 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 28 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 29 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 201 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 88 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 32 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 89 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 26 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 196 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 202 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 145 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 198 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 25 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 33 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 203 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 28 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 29 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 145 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 33 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 204 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y1[ (  ( 94 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 205 * __DATA_NUM )  + __i ) ] = y1[ (  ( 154 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 206 * __DATA_NUM )  + __i ) ] =  ( z[68].multiply(y1[ (  ( 154 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 207 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 204 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 37 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 101 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 41 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 32 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 35 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 208 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 156 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 206 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 39 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 209 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 205 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 35 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 99 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 41 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 210 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 157 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 44 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 159 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 38 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 35 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 42 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 211 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 0 * __DATA_NUM )  + __i ) ].multiply(ln(   y1[ (  ( 41 * __DATA_NUM )  + __i ) ].divide(y1[ (  ( 165 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 212 * __DATA_NUM )  + __i ) ] =    ( y1[ (  ( 106 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 39 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y1[ (  ( 167 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y1[ (  ( 46 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y1[ (  ( 109 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 213 * __DATA_NUM )  + __i ) ] =   x1[ (  ( 6 * __DATA_NUM )  + __i ) ].divide(y1[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 214 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.0365).multiply(y1[ (  ( 50 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (  (new BigDecimal(-1.33)) .multiply(y1[ (  ( 213 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 215 * __DATA_NUM )  + __i ) ] =  ( exp( ( z[90].multiply(y1[ (  ( 213 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE).multiply((x1[ (  ( 0 * __DATA_NUM )  + __i ) ].pow(3 )), MathContext.DECIMAL128).multiply(z[10], MathContext.DECIMAL128) ) ;
			y1[ (  ( 216 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(1).add( ( z[89].multiply(exp( (  ( z[90].subtract(new BigDecimal(1))) .multiply(y1[ (  ( 213 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 217 * __DATA_NUM )  + __i ) ] =    ( y1[ (  ( 114 * __DATA_NUM )  + __i ) ].multiply(new BigDecimal(4), MathContext.DECIMAL128).multiply(y1[ (  ( 170 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y1[ (  ( 55 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y1[ (  ( 115 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 218 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 217 * __DATA_NUM )  + __i ) ] .compareTo(new BigDecimal(0))>=0)  ? new BigDecimal(0) : y1[ (  ( 217 * __DATA_NUM )  + __i ) ] ) ;
			y1[ (  ( 219 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-114007.462700232)) .divide(y1[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(224.114).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( new BigDecimal(0.286374268596235).multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y1[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 220 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-62123.0784380481)) .divide(y1[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(39.295).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( new BigDecimal(0.288816042743232).multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y1[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 221 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-121955.166154864)) .divide(y1[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(225.175).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 222 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y1[ (  ( 219 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 223 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y1[ (  ( 219 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 224 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 222 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 225 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 223 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 226 * __DATA_NUM )  + __i ) ] = y1[ (  ( 172 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 227 * __DATA_NUM )  + __i ) ] = y1[ (  ( 173 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 228 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 226 * __DATA_NUM )  + __i ) ].divide(y1[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 229 * __DATA_NUM )  + __i ) ] = y1[ (  ( 175 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 230 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 183 * __DATA_NUM )  + __i ) ].divide(y1[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 231 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 121 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 232 * __DATA_NUM )  + __i ) ] = y1[ (  ( 220 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 233 * __DATA_NUM )  + __i ) ] =  (  ( z[25].multiply(y1[ (  ( 131 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( z[26].multiply(y1[ (  ( 5 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 234 * __DATA_NUM )  + __i ) ] = y1[ (  ( 133 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 235 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 192 * __DATA_NUM )  + __i ) ].divide(z[47] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 236 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 13 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 15 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 81 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 17 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 235 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 22 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 237 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 234 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 16 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 13 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 238 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 191 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 79 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 235 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 22 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 239 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y1[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 240 * __DATA_NUM )  + __i ) ] =  ( z[59].multiply(y1[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 241 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 239 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 87 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 27 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 27 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 242 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 197 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 29 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 198 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 33 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 239 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 27 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 243 * __DATA_NUM )  + __i ) ] = y1[ (  ( 30 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 244 * __DATA_NUM )  + __i ) ] =  ( z[66].multiply(y1[ (  ( 154 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 245 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 33 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 204 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 244 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 37 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 246 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 243 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 38 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 38 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 44 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 247 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 100 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 43 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 244 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 37 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 96 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 41 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 248 * __DATA_NUM )  + __i ) ] =  ( z[80].multiply( ( x1[ (  ( 65 * __DATA_NUM )  + __i ) ] .add( x1[ (  ( 66 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128).multiply( ( x1[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 105 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y1[ (  ( 249 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(1).add( ( new BigDecimal(0.1245).multiply(exp( (  (new BigDecimal(-0.1)) .multiply(y1[ (  ( 213 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 250 * __DATA_NUM )  + __i ) ] =  ( exp( (  ( z[90].subtract(new BigDecimal(1))) .multiply(y1[ (  ( 213 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE).multiply((z[9].pow(3 )), MathContext.DECIMAL128).multiply(x1[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 251 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 217 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 24 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x1[ (  ( 18 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 252 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-196336.575735923)) .divide(y1[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(529.952).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( new BigDecimal(2.78084918596045).multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y1[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 253 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-121322.143275242)) .divide(y1[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(193.265).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   (  (new BigDecimal(-1.74290267020903)) .multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y1[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 254 * __DATA_NUM )  + __i ) ] = y1[ (  ( 219 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 255 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 254 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 256 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y1[ (  ( 172 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 257 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 256 * __DATA_NUM )  + __i ) ].divide(y1[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 258 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 230 * __DATA_NUM )  + __i ) ].divide(y1[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 259 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 231 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 260 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[111], MathContext.DECIMAL128).multiply(exp( ( z[112].multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 261 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 63 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 260 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 62 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 262 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y1[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 263 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 235 * __DATA_NUM )  + __i ) ].divide(z[47] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 264 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 262 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 14 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 135 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 16 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 192 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 265 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 78 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 16 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( z[46].multiply(x1[ (  ( 18 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 263 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 23 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 266 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 137 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 263 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 23 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 267 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(2).multiply(z[63], MathContext.DECIMAL128).multiply(y1[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[62] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 268 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 143 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 23 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 240 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 28 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 269 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 267 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 91 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 88 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 32 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 270 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(2).multiply(z[65], MathContext.DECIMAL128).multiply(y1[ (  ( 94 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[66] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 271 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 243 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 98 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 159 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 38 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 272 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 35 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 37 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 270 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 42 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 273 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 212 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 168 * __DATA_NUM )  + __i ) ]) ) ;
			y1[ (  ( 274 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( y1[ (  ( 249 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 214 * __DATA_NUM )  + __i ) ]) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 275 * __DATA_NUM )  + __i ) ] =    ( z[86].multiply( ( y1[ (  ( 215 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 250 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .divide( ( y1[ (  ( 52 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 216 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y1[ (  ( 113 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 276 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (   new BigDecimal(116431.142142348).divide(y1[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(   (new BigDecimal(-578.317)) .divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( new BigDecimal(0.764126011745707).multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y1[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 277 * __DATA_NUM )  + __i ) ] = y1[ (  ( 252 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 278 * __DATA_NUM )  + __i ) ] = y1[ (  ( 276 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 279 * __DATA_NUM )  + __i ) ] = y1[ (  ( 253 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 280 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 259 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 281 * __DATA_NUM )  + __i ) ] =    ( y1[ (  ( 123 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 260 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y1[ (  ( 65 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide( ( y1[ (  ( 63 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 64 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 282 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 281 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 260 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 62 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 283 * __DATA_NUM )  + __i ) ] =  ( z[48].multiply(y1[ (  ( 82 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 284 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 190 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 262 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 82 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 14 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 285 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 234 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 134 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 138 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 286 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 195 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 26 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 25 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 287 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 146 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 34 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 240 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 28 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 267 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 32 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 288 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 270 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 42 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 158 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 36 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 34 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 40 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 289 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 108 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 273 * __DATA_NUM )  + __i ) ]) ) ;
			y1[ (  ( 290 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 53 * __DATA_NUM )  + __i ) ].divide( ( new BigDecimal(1).add(  y1[ (  ( 218 * __DATA_NUM )  + __i ) ].divide(z[97] ,128,BigDecimal.ROUND_HALF_UP) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 291 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y1[ (  ( 219 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 292 * __DATA_NUM )  + __i ) ] = y1[ (  ( 221 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 293 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 280 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 294 * __DATA_NUM )  + __i ) ] =  ( z[48].multiply(y1[ (  ( 283 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 295 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 80 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 13 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 283 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 15 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 296 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 134 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 191 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 22 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 283 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 15 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 297 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 90 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 196 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 298 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 206 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 39 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 155 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 43 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 299 * __DATA_NUM )  + __i ) ] =    ( y1[ (  ( 290 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 18 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x1[ (  ( 24 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y1[ (  ( 170 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y1[ (  ( 56 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y1[ (  ( 116 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 300 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 258 * __DATA_NUM )  + __i ) ].divide(y1[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 301 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 61 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 59 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 123 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 61 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 281 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 62 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 302 * __DATA_NUM )  + __i ) ] =  ( z[48].multiply(y1[ (  ( 294 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 303 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 81 * __DATA_NUM )  + __i ) ] .add( z[45]) .add( y1[ (  ( 302 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 17 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 304 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 79 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 22 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 302 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 17 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 305 * __DATA_NUM )  + __i ) ] =    ( z[91].multiply(y1[ (  ( 274 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y1[ (  ( 51 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y1[ (  ( 112 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 306 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 300 * __DATA_NUM )  + __i ) ].divide(y1[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 307 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 166 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 251 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 299 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 107 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 248 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 169 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 275 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 305 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 289 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 49 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 111 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 48 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 72 * __DATA_NUM )  + __i ) ]) ) ;
			y1[ (  ( 308 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 15 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 137 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 23 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 294 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 16 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 309 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 291 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 310 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 135 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 78 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 294 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 16 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y1[ (  ( 311 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 32 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 205 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 35 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			k1[ (  ( 0 * __DATA_NUM )  + __i ) ] =  ( ( ( y1[ (  ( 166 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 48 * __DATA_NUM )  + __i ) ]).add( ( new BigDecimal(3).multiply( ( y1[ (  ( 275 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 305 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) .add( y1[ (  ( 168 * __DATA_NUM )  + __i ) ]) ) ).negate() .multiply(y1[ (  ( 129 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			k1[ (  ( 1 * __DATA_NUM )  + __i ) ] =  ( ( (  (  ( y1[ (  ( 107 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 248 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 169 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 299 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 72 * __DATA_NUM )  + __i ) ]) ) .subtract( ( new BigDecimal(2).multiply(y1[ (  ( 305 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ))  .add( y1[ (  ( 108 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 212 * __DATA_NUM )  + __i ) ]) ) ).negate() .multiply(y1[ (  ( 129 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			k1[ (  ( 2 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 7 * __DATA_NUM )  + __i ) ].multiply( (  (  ( y1[ (  ( 4 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 188 * __DATA_NUM )  + __i ) ])) .subtract(y1[ (  ( 233 * __DATA_NUM )  + __i ) ])) .subtract( (  (  ( y1[ (  ( 111 * __DATA_NUM )  + __i ) ].subtract( ( new BigDecimal(2).multiply(y1[ (  ( 275 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ))  .add( y1[ (  ( 49 * __DATA_NUM )  + __i ) ]) ) .multiply(new BigDecimal(0.5), MathContext.DECIMAL128).multiply(y1[ (  ( 129 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) , MathContext.DECIMAL128) ) ;
			k1[ (  ( 3 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 6 * __DATA_NUM )  + __i ) ].multiply( (  (    ( y1[ (  ( 3 * __DATA_NUM )  + __i ) ].multiply(z[5], MathContext.DECIMAL128) ) .divide(z[7] ,128,BigDecimal.ROUND_HALF_UP) .subtract(   ( y1[ (  ( 4 * __DATA_NUM )  + __i ) ].multiply(z[4], MathContext.DECIMAL128) ) .divide(z[7] ,128,BigDecimal.ROUND_HALF_UP) )) .subtract( ( y1[ (  ( 251 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 71 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) , MathContext.DECIMAL128) ) ;
			k1[ (  ( 4 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 74 * __DATA_NUM )  + __i ) ].multiply( ( y1[ (  ( 73 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 3 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			k1[ (  ( 5 * __DATA_NUM )  + __i ) ] =  (    ( y1[ (  ( 188 * __DATA_NUM )  + __i ) ].multiply(z[4], MathContext.DECIMAL128) ) .divide(z[6] ,128,BigDecimal.ROUND_HALF_UP) .subtract(   ( y1[ (  ( 73 * __DATA_NUM )  + __i ) ].multiply(z[5], MathContext.DECIMAL128) ) .divide(z[6] ,128,BigDecimal.ROUND_HALF_UP) )) ;
			k1[ (  ( 6 * __DATA_NUM )  + __i ) ] = (y1[ (  ( 307 * __DATA_NUM )  + __i ) ]).negate() ;
			k1[ (  ( 7 * __DATA_NUM )  + __i ) ] = y1[ (  ( 131 * __DATA_NUM )  + __i ) ];
			k1[ (  ( 8 * __DATA_NUM )  + __i ) ] = y1[ (  ( 5 * __DATA_NUM )  + __i ) ];
			k1[ (  ( 9 * __DATA_NUM )  + __i ) ] = y1[ (  ( 132 * __DATA_NUM )  + __i ) ];
			k1[ (  ( 10 * __DATA_NUM )  + __i ) ] = y1[ (  ( 8 * __DATA_NUM )  + __i ) ];
			k1[ (  ( 11 * __DATA_NUM )  + __i ) ] = y1[ (  ( 75 * __DATA_NUM )  + __i ) ];
			k1[ (  ( 12 * __DATA_NUM )  + __i ) ] = y1[ (  ( 189 * __DATA_NUM )  + __i ) ];
			k1[ (  ( 13 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 193 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 17 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 14 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 139 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 284 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 15 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 264 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 295 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 16 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 236 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 310 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 17 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 265 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 303 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 18 * __DATA_NUM )  + __i ) ] =  (  ( z[45].multiply(x1[ (  ( 17 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( z[46].multiply(x1[ (  ( 18 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 19 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 237 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 84 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 20 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 140 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 285 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 21 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 296 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 194 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 22 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 308 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 238 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 23 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 304 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 266 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 24 * __DATA_NUM )  + __i ) ] =    ( y1[ (  ( 85 * __DATA_NUM )  + __i ) ].subtract(x1[ (  ( 24 * __DATA_NUM )  + __i ) ])) .divide(y1[ (  ( 19 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			k1[ (  ( 25 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 93 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 286 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 26 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 199 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 148 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 27 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 149 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 241 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 28 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 242 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 268 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 29 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 150 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 200 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 30 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 29 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 297 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 31 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 201 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 151 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 32 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 152 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 269 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 33 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 287 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 202 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 34 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 203 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 153 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 35 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 102 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 311 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 36 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 207 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 161 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 37 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 103 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 245 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 38 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 162 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 271 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 39 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 246 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 208 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 40 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 209 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 39 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 41 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 288 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 104 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 42 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 247 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 272 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 43 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 210 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 163 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 44 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 298 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 164 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 45 * __DATA_NUM )  + __i ) ] =  (  ( ( ( y1[ (  ( 121 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 222 * __DATA_NUM )  + __i ) ]) ) ).negate() .multiply(x1[ (  ( 45 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 226 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 46 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 183 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 52 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k1[ (  ( 46 * __DATA_NUM )  + __i ) ] =  (  (  ( y1[ (  ( 222 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 45 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y1[ (  ( 226 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 291 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 231 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 46 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y1[ (  ( 179 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 47 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 230 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 53 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k1[ (  ( 47 * __DATA_NUM )  + __i ) ] =  (  (  ( y1[ (  ( 291 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 46 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y1[ (  ( 179 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 223 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 259 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 47 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y1[ (  ( 256 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 48 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 258 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k1[ (  ( 48 * __DATA_NUM )  + __i ) ] =  (  (  ( y1[ (  ( 223 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 47 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y1[ (  ( 256 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 254 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 280 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 48 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y1[ (  ( 180 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 49 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 300 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 55 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k1[ (  ( 49 * __DATA_NUM )  + __i ) ] =  (  (  ( y1[ (  ( 254 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 48 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y1[ (  ( 180 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 277 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 178 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 293 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 49 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y1[ (  ( 227 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 50 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 279 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 51 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 306 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 56 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k1[ (  ( 50 * __DATA_NUM )  + __i ) ] =  (  (  ( y1[ (  ( 277 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 49 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y1[ (  ( 227 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 120 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 232 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 50 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y1[ (  ( 292 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 51 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y1[ (  ( 184 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 57 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k1[ (  ( 51 * __DATA_NUM )  + __i ) ] =  (  (  ( y1[ (  ( 178 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 49 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 120 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 50 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( (  ( y1[ (  ( 279 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 292 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 51 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 52 * __DATA_NUM )  + __i ) ] =  (  (  ( y1[ (  ( 121 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 45 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y1[ (  ( 183 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 224 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 52 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y1[ (  ( 228 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 53 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k1[ (  ( 53 * __DATA_NUM )  + __i ) ] =  (  (  (  ( y1[ (  ( 231 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 46 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 224 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 52 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( (  ( y1[ (  ( 228 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 230 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 309 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 53 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y1[ (  ( 181 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k1[ (  ( 54 * __DATA_NUM )  + __i ) ] =  (  (  (  ( y1[ (  ( 259 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 47 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 309 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 53 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( (  ( y1[ (  ( 225 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 258 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 181 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y1[ (  ( 257 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 55 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k1[ (  ( 55 * __DATA_NUM )  + __i ) ] =  (  (  (  ( y1[ (  ( 280 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 48 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 225 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( (  ( y1[ (  ( 257 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 300 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 255 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 55 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y1[ (  ( 182 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 56 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k1[ (  ( 56 * __DATA_NUM )  + __i ) ] =  (  (  (  ( y1[ (  ( 293 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 49 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 255 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 55 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( (  ( y1[ (  ( 182 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 306 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 278 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 56 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y1[ (  ( 229 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 57 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k1[ (  ( 57 * __DATA_NUM )  + __i ) ] =  (  (  ( y1[ (  ( 232 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 50 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 278 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 56 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( (  ( y1[ (  ( 229 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 184 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 57 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 58 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 185 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 59 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( y1[ (  ( 62 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 58 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 59 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 124 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 186 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 60 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 301 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 125 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 61 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 261 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 126 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 62 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 66 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 282 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 63 * __DATA_NUM )  + __i ) ] =  (  ( (y1[ (  ( 67 * __DATA_NUM )  + __i ) ]).negate() .multiply(x1[ (  ( 63 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y1[ (  ( 128 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 64 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k1[ (  ( 64 * __DATA_NUM )  + __i ) ] =  (  (  ( y1[ (  ( 67 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 63 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y1[ (  ( 128 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 127 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 64 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y1[ (  ( 187 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 65 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k1[ (  ( 65 * __DATA_NUM )  + __i ) ] =  (  (  ( y1[ (  ( 127 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 64 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y1[ (  ( 187 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 68 * __DATA_NUM )  + __i ) ]) ) .multiply(x1[ (  ( 65 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y1[ (  ( 69 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 66 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k1[ (  ( 66 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 68 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 65 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( y1[ (  ( 69 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 66 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			x2[ (  ( 0 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 0 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 1 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 1 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 1 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 2 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 2 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 2 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 3 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 3 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 3 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 4 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 4 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 4 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 5 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 5 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 5 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 6 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 6 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 6 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 7 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 7 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 7 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 8 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 8 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 8 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 9 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 9 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 9 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 10 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 10 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 10 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 11 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 11 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 11 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 12 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 12 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 12 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 13 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 13 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 13 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 14 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 14 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 14 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 15 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 15 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 15 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 16 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 16 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 16 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 17 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 17 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 17 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 18 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 18 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 18 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 19 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 19 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 19 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 20 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 20 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 20 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 21 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 21 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 21 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 22 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 22 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 22 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 23 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 23 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 23 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 24 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 24 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 24 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 25 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 25 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 25 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 26 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 26 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 26 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 27 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 27 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 27 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 28 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 28 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 28 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 29 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 29 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 29 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 30 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 30 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 30 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 31 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 31 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 31 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 32 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 32 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 32 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 33 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 33 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 33 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 34 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 34 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 34 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 35 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 35 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 35 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 36 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 36 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 36 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 37 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 37 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 37 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 38 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 38 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 38 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 39 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 39 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 39 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 40 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 40 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 40 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 41 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 41 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 41 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 42 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 42 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 42 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 43 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 43 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 43 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 44 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 44 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 44 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 45 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 45 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 45 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 46 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 46 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 46 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 47 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 47 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 47 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 48 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 48 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 48 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 49 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 49 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 49 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 50 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 50 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 50 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 51 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 51 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 51 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 52 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 52 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 52 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 53 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 53 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 53 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 54 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 54 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 54 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 55 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 55 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 55 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 56 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 56 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 56 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 57 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 57 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 57 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 58 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 58 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 58 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 59 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 59 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 60 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 60 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 60 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 61 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 61 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 61 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 62 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 62 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 62 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 63 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 63 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 63 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 64 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 64 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 64 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 65 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 65 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 65 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 66 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 66 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 66 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 0 * __DATA_NUM )  + __i ) ] =    ( z[2].multiply(z[1], MathContext.DECIMAL128) ) .divide(z[0] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 1 * __DATA_NUM )  + __i ) ] =  ( ((  t.divide(z[11] ,128,BigDecimal.ROUND_HALF_UP) ).setScale(0,RoundingMode.FLOOR)).multiply(z[11], MathContext.DECIMAL128) ) ;
			y2[ (  ( 2 * __DATA_NUM )  + __i ) ] = (  x2[ (  ( 2 * __DATA_NUM )  + __i ) ].divide(z[15] ,128,BigDecimal.ROUND_HALF_UP) .pow(z[16] ));
			y2[ (  ( 3 * __DATA_NUM )  + __i ) ] =  ( z[22].multiply( ( x2[ (  ( 12 * __DATA_NUM )  + __i ) ] .add( x2[ (  ( 10 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128).multiply( ( x2[ (  ( 4 * __DATA_NUM )  + __i ) ].subtract(x2[ (  ( 3 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y2[ (  ( 4 * __DATA_NUM )  + __i ) ] =    ( x2[ (  ( 3 * __DATA_NUM )  + __i ) ].subtract(x2[ (  ( 2 * __DATA_NUM )  + __i ) ])) .divide(z[24] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 5 * __DATA_NUM )  + __i ) ] =  (  ( z[27].multiply(x2[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( new BigDecimal(1).subtract(x2[ (  ( 8 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( z[28].multiply(x2[ (  ( 8 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			y2[ (  ( 6 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add(   ( z[31].multiply(z[34], MathContext.DECIMAL128) ) .divide(( ( x2[ (  ( 3 * __DATA_NUM )  + __i ) ] .add( z[34]) ) .pow(2 )) ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( z[33].multiply(z[36], MathContext.DECIMAL128) ) .divide(( ( x2[ (  ( 3 * __DATA_NUM )  + __i ) ] .add( z[36]) ) .pow(2 )) ,128,BigDecimal.ROUND_HALF_UP) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 7 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add(   ( z[31].multiply(z[34], MathContext.DECIMAL128) ) .divide(( ( x2[ (  ( 2 * __DATA_NUM )  + __i ) ] .add( z[34]) ) .pow(2 )) ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( z[33].multiply(z[36], MathContext.DECIMAL128) ) .divide(( ( x2[ (  ( 2 * __DATA_NUM )  + __i ) ] .add( z[36]) ) .pow(2 )) ,128,BigDecimal.ROUND_HALF_UP) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 8 * __DATA_NUM )  + __i ) ] =  (  ( z[39].multiply(( ( x2[ (  ( 3 * __DATA_NUM )  + __i ) ].multiply(new BigDecimal(1000), MathContext.DECIMAL128) ) .pow(z[44] )), MathContext.DECIMAL128).multiply(x2[ (  ( 12 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( z[40].multiply(x2[ (  ( 10 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			y2[ (  ( 9 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(new BigDecimal(1.2), MathContext.DECIMAL128).multiply(new BigDecimal(0.416), MathContext.DECIMAL128).multiply(exp( ( new BigDecimal(0.012).multiply( ( x2[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(new BigDecimal(35))) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 10 * __DATA_NUM )  + __i ) ] =  ( z[48].multiply(y2[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 11 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.6).multiply(new BigDecimal(0.09233), MathContext.DECIMAL128).multiply(x2[ (  ( 3 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 12 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y2[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 13 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y2[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 14 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y2[ (  ( 10 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 15 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y2[ (  ( 10 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 16 * __DATA_NUM )  + __i ) ] = y2[ (  ( 11 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 17 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 12 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 16 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 13 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 18 * __DATA_NUM )  + __i ) ] = new BigDecimal(0.82);
			y2[ (  ( 19 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (   new BigDecimal(0.00336336209452).divide( ( new BigDecimal(0.5).add(exp(  x2[ (  ( 6 * __DATA_NUM )  + __i ) ].divide( (new BigDecimal(-5.53899874036055))  ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) .add( ( new BigDecimal(0.00779046570737).multiply(exp(  x2[ (  ( 6 * __DATA_NUM )  + __i ) ].divide( (new BigDecimal(-49.51039631160386))  ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 20 * __DATA_NUM )  + __i ) ] =  ( z[51].multiply(exp( ( (z[52]).negate() .multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 21 * __DATA_NUM )  + __i ) ] =  ( z[55].multiply(exp( ( z[56].multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 22 * __DATA_NUM )  + __i ) ] = y2[ (  ( 20 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 23 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y2[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 24 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 20 * __DATA_NUM )  + __i ) ].divide(z[57] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 25 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(3).multiply(z[58], MathContext.DECIMAL128).multiply(y2[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[59] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 26 * __DATA_NUM )  + __i ) ] = y2[ (  ( 21 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 27 * __DATA_NUM )  + __i ) ] =  ( z[58].multiply(y2[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 28 * __DATA_NUM )  + __i ) ] =  ( z[60].multiply(y2[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 29 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 26 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 25 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 24 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 31 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 30 * __DATA_NUM )  + __i ) ] =  ( z[73].multiply(exp( ( z[74].multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 31 * __DATA_NUM )  + __i ) ] = z[77];
			y2[ (  ( 32 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y2[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 33 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y2[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 34 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(z[69], MathContext.DECIMAL128).multiply(y2[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 35 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(2).multiply(z[71], MathContext.DECIMAL128).multiply(y2[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[70] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 36 * __DATA_NUM )  + __i ) ] = y2[ (  ( 31 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 37 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 31 * __DATA_NUM )  + __i ) ].divide(z[70] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 38 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 31 * __DATA_NUM )  + __i ) ].divide(z[72] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 39 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 36 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 34 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 40 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 40 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 0 * __DATA_NUM )  + __i ) ].multiply(ln(   z[9].divide(x2[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 41 * __DATA_NUM )  + __i ) ] =  ( z[8].add( ( new BigDecimal(0.01833).multiply(z[9], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 42 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.5).multiply(y2[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(ln(   z[10].divide(x2[ (  ( 2 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 43 * __DATA_NUM )  + __i ) ] =  ( z[85].multiply(z[84], MathContext.DECIMAL128).multiply(new BigDecimal(0.1), MathContext.DECIMAL128) ) ;
			y2[ (  ( 44 * __DATA_NUM )  + __i ) ] = sqrt(   z[8].divide(new BigDecimal(4) ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE);
			y2[ (  ( 45 * __DATA_NUM )  + __i ) ] =   x2[ (  ( 6 * __DATA_NUM )  + __i ) ].divide(y2[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 46 * __DATA_NUM )  + __i ) ] =  (  ( x2[ (  ( 1 * __DATA_NUM )  + __i ) ].multiply(exp(y2[ (  ( 45 * __DATA_NUM )  + __i ) ],__SCALE), MathContext.DECIMAL128) ) .subtract(z[8])) ;
			y2[ (  ( 47 * __DATA_NUM )  + __i ) ] =  (  ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].multiply(exp(y2[ (  ( 45 * __DATA_NUM )  + __i ) ],__SCALE), MathContext.DECIMAL128) ) .subtract(z[9])) ;
			y2[ (  ( 48 * __DATA_NUM )  + __i ) ] =  ( z[83].multiply( ( x2[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 40 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y2[ (  ( 49 * __DATA_NUM )  + __i ) ] =    ( z[94].multiply(x2[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide( ( z[95] .add( x2[ (  ( 2 * __DATA_NUM )  + __i ) ]) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 50 * __DATA_NUM )  + __i ) ] =    ( exp(  z[9].divide(new BigDecimal(67.3) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE).subtract(new BigDecimal(1))) .divide(new BigDecimal(7) ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 51 * __DATA_NUM )  + __i ) ] =   z[8].divide( ( z[8] .add( z[93]) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 52 * __DATA_NUM )  + __i ) ] =  ( z[88] .add( z[10]) ) ;
			y2[ (  ( 53 * __DATA_NUM )  + __i ) ] =  ( z[98].multiply((double)4.574E-7, MathContext.DECIMAL128) ) ;
			y2[ (  ( 54 * __DATA_NUM )  + __i ) ] =   x2[ (  ( 6 * __DATA_NUM )  + __i ) ].divide(y2[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 55 * __DATA_NUM )  + __i ) ] =  (  ( (double)1.0E-3.multiply(exp( ( new BigDecimal(2).multiply(y2[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .subtract( ( z[10].multiply(new BigDecimal(0.341), MathContext.DECIMAL128) ) )) ;
			y2[ (  ( 56 * __DATA_NUM )  + __i ) ] =  (  ( x2[ (  ( 1 * __DATA_NUM )  + __i ) ].multiply(exp(y2[ (  ( 54 * __DATA_NUM )  + __i ) ],__SCALE), MathContext.DECIMAL128) ) .subtract(z[8])) ;
			y2[ (  ( 57 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide(y2[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 58 * __DATA_NUM )  + __i ) ] =  ( z[2].multiply(z[99], MathContext.DECIMAL128) ) ;
			y2[ (  ( 59 * __DATA_NUM )  + __i ) ] = new BigDecimal(1.38862291252871);
			y2[ (  ( 60 * __DATA_NUM )  + __i ) ] = new BigDecimal(1.40042625477401);
			y2[ (  ( 61 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(new BigDecimal(0.02608362043337), MathContext.DECIMAL128) ) ;
			y2[ (  ( 62 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[101], MathContext.DECIMAL128).multiply(exp( ( z[102].multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 63 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[105], MathContext.DECIMAL128).multiply(exp( ( z[106].multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 64 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[109], MathContext.DECIMAL128).multiply(exp( ( z[110].multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 65 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[113], MathContext.DECIMAL128).multiply(exp( ( z[114].multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 66 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 65 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 64 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 61 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 67 * __DATA_NUM )  + __i ) ] = new BigDecimal(0.00795600798004);
			y2[ (  ( 68 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.00767254363063).multiply(exp( ( new BigDecimal(0.08662945914655).multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 69 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.00379737998368).multiply(exp( (  (new BigDecimal(-0.01425668126881)) .multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 70 * __DATA_NUM )  + __i ) ] =  ( z[3].multiply((double)1.0E-3, MathContext.DECIMAL128) ) ;
			y2[ (  ( 71 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 70 * __DATA_NUM )  + __i ) ].divide( ( new BigDecimal(2).multiply(z[7], MathContext.DECIMAL128).multiply(z[0], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 72 * __DATA_NUM )  + __i ) ] =  (  (  (  ( t.subtract(y2[ (  ( 1 * __DATA_NUM )  + __i ) ]))  .compareTo(z[14])>=0)  &&  (  ( t.subtract(y2[ (  ( 1 * __DATA_NUM )  + __i ) ])) .compareTo( ( z[14] .add( z[12]) ) )<=0)  )  ? z[13] : new BigDecimal(0) ) ;
			y2[ (  ( 73 * __DATA_NUM )  + __i ) ] =    ( x2[ (  ( 5 * __DATA_NUM )  + __i ) ].subtract(x2[ (  ( 4 * __DATA_NUM )  + __i ) ])) .divide(z[23] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 74 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add(   ( z[32].multiply(z[35], MathContext.DECIMAL128) ) .divide(( ( x2[ (  ( 4 * __DATA_NUM )  + __i ) ] .add( z[35]) ) .pow(2 )) ,128,BigDecimal.ROUND_HALF_UP) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 75 * __DATA_NUM )  + __i ) ] =  (  ( z[41].multiply(x2[ (  ( 12 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( z[42].multiply(x2[ (  ( 11 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			y2[ (  ( 76 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(new BigDecimal(0.45), MathContext.DECIMAL128).multiply(new BigDecimal(0.049), MathContext.DECIMAL128).multiply(exp( (  (new BigDecimal(-0.065)) .multiply( ( x2[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(new BigDecimal(22))) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 77 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.25).multiply(new BigDecimal(0.01), MathContext.DECIMAL128) ) ;
			y2[ (  ( 78 * __DATA_NUM )  + __i ) ] = y2[ (  ( 9 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 79 * __DATA_NUM )  + __i ) ] = y2[ (  ( 10 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 80 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y2[ (  ( 76 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 81 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y2[ (  ( 76 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 82 * __DATA_NUM )  + __i ) ] =  ( z[48].multiply(y2[ (  ( 16 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 83 * __DATA_NUM )  + __i ) ] = y2[ (  ( 77 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 84 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 14 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 83 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 19 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 85 * __DATA_NUM )  + __i ) ] =  (  (   y2[ (  ( 18 * __DATA_NUM )  + __i ) ].divide( ( new BigDecimal(1).add(exp(   ( x2[ (  ( 6 * __DATA_NUM )  + __i ) ].add(new BigDecimal(28.5)) ) .divide(new BigDecimal(7.8) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) .add(new BigDecimal(1)) ) .subtract(y2[ (  ( 18 * __DATA_NUM )  + __i ) ])) ;
			y2[ (  ( 86 * __DATA_NUM )  + __i ) ] =  ( z[53].multiply(exp( ( (z[54]).negate() .multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 87 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y2[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 88 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(2).multiply(z[57], MathContext.DECIMAL128).multiply(y2[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[58] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 89 * __DATA_NUM )  + __i ) ] =  ( z[57].multiply(y2[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 90 * __DATA_NUM )  + __i ) ] = y2[ (  ( 86 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 91 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 86 * __DATA_NUM )  + __i ) ].divide(z[62] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 92 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 86 * __DATA_NUM )  + __i ) ].divide(z[64] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 93 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 22 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 26 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 90 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 94 * __DATA_NUM )  + __i ) ] =  ( z[75].multiply(exp( ( (z[76]).negate() .multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 95 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y2[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 96 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(3).multiply(z[70], MathContext.DECIMAL128).multiply(y2[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[69] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 97 * __DATA_NUM )  + __i ) ] = y2[ (  ( 94 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 98 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y2[ (  ( 94 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 99 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 94 * __DATA_NUM )  + __i ) ].divide(z[65] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 100 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(3).multiply(z[66], MathContext.DECIMAL128).multiply(y2[ (  ( 94 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[67] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 101 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 31 * __DATA_NUM )  + __i ) ].divide(z[69] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 102 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 97 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 36 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 36 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 40 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 103 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 98 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 38 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 37 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 42 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 95 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 36 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 104 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 96 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 101 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 99 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 41 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 105 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 0 * __DATA_NUM )  + __i ) ].multiply(ln(   z[8].divide(x2[ (  ( 1 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 106 * __DATA_NUM )  + __i ) ] =  (  ( new BigDecimal(1).subtract(z[85])) .multiply(z[84], MathContext.DECIMAL128).multiply((double)4.2986E-7, MathContext.DECIMAL128) ) ;
			y2[ (  ( 107 * __DATA_NUM )  + __i ) ] =  ( z[79].multiply(y2[ (  ( 44 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x2[ (  ( 61 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x2[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 105 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y2[ (  ( 108 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 43 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 29 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x2[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 105 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y2[ (  ( 109 * __DATA_NUM )  + __i ) ] =  ( exp(y2[ (  ( 45 * __DATA_NUM )  + __i ) ],__SCALE).subtract(new BigDecimal(1))) ;
			y2[ (  ( 110 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(0.94).add(exp( (   new BigDecimal(1.26).divide(y2[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( x2[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 105 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 111 * __DATA_NUM )  + __i ) ] =  ( z[96].multiply( ( x2[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 42 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y2[ (  ( 112 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(1).add((  z[92].divide(x2[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .pow(1.5 ))) ) ;
			y2[ (  ( 113 * __DATA_NUM )  + __i ) ] =    ( (z[87].pow(3 )).add((z[9].pow(3 ))) ) .divide(new BigDecimal(5000) ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 114 * __DATA_NUM )  + __i ) ] =  ( z[98].multiply((double)2.469E-4, MathContext.DECIMAL128) ) ;
			y2[ (  ( 115 * __DATA_NUM )  + __i ) ] =  ( exp( ( new BigDecimal(2).multiply(y2[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE).subtract(new BigDecimal(1))) ;
			y2[ (  ( 116 * __DATA_NUM )  + __i ) ] =  ( exp(y2[ (  ( 54 * __DATA_NUM )  + __i ) ],__SCALE).subtract(new BigDecimal(1))) ;
			y2[ (  ( 117 * __DATA_NUM )  + __i ) ] =    ( (double)1.381E-23.multiply(z[99], MathContext.DECIMAL128) ) .divide((double)6.626E-31 ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 118 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-85800.3675578326)) .divide(y2[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(70.078).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 119 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-287913.446530953)) .divide(y2[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(786.217).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 120 * __DATA_NUM )  + __i ) ] = y2[ (  ( 118 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 121 * __DATA_NUM )  + __i ) ] = y2[ (  ( 119 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 122 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(new BigDecimal(0.14832978132145), MathContext.DECIMAL128) ) ;
			y2[ (  ( 123 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[107], MathContext.DECIMAL128).multiply(exp( ( z[108].multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 124 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 62 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 58 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 122 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 125 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 65 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 63 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 122 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 126 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 123 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 64 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 61 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 127 * __DATA_NUM )  + __i ) ] = new BigDecimal(0.03966720676071);
			y2[ (  ( 128 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.2162557589585).multiply(exp( (  (new BigDecimal(-0.00001889123021)) .multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 129 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 70 * __DATA_NUM )  + __i ) ].divide( ( z[4].multiply(z[0], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 130 * __DATA_NUM )  + __i ) ] = (  x2[ (  ( 5 * __DATA_NUM )  + __i ) ].divide(z[17] ,128,BigDecimal.ROUND_HALF_UP) .pow(z[18] ));
			y2[ (  ( 131 * __DATA_NUM )  + __i ) ] =  (  ( z[29].multiply(x2[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( new BigDecimal(1).subtract(x2[ (  ( 7 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( z[30].multiply(x2[ (  ( 7 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			y2[ (  ( 132 * __DATA_NUM )  + __i ) ] =  (  ( (z[37]).negate() .multiply(( ( x2[ (  ( 3 * __DATA_NUM )  + __i ) ].multiply(new BigDecimal(1000), MathContext.DECIMAL128) ) .pow(z[43] )), MathContext.DECIMAL128).multiply(x2[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( z[38].multiply(x2[ (  ( 12 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 133 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 76 * __DATA_NUM )  + __i ) ].divide(z[47] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 134 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y2[ (  ( 10 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 135 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y2[ (  ( 76 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 136 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y2[ (  ( 133 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 137 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y2[ (  ( 133 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 138 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 83 * __DATA_NUM )  + __i ) ].divide(z[47] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 139 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 12 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 13 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 80 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 15 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 138 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 140 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 14 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 19 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 136 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 82 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 14 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 141 * __DATA_NUM )  + __i ) ] =  ( z[49].multiply(exp( ( z[50].multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 142 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y2[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 143 * __DATA_NUM )  + __i ) ] = y2[ (  ( 141 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 144 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(3).multiply(z[62], MathContext.DECIMAL128).multiply(y2[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[61] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 145 * __DATA_NUM )  + __i ) ] =    ( z[64].multiply(y2[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[63] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 146 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(4).multiply(z[59], MathContext.DECIMAL128).multiply(y2[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[60] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 147 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 86 * __DATA_NUM )  + __i ) ].divide(z[61] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 148 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 142 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 22 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 89 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 26 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 149 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 23 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 28 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 91 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 32 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 142 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 26 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 150 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 143 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 28 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 92 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 34 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 151 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 144 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 147 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 24 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 31 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 152 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 25 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 33 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 27 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 27 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 144 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 31 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 153 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 92 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 146 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 34 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 154 * __DATA_NUM )  + __i ) ] = z[78];
			y2[ (  ( 155 * __DATA_NUM )  + __i ) ] =    ( z[72].multiply(y2[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[71] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 156 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y2[ (  ( 94 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 157 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(4).multiply(z[67], MathContext.DECIMAL128).multiply(y2[ (  ( 94 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[68] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 158 * __DATA_NUM )  + __i ) ] =  ( z[65].multiply(y2[ (  ( 154 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 159 * __DATA_NUM )  + __i ) ] =  ( z[67].multiply(y2[ (  ( 154 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 160 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 31 * __DATA_NUM )  + __i ) ].divide(z[71] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 161 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 95 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 97 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 158 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 36 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 162 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 156 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 39 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 160 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 43 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 33 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 37 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 163 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 155 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 160 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 100 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 43 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 164 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 38 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 157 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 44 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 165 * __DATA_NUM )  + __i ) ] =  ( x2[ (  ( 1 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(0.01833).multiply(x2[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 166 * __DATA_NUM )  + __i ) ] =  ( z[82].multiply( ( x2[ (  ( 50 * __DATA_NUM )  + __i ) ] .add( x2[ (  ( 51 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128).multiply( ( x2[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 40 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y2[ (  ( 167 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(1000).multiply(z[0], MathContext.DECIMAL128).multiply(y2[ (  ( 45 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 168 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.02).multiply(y2[ (  ( 106 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x2[ (  ( 39 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y2[ (  ( 167 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y2[ (  ( 47 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y2[ (  ( 109 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 169 * __DATA_NUM )  + __i ) ] =  ( z[81].multiply(sqrt(   z[8].divide(new BigDecimal(1) ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128).multiply(y2[ (  ( 110 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x2[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 105 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y2[ (  ( 170 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(1000).multiply(z[0], MathContext.DECIMAL128).multiply(y2[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 171 * __DATA_NUM )  + __i ) ] =    ( z[2].multiply(z[99], MathContext.DECIMAL128) ) .divide(z[0] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 172 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-272470.273489681)) .divide(y2[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(708.146).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   (  (new BigDecimal(-2.28528417586424)) .multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y2[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 173 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-133689.9304091)) .divide(y2[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(229.205).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   (  (new BigDecimal(-1.55804214553883)) .multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y2[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 174 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-97657.8497137015)) .divide(y2[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(1.51).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( new BigDecimal(0.0684861993100685).multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y2[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 175 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-55700.6624658307)) .divide(y2[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(   (new BigDecimal(-130.639)) .divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   (  (new BigDecimal(-3.64981672927078)) .multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y2[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 176 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-147813.990005035)) .divide(y2[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(338.915).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( new BigDecimal(2.1360043702126).multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y2[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 177 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-59565.2236284584)) .divide(y2[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(0.00711).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 178 * __DATA_NUM )  + __i ) ] = y2[ (  ( 176 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 179 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y2[ (  ( 172 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 180 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y2[ (  ( 172 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 181 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 179 * __DATA_NUM )  + __i ) ].divide(y2[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 182 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 180 * __DATA_NUM )  + __i ) ].divide(y2[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 183 * __DATA_NUM )  + __i ) ] = y2[ (  ( 177 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 184 * __DATA_NUM )  + __i ) ] = y2[ (  ( 174 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 185 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[103], MathContext.DECIMAL128).multiply(exp( ( z[104].multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 186 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 185 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 61 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 59 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 187 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.00700806628929).multiply(exp( (  (new BigDecimal(-0.14999754700285)) .multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 188 * __DATA_NUM )  + __i ) ] =    ( z[19].multiply( (  ( z[20].multiply(y2[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( z[21].multiply(y2[ (  ( 130 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) , MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1) .add( y2[ (  ( 2 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 130 * __DATA_NUM )  + __i ) ]) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 189 * __DATA_NUM )  + __i ) ] = ( ( y2[ (  ( 132 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 8 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 75 * __DATA_NUM )  + __i ) ]) ) ).negate() ;
			y2[ (  ( 190 * __DATA_NUM )  + __i ) ] = y2[ (  ( 76 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 191 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y2[ (  ( 133 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 192 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 138 * __DATA_NUM )  + __i ) ].divide(z[47] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 193 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 190 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 14 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 83 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 19 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 194 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 136 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 15 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 192 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 195 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y2[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 196 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(z[61], MathContext.DECIMAL128).multiply(y2[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 197 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y2[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 198 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 86 * __DATA_NUM )  + __i ) ].divide(z[63] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 199 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 87 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 27 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 147 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 31 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 195 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 25 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 200 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 197 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 28 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 29 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 201 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 88 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 32 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 89 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 26 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 196 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 202 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 145 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 198 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 25 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 33 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 203 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 28 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 29 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 145 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 33 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 204 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y2[ (  ( 94 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 205 * __DATA_NUM )  + __i ) ] = y2[ (  ( 154 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 206 * __DATA_NUM )  + __i ) ] =  ( z[68].multiply(y2[ (  ( 154 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 207 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 204 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 37 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 101 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 41 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 32 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 35 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 208 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 156 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 206 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 39 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 209 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 205 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 35 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 99 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 41 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 210 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 157 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 44 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 159 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 38 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 35 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 42 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 211 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 0 * __DATA_NUM )  + __i ) ].multiply(ln(   y2[ (  ( 41 * __DATA_NUM )  + __i ) ].divide(y2[ (  ( 165 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 212 * __DATA_NUM )  + __i ) ] =    ( y2[ (  ( 106 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 39 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y2[ (  ( 167 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y2[ (  ( 46 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y2[ (  ( 109 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 213 * __DATA_NUM )  + __i ) ] =   x2[ (  ( 6 * __DATA_NUM )  + __i ) ].divide(y2[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 214 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.0365).multiply(y2[ (  ( 50 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (  (new BigDecimal(-1.33)) .multiply(y2[ (  ( 213 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 215 * __DATA_NUM )  + __i ) ] =  ( exp( ( z[90].multiply(y2[ (  ( 213 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE).multiply((x2[ (  ( 0 * __DATA_NUM )  + __i ) ].pow(3 )), MathContext.DECIMAL128).multiply(z[10], MathContext.DECIMAL128) ) ;
			y2[ (  ( 216 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(1).add( ( z[89].multiply(exp( (  ( z[90].subtract(new BigDecimal(1))) .multiply(y2[ (  ( 213 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 217 * __DATA_NUM )  + __i ) ] =    ( y2[ (  ( 114 * __DATA_NUM )  + __i ) ].multiply(new BigDecimal(4), MathContext.DECIMAL128).multiply(y2[ (  ( 170 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y2[ (  ( 55 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y2[ (  ( 115 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 218 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 217 * __DATA_NUM )  + __i ) ] .compareTo(new BigDecimal(0))>=0)  ? new BigDecimal(0) : y2[ (  ( 217 * __DATA_NUM )  + __i ) ] ) ;
			y2[ (  ( 219 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-114007.462700232)) .divide(y2[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(224.114).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( new BigDecimal(0.286374268596235).multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y2[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 220 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-62123.0784380481)) .divide(y2[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(39.295).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( new BigDecimal(0.288816042743232).multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y2[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 221 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-121955.166154864)) .divide(y2[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(225.175).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 222 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y2[ (  ( 219 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 223 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y2[ (  ( 219 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 224 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 222 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 225 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 223 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 226 * __DATA_NUM )  + __i ) ] = y2[ (  ( 172 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 227 * __DATA_NUM )  + __i ) ] = y2[ (  ( 173 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 228 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 226 * __DATA_NUM )  + __i ) ].divide(y2[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 229 * __DATA_NUM )  + __i ) ] = y2[ (  ( 175 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 230 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 183 * __DATA_NUM )  + __i ) ].divide(y2[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 231 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 121 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 232 * __DATA_NUM )  + __i ) ] = y2[ (  ( 220 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 233 * __DATA_NUM )  + __i ) ] =  (  ( z[25].multiply(y2[ (  ( 131 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( z[26].multiply(y2[ (  ( 5 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 234 * __DATA_NUM )  + __i ) ] = y2[ (  ( 133 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 235 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 192 * __DATA_NUM )  + __i ) ].divide(z[47] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 236 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 13 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 15 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 81 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 17 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 235 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 22 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 237 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 234 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 16 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 13 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 238 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 191 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 79 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 235 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 22 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 239 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y2[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 240 * __DATA_NUM )  + __i ) ] =  ( z[59].multiply(y2[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 241 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 239 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 87 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 27 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 27 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 242 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 197 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 29 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 198 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 33 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 239 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 27 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 243 * __DATA_NUM )  + __i ) ] = y2[ (  ( 30 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 244 * __DATA_NUM )  + __i ) ] =  ( z[66].multiply(y2[ (  ( 154 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 245 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 33 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 204 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 244 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 37 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 246 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 243 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 38 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 38 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 44 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 247 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 100 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 43 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 244 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 37 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 96 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 41 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 248 * __DATA_NUM )  + __i ) ] =  ( z[80].multiply( ( x2[ (  ( 65 * __DATA_NUM )  + __i ) ] .add( x2[ (  ( 66 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128).multiply( ( x2[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 105 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y2[ (  ( 249 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(1).add( ( new BigDecimal(0.1245).multiply(exp( (  (new BigDecimal(-0.1)) .multiply(y2[ (  ( 213 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 250 * __DATA_NUM )  + __i ) ] =  ( exp( (  ( z[90].subtract(new BigDecimal(1))) .multiply(y2[ (  ( 213 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE).multiply((z[9].pow(3 )), MathContext.DECIMAL128).multiply(x2[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 251 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 217 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 24 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x2[ (  ( 18 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 252 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-196336.575735923)) .divide(y2[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(529.952).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( new BigDecimal(2.78084918596045).multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y2[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 253 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-121322.143275242)) .divide(y2[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(193.265).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   (  (new BigDecimal(-1.74290267020903)) .multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y2[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 254 * __DATA_NUM )  + __i ) ] = y2[ (  ( 219 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 255 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 254 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 256 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y2[ (  ( 172 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 257 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 256 * __DATA_NUM )  + __i ) ].divide(y2[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 258 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 230 * __DATA_NUM )  + __i ) ].divide(y2[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 259 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 231 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 260 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[111], MathContext.DECIMAL128).multiply(exp( ( z[112].multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 261 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 63 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 260 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 62 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 262 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y2[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 263 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 235 * __DATA_NUM )  + __i ) ].divide(z[47] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 264 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 262 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 14 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 135 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 16 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 192 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 265 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 78 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 16 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( z[46].multiply(x2[ (  ( 18 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 263 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 23 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 266 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 137 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 263 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 23 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 267 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(2).multiply(z[63], MathContext.DECIMAL128).multiply(y2[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[62] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 268 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 143 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 23 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 240 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 28 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 269 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 267 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 91 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 88 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 32 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 270 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(2).multiply(z[65], MathContext.DECIMAL128).multiply(y2[ (  ( 94 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[66] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 271 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 243 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 98 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 159 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 38 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 272 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 35 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 37 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 270 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 42 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 273 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 212 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 168 * __DATA_NUM )  + __i ) ]) ) ;
			y2[ (  ( 274 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( y2[ (  ( 249 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 214 * __DATA_NUM )  + __i ) ]) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 275 * __DATA_NUM )  + __i ) ] =    ( z[86].multiply( ( y2[ (  ( 215 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 250 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .divide( ( y2[ (  ( 52 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 216 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y2[ (  ( 113 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 276 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (   new BigDecimal(116431.142142348).divide(y2[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(   (new BigDecimal(-578.317)) .divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( new BigDecimal(0.764126011745707).multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y2[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 277 * __DATA_NUM )  + __i ) ] = y2[ (  ( 252 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 278 * __DATA_NUM )  + __i ) ] = y2[ (  ( 276 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 279 * __DATA_NUM )  + __i ) ] = y2[ (  ( 253 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 280 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 259 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 281 * __DATA_NUM )  + __i ) ] =    ( y2[ (  ( 123 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 260 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y2[ (  ( 65 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide( ( y2[ (  ( 63 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 64 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 282 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 281 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 260 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 62 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 283 * __DATA_NUM )  + __i ) ] =  ( z[48].multiply(y2[ (  ( 82 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 284 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 190 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 262 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 82 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 14 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 285 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 234 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 134 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 138 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 286 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 195 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 26 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 25 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 287 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 146 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 34 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 240 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 28 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 267 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 32 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 288 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 270 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 42 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 158 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 36 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 34 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 40 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 289 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 108 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 273 * __DATA_NUM )  + __i ) ]) ) ;
			y2[ (  ( 290 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 53 * __DATA_NUM )  + __i ) ].divide( ( new BigDecimal(1).add(  y2[ (  ( 218 * __DATA_NUM )  + __i ) ].divide(z[97] ,128,BigDecimal.ROUND_HALF_UP) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 291 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y2[ (  ( 219 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 292 * __DATA_NUM )  + __i ) ] = y2[ (  ( 221 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 293 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 280 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 294 * __DATA_NUM )  + __i ) ] =  ( z[48].multiply(y2[ (  ( 283 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 295 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 80 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 13 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 283 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 15 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 296 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 134 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 191 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 22 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 283 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 15 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 297 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 90 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 196 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 298 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 206 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 39 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 155 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 43 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 299 * __DATA_NUM )  + __i ) ] =    ( y2[ (  ( 290 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 18 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x2[ (  ( 24 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y2[ (  ( 170 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y2[ (  ( 56 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y2[ (  ( 116 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 300 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 258 * __DATA_NUM )  + __i ) ].divide(y2[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 301 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 61 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 59 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 123 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 61 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 281 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 62 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 302 * __DATA_NUM )  + __i ) ] =  ( z[48].multiply(y2[ (  ( 294 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 303 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 81 * __DATA_NUM )  + __i ) ] .add( z[45]) .add( y2[ (  ( 302 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 17 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 304 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 79 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 22 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 302 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 17 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 305 * __DATA_NUM )  + __i ) ] =    ( z[91].multiply(y2[ (  ( 274 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y2[ (  ( 51 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y2[ (  ( 112 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 306 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 300 * __DATA_NUM )  + __i ) ].divide(y2[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 307 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 166 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 251 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 299 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 107 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 248 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 169 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 275 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 305 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 289 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 49 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 111 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 48 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 72 * __DATA_NUM )  + __i ) ]) ) ;
			y2[ (  ( 308 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 15 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 137 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 23 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 294 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 16 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 309 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 291 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 310 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 135 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 78 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 294 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 16 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y2[ (  ( 311 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 32 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 205 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 35 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			k2[ (  ( 0 * __DATA_NUM )  + __i ) ] =  ( ( ( y2[ (  ( 166 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 48 * __DATA_NUM )  + __i ) ]).add( ( new BigDecimal(3).multiply( ( y2[ (  ( 275 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 305 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) .add( y2[ (  ( 168 * __DATA_NUM )  + __i ) ]) ) ).negate() .multiply(y2[ (  ( 129 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			k2[ (  ( 1 * __DATA_NUM )  + __i ) ] =  ( ( (  (  ( y2[ (  ( 107 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 248 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 169 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 299 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 72 * __DATA_NUM )  + __i ) ]) ) .subtract( ( new BigDecimal(2).multiply(y2[ (  ( 305 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ))  .add( y2[ (  ( 108 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 212 * __DATA_NUM )  + __i ) ]) ) ).negate() .multiply(y2[ (  ( 129 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			k2[ (  ( 2 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 7 * __DATA_NUM )  + __i ) ].multiply( (  (  ( y2[ (  ( 4 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 188 * __DATA_NUM )  + __i ) ])) .subtract(y2[ (  ( 233 * __DATA_NUM )  + __i ) ])) .subtract( (  (  ( y2[ (  ( 111 * __DATA_NUM )  + __i ) ].subtract( ( new BigDecimal(2).multiply(y2[ (  ( 275 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ))  .add( y2[ (  ( 49 * __DATA_NUM )  + __i ) ]) ) .multiply(new BigDecimal(0.5), MathContext.DECIMAL128).multiply(y2[ (  ( 129 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) , MathContext.DECIMAL128) ) ;
			k2[ (  ( 3 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 6 * __DATA_NUM )  + __i ) ].multiply( (  (    ( y2[ (  ( 3 * __DATA_NUM )  + __i ) ].multiply(z[5], MathContext.DECIMAL128) ) .divide(z[7] ,128,BigDecimal.ROUND_HALF_UP) .subtract(   ( y2[ (  ( 4 * __DATA_NUM )  + __i ) ].multiply(z[4], MathContext.DECIMAL128) ) .divide(z[7] ,128,BigDecimal.ROUND_HALF_UP) )) .subtract( ( y2[ (  ( 251 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 71 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) , MathContext.DECIMAL128) ) ;
			k2[ (  ( 4 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 74 * __DATA_NUM )  + __i ) ].multiply( ( y2[ (  ( 73 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 3 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			k2[ (  ( 5 * __DATA_NUM )  + __i ) ] =  (    ( y2[ (  ( 188 * __DATA_NUM )  + __i ) ].multiply(z[4], MathContext.DECIMAL128) ) .divide(z[6] ,128,BigDecimal.ROUND_HALF_UP) .subtract(   ( y2[ (  ( 73 * __DATA_NUM )  + __i ) ].multiply(z[5], MathContext.DECIMAL128) ) .divide(z[6] ,128,BigDecimal.ROUND_HALF_UP) )) ;
			k2[ (  ( 6 * __DATA_NUM )  + __i ) ] = (y2[ (  ( 307 * __DATA_NUM )  + __i ) ]).negate() ;
			k2[ (  ( 7 * __DATA_NUM )  + __i ) ] = y2[ (  ( 131 * __DATA_NUM )  + __i ) ];
			k2[ (  ( 8 * __DATA_NUM )  + __i ) ] = y2[ (  ( 5 * __DATA_NUM )  + __i ) ];
			k2[ (  ( 9 * __DATA_NUM )  + __i ) ] = y2[ (  ( 132 * __DATA_NUM )  + __i ) ];
			k2[ (  ( 10 * __DATA_NUM )  + __i ) ] = y2[ (  ( 8 * __DATA_NUM )  + __i ) ];
			k2[ (  ( 11 * __DATA_NUM )  + __i ) ] = y2[ (  ( 75 * __DATA_NUM )  + __i ) ];
			k2[ (  ( 12 * __DATA_NUM )  + __i ) ] = y2[ (  ( 189 * __DATA_NUM )  + __i ) ];
			k2[ (  ( 13 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 193 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 17 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 14 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 139 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 284 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 15 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 264 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 295 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 16 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 236 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 310 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 17 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 265 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 303 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 18 * __DATA_NUM )  + __i ) ] =  (  ( z[45].multiply(x2[ (  ( 17 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( z[46].multiply(x2[ (  ( 18 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k2[ (  ( 19 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 237 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 84 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 20 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 140 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 285 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 21 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 296 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 194 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 22 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 308 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 238 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 23 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 304 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 266 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 24 * __DATA_NUM )  + __i ) ] =    ( y2[ (  ( 85 * __DATA_NUM )  + __i ) ].subtract(x2[ (  ( 24 * __DATA_NUM )  + __i ) ])) .divide(y2[ (  ( 19 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			k2[ (  ( 25 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 93 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 286 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 26 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 199 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 148 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 27 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 149 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 241 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 28 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 242 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 268 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 29 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 150 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 200 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 30 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 29 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 297 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 31 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 201 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 151 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 32 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 152 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 269 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 33 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 287 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 202 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 34 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 203 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 153 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 35 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 102 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 311 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 36 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 207 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 161 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 37 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 103 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 245 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 38 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 162 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 271 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 39 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 246 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 208 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 40 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 209 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 39 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 41 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 288 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 104 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 42 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 247 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 272 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 43 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 210 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 163 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 44 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 298 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 164 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 45 * __DATA_NUM )  + __i ) ] =  (  ( ( ( y2[ (  ( 121 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 222 * __DATA_NUM )  + __i ) ]) ) ).negate() .multiply(x2[ (  ( 45 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 226 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 46 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 183 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 52 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k2[ (  ( 46 * __DATA_NUM )  + __i ) ] =  (  (  ( y2[ (  ( 222 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 45 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y2[ (  ( 226 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 291 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 231 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 46 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y2[ (  ( 179 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 47 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 230 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 53 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k2[ (  ( 47 * __DATA_NUM )  + __i ) ] =  (  (  ( y2[ (  ( 291 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 46 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y2[ (  ( 179 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 223 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 259 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 47 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y2[ (  ( 256 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 48 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 258 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k2[ (  ( 48 * __DATA_NUM )  + __i ) ] =  (  (  ( y2[ (  ( 223 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 47 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y2[ (  ( 256 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 254 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 280 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 48 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y2[ (  ( 180 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 49 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 300 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 55 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k2[ (  ( 49 * __DATA_NUM )  + __i ) ] =  (  (  ( y2[ (  ( 254 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 48 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y2[ (  ( 180 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 277 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 178 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 293 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 49 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y2[ (  ( 227 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 50 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 279 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 51 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 306 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 56 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k2[ (  ( 50 * __DATA_NUM )  + __i ) ] =  (  (  ( y2[ (  ( 277 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 49 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y2[ (  ( 227 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 120 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 232 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 50 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y2[ (  ( 292 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 51 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y2[ (  ( 184 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 57 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k2[ (  ( 51 * __DATA_NUM )  + __i ) ] =  (  (  ( y2[ (  ( 178 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 49 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 120 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 50 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( (  ( y2[ (  ( 279 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 292 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 51 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k2[ (  ( 52 * __DATA_NUM )  + __i ) ] =  (  (  ( y2[ (  ( 121 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 45 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y2[ (  ( 183 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 224 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 52 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y2[ (  ( 228 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 53 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k2[ (  ( 53 * __DATA_NUM )  + __i ) ] =  (  (  (  ( y2[ (  ( 231 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 46 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 224 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 52 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( (  ( y2[ (  ( 228 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 230 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 309 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 53 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y2[ (  ( 181 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k2[ (  ( 54 * __DATA_NUM )  + __i ) ] =  (  (  (  ( y2[ (  ( 259 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 47 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 309 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 53 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( (  ( y2[ (  ( 225 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 258 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 181 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y2[ (  ( 257 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 55 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k2[ (  ( 55 * __DATA_NUM )  + __i ) ] =  (  (  (  ( y2[ (  ( 280 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 48 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 225 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( (  ( y2[ (  ( 257 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 300 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 255 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 55 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y2[ (  ( 182 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 56 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k2[ (  ( 56 * __DATA_NUM )  + __i ) ] =  (  (  (  ( y2[ (  ( 293 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 49 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 255 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 55 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( (  ( y2[ (  ( 182 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 306 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 278 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 56 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y2[ (  ( 229 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 57 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k2[ (  ( 57 * __DATA_NUM )  + __i ) ] =  (  (  ( y2[ (  ( 232 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 50 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 278 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 56 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( (  ( y2[ (  ( 229 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 184 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 57 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k2[ (  ( 58 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 185 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 59 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( y2[ (  ( 62 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 58 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k2[ (  ( 59 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 124 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 186 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 60 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 301 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 125 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 61 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 261 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 126 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 62 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 66 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 282 * __DATA_NUM )  + __i ) ])) ;
			k2[ (  ( 63 * __DATA_NUM )  + __i ) ] =  (  ( (y2[ (  ( 67 * __DATA_NUM )  + __i ) ]).negate() .multiply(x2[ (  ( 63 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y2[ (  ( 128 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 64 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k2[ (  ( 64 * __DATA_NUM )  + __i ) ] =  (  (  ( y2[ (  ( 67 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 63 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y2[ (  ( 128 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 127 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 64 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y2[ (  ( 187 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 65 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k2[ (  ( 65 * __DATA_NUM )  + __i ) ] =  (  (  ( y2[ (  ( 127 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 64 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y2[ (  ( 187 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 68 * __DATA_NUM )  + __i ) ]) ) .multiply(x2[ (  ( 65 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y2[ (  ( 69 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 66 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k2[ (  ( 66 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 68 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 65 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( y2[ (  ( 69 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 66 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			x3[ (  ( 0 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 0 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 1 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 1 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 1 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 2 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 2 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 2 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 3 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 3 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 3 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 4 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 4 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 4 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 5 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 5 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 5 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 6 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 6 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 6 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 7 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 7 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 7 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 8 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 8 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 8 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 9 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 9 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 9 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 10 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 10 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 10 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 11 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 11 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 11 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 12 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 12 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 12 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 13 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 13 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 13 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 14 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 14 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 14 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 15 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 15 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 15 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 16 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 16 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 16 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 17 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 17 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 17 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 18 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 18 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 18 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 19 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 19 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 19 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 20 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 20 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 20 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 21 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 21 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 21 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 22 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 22 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 22 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 23 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 23 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 23 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 24 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 24 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 24 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 25 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 25 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 25 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 26 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 26 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 26 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 27 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 27 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 27 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 28 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 28 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 28 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 29 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 29 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 29 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 30 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 30 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 30 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 31 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 31 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 31 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 32 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 32 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 32 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 33 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 33 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 33 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 34 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 34 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 34 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 35 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 35 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 35 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 36 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 36 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 36 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 37 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 37 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 37 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 38 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 38 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 38 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 39 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 39 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 39 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 40 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 40 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 40 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 41 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 41 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 41 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 42 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 42 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 42 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 43 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 43 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 43 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 44 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 44 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 44 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 45 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 45 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 45 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 46 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 46 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 46 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 47 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 47 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 47 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 48 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 48 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 48 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 49 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 49 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 49 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 50 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 50 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 50 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 51 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 51 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 51 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 52 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 52 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 52 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 53 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 53 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 53 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 54 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 54 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 54 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 55 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 55 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 55 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 56 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 56 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 56 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 57 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 57 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 57 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 58 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 58 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 58 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 59 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 59 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 60 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 60 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 60 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 61 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 61 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 61 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 62 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 62 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 62 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 63 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 63 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 63 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 64 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 64 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 64 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 65 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 65 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 65 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 66 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 66 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 66 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 0 * __DATA_NUM )  + __i ) ] =    ( z[2].multiply(z[1], MathContext.DECIMAL128) ) .divide(z[0] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 1 * __DATA_NUM )  + __i ) ] =  ( ((  t.divide(z[11] ,128,BigDecimal.ROUND_HALF_UP) ).setScale(0,RoundingMode.FLOOR)).multiply(z[11], MathContext.DECIMAL128) ) ;
			y3[ (  ( 2 * __DATA_NUM )  + __i ) ] = (  x3[ (  ( 2 * __DATA_NUM )  + __i ) ].divide(z[15] ,128,BigDecimal.ROUND_HALF_UP) .pow(z[16] ));
			y3[ (  ( 3 * __DATA_NUM )  + __i ) ] =  ( z[22].multiply( ( x3[ (  ( 12 * __DATA_NUM )  + __i ) ] .add( x3[ (  ( 10 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128).multiply( ( x3[ (  ( 4 * __DATA_NUM )  + __i ) ].subtract(x3[ (  ( 3 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y3[ (  ( 4 * __DATA_NUM )  + __i ) ] =    ( x3[ (  ( 3 * __DATA_NUM )  + __i ) ].subtract(x3[ (  ( 2 * __DATA_NUM )  + __i ) ])) .divide(z[24] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 5 * __DATA_NUM )  + __i ) ] =  (  ( z[27].multiply(x3[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( new BigDecimal(1).subtract(x3[ (  ( 8 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( z[28].multiply(x3[ (  ( 8 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			y3[ (  ( 6 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add(   ( z[31].multiply(z[34], MathContext.DECIMAL128) ) .divide(( ( x3[ (  ( 3 * __DATA_NUM )  + __i ) ] .add( z[34]) ) .pow(2 )) ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( z[33].multiply(z[36], MathContext.DECIMAL128) ) .divide(( ( x3[ (  ( 3 * __DATA_NUM )  + __i ) ] .add( z[36]) ) .pow(2 )) ,128,BigDecimal.ROUND_HALF_UP) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 7 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add(   ( z[31].multiply(z[34], MathContext.DECIMAL128) ) .divide(( ( x3[ (  ( 2 * __DATA_NUM )  + __i ) ] .add( z[34]) ) .pow(2 )) ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( z[33].multiply(z[36], MathContext.DECIMAL128) ) .divide(( ( x3[ (  ( 2 * __DATA_NUM )  + __i ) ] .add( z[36]) ) .pow(2 )) ,128,BigDecimal.ROUND_HALF_UP) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 8 * __DATA_NUM )  + __i ) ] =  (  ( z[39].multiply(( ( x3[ (  ( 3 * __DATA_NUM )  + __i ) ].multiply(new BigDecimal(1000), MathContext.DECIMAL128) ) .pow(z[44] )), MathContext.DECIMAL128).multiply(x3[ (  ( 12 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( z[40].multiply(x3[ (  ( 10 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			y3[ (  ( 9 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(new BigDecimal(1.2), MathContext.DECIMAL128).multiply(new BigDecimal(0.416), MathContext.DECIMAL128).multiply(exp( ( new BigDecimal(0.012).multiply( ( x3[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(new BigDecimal(35))) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 10 * __DATA_NUM )  + __i ) ] =  ( z[48].multiply(y3[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 11 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.6).multiply(new BigDecimal(0.09233), MathContext.DECIMAL128).multiply(x3[ (  ( 3 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 12 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y3[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 13 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y3[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 14 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y3[ (  ( 10 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 15 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y3[ (  ( 10 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 16 * __DATA_NUM )  + __i ) ] = y3[ (  ( 11 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 17 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 12 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 16 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 13 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 18 * __DATA_NUM )  + __i ) ] = new BigDecimal(0.82);
			y3[ (  ( 19 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (   new BigDecimal(0.00336336209452).divide( ( new BigDecimal(0.5).add(exp(  x3[ (  ( 6 * __DATA_NUM )  + __i ) ].divide( (new BigDecimal(-5.53899874036055))  ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) .add( ( new BigDecimal(0.00779046570737).multiply(exp(  x3[ (  ( 6 * __DATA_NUM )  + __i ) ].divide( (new BigDecimal(-49.51039631160386))  ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 20 * __DATA_NUM )  + __i ) ] =  ( z[51].multiply(exp( ( (z[52]).negate() .multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 21 * __DATA_NUM )  + __i ) ] =  ( z[55].multiply(exp( ( z[56].multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 22 * __DATA_NUM )  + __i ) ] = y3[ (  ( 20 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 23 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y3[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 24 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 20 * __DATA_NUM )  + __i ) ].divide(z[57] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 25 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(3).multiply(z[58], MathContext.DECIMAL128).multiply(y3[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[59] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 26 * __DATA_NUM )  + __i ) ] = y3[ (  ( 21 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 27 * __DATA_NUM )  + __i ) ] =  ( z[58].multiply(y3[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 28 * __DATA_NUM )  + __i ) ] =  ( z[60].multiply(y3[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 29 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 26 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 25 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 24 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 31 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 30 * __DATA_NUM )  + __i ) ] =  ( z[73].multiply(exp( ( z[74].multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 31 * __DATA_NUM )  + __i ) ] = z[77];
			y3[ (  ( 32 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y3[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 33 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y3[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 34 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(z[69], MathContext.DECIMAL128).multiply(y3[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 35 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(2).multiply(z[71], MathContext.DECIMAL128).multiply(y3[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[70] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 36 * __DATA_NUM )  + __i ) ] = y3[ (  ( 31 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 37 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 31 * __DATA_NUM )  + __i ) ].divide(z[70] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 38 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 31 * __DATA_NUM )  + __i ) ].divide(z[72] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 39 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 36 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 34 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 40 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 40 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 0 * __DATA_NUM )  + __i ) ].multiply(ln(   z[9].divide(x3[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 41 * __DATA_NUM )  + __i ) ] =  ( z[8].add( ( new BigDecimal(0.01833).multiply(z[9], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 42 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.5).multiply(y3[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(ln(   z[10].divide(x3[ (  ( 2 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 43 * __DATA_NUM )  + __i ) ] =  ( z[85].multiply(z[84], MathContext.DECIMAL128).multiply(new BigDecimal(0.1), MathContext.DECIMAL128) ) ;
			y3[ (  ( 44 * __DATA_NUM )  + __i ) ] = sqrt(   z[8].divide(new BigDecimal(4) ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE);
			y3[ (  ( 45 * __DATA_NUM )  + __i ) ] =   x3[ (  ( 6 * __DATA_NUM )  + __i ) ].divide(y3[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 46 * __DATA_NUM )  + __i ) ] =  (  ( x3[ (  ( 1 * __DATA_NUM )  + __i ) ].multiply(exp(y3[ (  ( 45 * __DATA_NUM )  + __i ) ],__SCALE), MathContext.DECIMAL128) ) .subtract(z[8])) ;
			y3[ (  ( 47 * __DATA_NUM )  + __i ) ] =  (  ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].multiply(exp(y3[ (  ( 45 * __DATA_NUM )  + __i ) ],__SCALE), MathContext.DECIMAL128) ) .subtract(z[9])) ;
			y3[ (  ( 48 * __DATA_NUM )  + __i ) ] =  ( z[83].multiply( ( x3[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 40 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y3[ (  ( 49 * __DATA_NUM )  + __i ) ] =    ( z[94].multiply(x3[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide( ( z[95] .add( x3[ (  ( 2 * __DATA_NUM )  + __i ) ]) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 50 * __DATA_NUM )  + __i ) ] =    ( exp(  z[9].divide(new BigDecimal(67.3) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE).subtract(new BigDecimal(1))) .divide(new BigDecimal(7) ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 51 * __DATA_NUM )  + __i ) ] =   z[8].divide( ( z[8] .add( z[93]) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 52 * __DATA_NUM )  + __i ) ] =  ( z[88] .add( z[10]) ) ;
			y3[ (  ( 53 * __DATA_NUM )  + __i ) ] =  ( z[98].multiply((double)4.574E-7, MathContext.DECIMAL128) ) ;
			y3[ (  ( 54 * __DATA_NUM )  + __i ) ] =   x3[ (  ( 6 * __DATA_NUM )  + __i ) ].divide(y3[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 55 * __DATA_NUM )  + __i ) ] =  (  ( (double)1.0E-3.multiply(exp( ( new BigDecimal(2).multiply(y3[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .subtract( ( z[10].multiply(new BigDecimal(0.341), MathContext.DECIMAL128) ) )) ;
			y3[ (  ( 56 * __DATA_NUM )  + __i ) ] =  (  ( x3[ (  ( 1 * __DATA_NUM )  + __i ) ].multiply(exp(y3[ (  ( 54 * __DATA_NUM )  + __i ) ],__SCALE), MathContext.DECIMAL128) ) .subtract(z[8])) ;
			y3[ (  ( 57 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide(y3[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 58 * __DATA_NUM )  + __i ) ] =  ( z[2].multiply(z[99], MathContext.DECIMAL128) ) ;
			y3[ (  ( 59 * __DATA_NUM )  + __i ) ] = new BigDecimal(1.38862291252871);
			y3[ (  ( 60 * __DATA_NUM )  + __i ) ] = new BigDecimal(1.40042625477401);
			y3[ (  ( 61 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(new BigDecimal(0.02608362043337), MathContext.DECIMAL128) ) ;
			y3[ (  ( 62 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[101], MathContext.DECIMAL128).multiply(exp( ( z[102].multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 63 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[105], MathContext.DECIMAL128).multiply(exp( ( z[106].multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 64 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[109], MathContext.DECIMAL128).multiply(exp( ( z[110].multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 65 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[113], MathContext.DECIMAL128).multiply(exp( ( z[114].multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 66 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 65 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 64 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 61 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 67 * __DATA_NUM )  + __i ) ] = new BigDecimal(0.00795600798004);
			y3[ (  ( 68 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.00767254363063).multiply(exp( ( new BigDecimal(0.08662945914655).multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 69 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.00379737998368).multiply(exp( (  (new BigDecimal(-0.01425668126881)) .multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 70 * __DATA_NUM )  + __i ) ] =  ( z[3].multiply((double)1.0E-3, MathContext.DECIMAL128) ) ;
			y3[ (  ( 71 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 70 * __DATA_NUM )  + __i ) ].divide( ( new BigDecimal(2).multiply(z[7], MathContext.DECIMAL128).multiply(z[0], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 72 * __DATA_NUM )  + __i ) ] =  (  (  (  ( t.subtract(y3[ (  ( 1 * __DATA_NUM )  + __i ) ]))  .compareTo(z[14])>=0)  &&  (  ( t.subtract(y3[ (  ( 1 * __DATA_NUM )  + __i ) ])) .compareTo( ( z[14] .add( z[12]) ) )<=0)  )  ? z[13] : new BigDecimal(0) ) ;
			y3[ (  ( 73 * __DATA_NUM )  + __i ) ] =    ( x3[ (  ( 5 * __DATA_NUM )  + __i ) ].subtract(x3[ (  ( 4 * __DATA_NUM )  + __i ) ])) .divide(z[23] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 74 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add(   ( z[32].multiply(z[35], MathContext.DECIMAL128) ) .divide(( ( x3[ (  ( 4 * __DATA_NUM )  + __i ) ] .add( z[35]) ) .pow(2 )) ,128,BigDecimal.ROUND_HALF_UP) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 75 * __DATA_NUM )  + __i ) ] =  (  ( z[41].multiply(x3[ (  ( 12 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( z[42].multiply(x3[ (  ( 11 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			y3[ (  ( 76 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(new BigDecimal(0.45), MathContext.DECIMAL128).multiply(new BigDecimal(0.049), MathContext.DECIMAL128).multiply(exp( (  (new BigDecimal(-0.065)) .multiply( ( x3[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(new BigDecimal(22))) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 77 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.25).multiply(new BigDecimal(0.01), MathContext.DECIMAL128) ) ;
			y3[ (  ( 78 * __DATA_NUM )  + __i ) ] = y3[ (  ( 9 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 79 * __DATA_NUM )  + __i ) ] = y3[ (  ( 10 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 80 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y3[ (  ( 76 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 81 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y3[ (  ( 76 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 82 * __DATA_NUM )  + __i ) ] =  ( z[48].multiply(y3[ (  ( 16 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 83 * __DATA_NUM )  + __i ) ] = y3[ (  ( 77 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 84 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 14 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 83 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 19 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 85 * __DATA_NUM )  + __i ) ] =  (  (   y3[ (  ( 18 * __DATA_NUM )  + __i ) ].divide( ( new BigDecimal(1).add(exp(   ( x3[ (  ( 6 * __DATA_NUM )  + __i ) ].add(new BigDecimal(28.5)) ) .divide(new BigDecimal(7.8) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) .add(new BigDecimal(1)) ) .subtract(y3[ (  ( 18 * __DATA_NUM )  + __i ) ])) ;
			y3[ (  ( 86 * __DATA_NUM )  + __i ) ] =  ( z[53].multiply(exp( ( (z[54]).negate() .multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 87 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y3[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 88 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(2).multiply(z[57], MathContext.DECIMAL128).multiply(y3[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[58] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 89 * __DATA_NUM )  + __i ) ] =  ( z[57].multiply(y3[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 90 * __DATA_NUM )  + __i ) ] = y3[ (  ( 86 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 91 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 86 * __DATA_NUM )  + __i ) ].divide(z[62] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 92 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 86 * __DATA_NUM )  + __i ) ].divide(z[64] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 93 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 22 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 26 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 90 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 94 * __DATA_NUM )  + __i ) ] =  ( z[75].multiply(exp( ( (z[76]).negate() .multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 95 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y3[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 96 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(3).multiply(z[70], MathContext.DECIMAL128).multiply(y3[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[69] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 97 * __DATA_NUM )  + __i ) ] = y3[ (  ( 94 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 98 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y3[ (  ( 94 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 99 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 94 * __DATA_NUM )  + __i ) ].divide(z[65] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 100 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(3).multiply(z[66], MathContext.DECIMAL128).multiply(y3[ (  ( 94 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[67] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 101 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 31 * __DATA_NUM )  + __i ) ].divide(z[69] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 102 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 97 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 36 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 36 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 40 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 103 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 98 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 38 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 37 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 42 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 95 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 36 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 104 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 96 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 101 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 99 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 41 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 105 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 0 * __DATA_NUM )  + __i ) ].multiply(ln(   z[8].divide(x3[ (  ( 1 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 106 * __DATA_NUM )  + __i ) ] =  (  ( new BigDecimal(1).subtract(z[85])) .multiply(z[84], MathContext.DECIMAL128).multiply((double)4.2986E-7, MathContext.DECIMAL128) ) ;
			y3[ (  ( 107 * __DATA_NUM )  + __i ) ] =  ( z[79].multiply(y3[ (  ( 44 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x3[ (  ( 61 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x3[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 105 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y3[ (  ( 108 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 43 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 29 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x3[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 105 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y3[ (  ( 109 * __DATA_NUM )  + __i ) ] =  ( exp(y3[ (  ( 45 * __DATA_NUM )  + __i ) ],__SCALE).subtract(new BigDecimal(1))) ;
			y3[ (  ( 110 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(0.94).add(exp( (   new BigDecimal(1.26).divide(y3[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( x3[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 105 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 111 * __DATA_NUM )  + __i ) ] =  ( z[96].multiply( ( x3[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 42 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y3[ (  ( 112 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(1).add((  z[92].divide(x3[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .pow(1.5 ))) ) ;
			y3[ (  ( 113 * __DATA_NUM )  + __i ) ] =    ( (z[87].pow(3 )).add((z[9].pow(3 ))) ) .divide(new BigDecimal(5000) ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 114 * __DATA_NUM )  + __i ) ] =  ( z[98].multiply((double)2.469E-4, MathContext.DECIMAL128) ) ;
			y3[ (  ( 115 * __DATA_NUM )  + __i ) ] =  ( exp( ( new BigDecimal(2).multiply(y3[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE).subtract(new BigDecimal(1))) ;
			y3[ (  ( 116 * __DATA_NUM )  + __i ) ] =  ( exp(y3[ (  ( 54 * __DATA_NUM )  + __i ) ],__SCALE).subtract(new BigDecimal(1))) ;
			y3[ (  ( 117 * __DATA_NUM )  + __i ) ] =    ( (double)1.381E-23.multiply(z[99], MathContext.DECIMAL128) ) .divide((double)6.626E-31 ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 118 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-85800.3675578326)) .divide(y3[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(70.078).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 119 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-287913.446530953)) .divide(y3[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(786.217).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 120 * __DATA_NUM )  + __i ) ] = y3[ (  ( 118 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 121 * __DATA_NUM )  + __i ) ] = y3[ (  ( 119 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 122 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(new BigDecimal(0.14832978132145), MathContext.DECIMAL128) ) ;
			y3[ (  ( 123 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[107], MathContext.DECIMAL128).multiply(exp( ( z[108].multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 124 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 62 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 58 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 122 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 125 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 65 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 63 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 122 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 126 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 123 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 64 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 61 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 127 * __DATA_NUM )  + __i ) ] = new BigDecimal(0.03966720676071);
			y3[ (  ( 128 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.2162557589585).multiply(exp( (  (new BigDecimal(-0.00001889123021)) .multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 129 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 70 * __DATA_NUM )  + __i ) ].divide( ( z[4].multiply(z[0], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 130 * __DATA_NUM )  + __i ) ] = (  x3[ (  ( 5 * __DATA_NUM )  + __i ) ].divide(z[17] ,128,BigDecimal.ROUND_HALF_UP) .pow(z[18] ));
			y3[ (  ( 131 * __DATA_NUM )  + __i ) ] =  (  ( z[29].multiply(x3[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( new BigDecimal(1).subtract(x3[ (  ( 7 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( z[30].multiply(x3[ (  ( 7 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			y3[ (  ( 132 * __DATA_NUM )  + __i ) ] =  (  ( (z[37]).negate() .multiply(( ( x3[ (  ( 3 * __DATA_NUM )  + __i ) ].multiply(new BigDecimal(1000), MathContext.DECIMAL128) ) .pow(z[43] )), MathContext.DECIMAL128).multiply(x3[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( z[38].multiply(x3[ (  ( 12 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 133 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 76 * __DATA_NUM )  + __i ) ].divide(z[47] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 134 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y3[ (  ( 10 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 135 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y3[ (  ( 76 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 136 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y3[ (  ( 133 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 137 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y3[ (  ( 133 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 138 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 83 * __DATA_NUM )  + __i ) ].divide(z[47] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 139 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 12 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 13 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 80 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 15 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 138 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 140 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 14 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 19 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 136 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 82 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 14 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 141 * __DATA_NUM )  + __i ) ] =  ( z[49].multiply(exp( ( z[50].multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 142 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y3[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 143 * __DATA_NUM )  + __i ) ] = y3[ (  ( 141 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 144 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(3).multiply(z[62], MathContext.DECIMAL128).multiply(y3[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[61] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 145 * __DATA_NUM )  + __i ) ] =    ( z[64].multiply(y3[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[63] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 146 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(4).multiply(z[59], MathContext.DECIMAL128).multiply(y3[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[60] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 147 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 86 * __DATA_NUM )  + __i ) ].divide(z[61] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 148 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 142 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 22 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 89 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 26 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 149 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 23 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 28 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 91 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 32 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 142 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 26 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 150 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 143 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 28 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 92 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 34 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 151 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 144 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 147 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 24 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 31 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 152 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 25 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 33 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 27 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 27 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 144 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 31 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 153 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 92 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 146 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 34 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 154 * __DATA_NUM )  + __i ) ] = z[78];
			y3[ (  ( 155 * __DATA_NUM )  + __i ) ] =    ( z[72].multiply(y3[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[71] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 156 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y3[ (  ( 94 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 157 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(4).multiply(z[67], MathContext.DECIMAL128).multiply(y3[ (  ( 94 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[68] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 158 * __DATA_NUM )  + __i ) ] =  ( z[65].multiply(y3[ (  ( 154 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 159 * __DATA_NUM )  + __i ) ] =  ( z[67].multiply(y3[ (  ( 154 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 160 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 31 * __DATA_NUM )  + __i ) ].divide(z[71] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 161 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 95 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 97 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 158 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 36 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 162 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 156 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 39 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 160 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 43 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 33 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 37 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 163 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 155 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 160 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 100 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 43 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 164 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 38 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 157 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 44 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 165 * __DATA_NUM )  + __i ) ] =  ( x3[ (  ( 1 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(0.01833).multiply(x3[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 166 * __DATA_NUM )  + __i ) ] =  ( z[82].multiply( ( x3[ (  ( 50 * __DATA_NUM )  + __i ) ] .add( x3[ (  ( 51 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128).multiply( ( x3[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 40 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y3[ (  ( 167 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(1000).multiply(z[0], MathContext.DECIMAL128).multiply(y3[ (  ( 45 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 168 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.02).multiply(y3[ (  ( 106 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x3[ (  ( 39 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y3[ (  ( 167 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y3[ (  ( 47 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y3[ (  ( 109 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 169 * __DATA_NUM )  + __i ) ] =  ( z[81].multiply(sqrt(   z[8].divide(new BigDecimal(1) ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128).multiply(y3[ (  ( 110 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x3[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 105 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y3[ (  ( 170 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(1000).multiply(z[0], MathContext.DECIMAL128).multiply(y3[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 171 * __DATA_NUM )  + __i ) ] =    ( z[2].multiply(z[99], MathContext.DECIMAL128) ) .divide(z[0] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 172 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-272470.273489681)) .divide(y3[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(708.146).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   (  (new BigDecimal(-2.28528417586424)) .multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y3[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 173 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-133689.9304091)) .divide(y3[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(229.205).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   (  (new BigDecimal(-1.55804214553883)) .multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y3[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 174 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-97657.8497137015)) .divide(y3[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(1.51).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( new BigDecimal(0.0684861993100685).multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y3[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 175 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-55700.6624658307)) .divide(y3[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(   (new BigDecimal(-130.639)) .divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   (  (new BigDecimal(-3.64981672927078)) .multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y3[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 176 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-147813.990005035)) .divide(y3[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(338.915).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( new BigDecimal(2.1360043702126).multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y3[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 177 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-59565.2236284584)) .divide(y3[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(0.00711).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 178 * __DATA_NUM )  + __i ) ] = y3[ (  ( 176 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 179 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y3[ (  ( 172 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 180 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y3[ (  ( 172 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 181 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 179 * __DATA_NUM )  + __i ) ].divide(y3[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 182 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 180 * __DATA_NUM )  + __i ) ].divide(y3[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 183 * __DATA_NUM )  + __i ) ] = y3[ (  ( 177 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 184 * __DATA_NUM )  + __i ) ] = y3[ (  ( 174 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 185 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[103], MathContext.DECIMAL128).multiply(exp( ( z[104].multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 186 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 185 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 61 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 59 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 187 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.00700806628929).multiply(exp( (  (new BigDecimal(-0.14999754700285)) .multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 188 * __DATA_NUM )  + __i ) ] =    ( z[19].multiply( (  ( z[20].multiply(y3[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( z[21].multiply(y3[ (  ( 130 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) , MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1) .add( y3[ (  ( 2 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 130 * __DATA_NUM )  + __i ) ]) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 189 * __DATA_NUM )  + __i ) ] = ( ( y3[ (  ( 132 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 8 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 75 * __DATA_NUM )  + __i ) ]) ) ).negate() ;
			y3[ (  ( 190 * __DATA_NUM )  + __i ) ] = y3[ (  ( 76 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 191 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y3[ (  ( 133 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 192 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 138 * __DATA_NUM )  + __i ) ].divide(z[47] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 193 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 190 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 14 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 83 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 19 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 194 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 136 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 15 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 192 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 195 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y3[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 196 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(z[61], MathContext.DECIMAL128).multiply(y3[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 197 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y3[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 198 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 86 * __DATA_NUM )  + __i ) ].divide(z[63] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 199 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 87 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 27 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 147 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 31 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 195 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 25 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 200 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 197 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 28 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 29 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 201 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 88 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 32 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 89 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 26 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 196 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 202 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 145 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 198 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 25 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 33 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 203 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 28 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 29 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 145 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 33 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 204 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y3[ (  ( 94 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 205 * __DATA_NUM )  + __i ) ] = y3[ (  ( 154 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 206 * __DATA_NUM )  + __i ) ] =  ( z[68].multiply(y3[ (  ( 154 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 207 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 204 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 37 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 101 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 41 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 32 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 35 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 208 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 156 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 206 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 39 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 209 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 205 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 35 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 99 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 41 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 210 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 157 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 44 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 159 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 38 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 35 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 42 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 211 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 0 * __DATA_NUM )  + __i ) ].multiply(ln(   y3[ (  ( 41 * __DATA_NUM )  + __i ) ].divide(y3[ (  ( 165 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 212 * __DATA_NUM )  + __i ) ] =    ( y3[ (  ( 106 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 39 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y3[ (  ( 167 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y3[ (  ( 46 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y3[ (  ( 109 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 213 * __DATA_NUM )  + __i ) ] =   x3[ (  ( 6 * __DATA_NUM )  + __i ) ].divide(y3[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 214 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.0365).multiply(y3[ (  ( 50 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (  (new BigDecimal(-1.33)) .multiply(y3[ (  ( 213 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 215 * __DATA_NUM )  + __i ) ] =  ( exp( ( z[90].multiply(y3[ (  ( 213 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE).multiply((x3[ (  ( 0 * __DATA_NUM )  + __i ) ].pow(3 )), MathContext.DECIMAL128).multiply(z[10], MathContext.DECIMAL128) ) ;
			y3[ (  ( 216 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(1).add( ( z[89].multiply(exp( (  ( z[90].subtract(new BigDecimal(1))) .multiply(y3[ (  ( 213 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 217 * __DATA_NUM )  + __i ) ] =    ( y3[ (  ( 114 * __DATA_NUM )  + __i ) ].multiply(new BigDecimal(4), MathContext.DECIMAL128).multiply(y3[ (  ( 170 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y3[ (  ( 55 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y3[ (  ( 115 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 218 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 217 * __DATA_NUM )  + __i ) ] .compareTo(new BigDecimal(0))>=0)  ? new BigDecimal(0) : y3[ (  ( 217 * __DATA_NUM )  + __i ) ] ) ;
			y3[ (  ( 219 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-114007.462700232)) .divide(y3[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(224.114).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( new BigDecimal(0.286374268596235).multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y3[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 220 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-62123.0784380481)) .divide(y3[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(39.295).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( new BigDecimal(0.288816042743232).multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y3[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 221 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-121955.166154864)) .divide(y3[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(225.175).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 222 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y3[ (  ( 219 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 223 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y3[ (  ( 219 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 224 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 222 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 225 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 223 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 226 * __DATA_NUM )  + __i ) ] = y3[ (  ( 172 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 227 * __DATA_NUM )  + __i ) ] = y3[ (  ( 173 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 228 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 226 * __DATA_NUM )  + __i ) ].divide(y3[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 229 * __DATA_NUM )  + __i ) ] = y3[ (  ( 175 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 230 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 183 * __DATA_NUM )  + __i ) ].divide(y3[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 231 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 121 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 232 * __DATA_NUM )  + __i ) ] = y3[ (  ( 220 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 233 * __DATA_NUM )  + __i ) ] =  (  ( z[25].multiply(y3[ (  ( 131 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( z[26].multiply(y3[ (  ( 5 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 234 * __DATA_NUM )  + __i ) ] = y3[ (  ( 133 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 235 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 192 * __DATA_NUM )  + __i ) ].divide(z[47] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 236 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 13 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 15 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 81 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 17 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 235 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 22 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 237 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 234 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 16 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 13 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 238 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 191 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 79 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 235 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 22 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 239 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y3[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 240 * __DATA_NUM )  + __i ) ] =  ( z[59].multiply(y3[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 241 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 239 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 87 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 27 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 27 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 242 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 197 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 29 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 198 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 33 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 239 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 27 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 243 * __DATA_NUM )  + __i ) ] = y3[ (  ( 30 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 244 * __DATA_NUM )  + __i ) ] =  ( z[66].multiply(y3[ (  ( 154 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 245 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 33 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 204 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 244 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 37 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 246 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 243 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 38 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 38 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 44 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 247 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 100 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 43 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 244 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 37 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 96 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 41 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 248 * __DATA_NUM )  + __i ) ] =  ( z[80].multiply( ( x3[ (  ( 65 * __DATA_NUM )  + __i ) ] .add( x3[ (  ( 66 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128).multiply( ( x3[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 105 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y3[ (  ( 249 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(1).add( ( new BigDecimal(0.1245).multiply(exp( (  (new BigDecimal(-0.1)) .multiply(y3[ (  ( 213 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 250 * __DATA_NUM )  + __i ) ] =  ( exp( (  ( z[90].subtract(new BigDecimal(1))) .multiply(y3[ (  ( 213 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE).multiply((z[9].pow(3 )), MathContext.DECIMAL128).multiply(x3[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 251 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 217 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 24 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x3[ (  ( 18 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 252 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-196336.575735923)) .divide(y3[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(529.952).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( new BigDecimal(2.78084918596045).multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y3[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 253 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-121322.143275242)) .divide(y3[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(193.265).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   (  (new BigDecimal(-1.74290267020903)) .multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y3[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 254 * __DATA_NUM )  + __i ) ] = y3[ (  ( 219 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 255 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 254 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 256 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y3[ (  ( 172 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 257 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 256 * __DATA_NUM )  + __i ) ].divide(y3[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 258 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 230 * __DATA_NUM )  + __i ) ].divide(y3[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 259 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 231 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 260 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[111], MathContext.DECIMAL128).multiply(exp( ( z[112].multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 261 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 63 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 260 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 62 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 262 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y3[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 263 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 235 * __DATA_NUM )  + __i ) ].divide(z[47] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 264 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 262 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 14 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 135 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 16 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 192 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 265 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 78 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 16 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( z[46].multiply(x3[ (  ( 18 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 263 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 23 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 266 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 137 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 263 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 23 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 267 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(2).multiply(z[63], MathContext.DECIMAL128).multiply(y3[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[62] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 268 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 143 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 23 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 240 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 28 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 269 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 267 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 91 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 88 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 32 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 270 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(2).multiply(z[65], MathContext.DECIMAL128).multiply(y3[ (  ( 94 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[66] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 271 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 243 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 98 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 159 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 38 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 272 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 35 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 37 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 270 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 42 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 273 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 212 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 168 * __DATA_NUM )  + __i ) ]) ) ;
			y3[ (  ( 274 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( y3[ (  ( 249 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 214 * __DATA_NUM )  + __i ) ]) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 275 * __DATA_NUM )  + __i ) ] =    ( z[86].multiply( ( y3[ (  ( 215 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 250 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .divide( ( y3[ (  ( 52 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 216 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y3[ (  ( 113 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 276 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (   new BigDecimal(116431.142142348).divide(y3[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(   (new BigDecimal(-578.317)) .divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( new BigDecimal(0.764126011745707).multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y3[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 277 * __DATA_NUM )  + __i ) ] = y3[ (  ( 252 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 278 * __DATA_NUM )  + __i ) ] = y3[ (  ( 276 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 279 * __DATA_NUM )  + __i ) ] = y3[ (  ( 253 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 280 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 259 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 281 * __DATA_NUM )  + __i ) ] =    ( y3[ (  ( 123 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 260 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y3[ (  ( 65 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide( ( y3[ (  ( 63 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 64 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 282 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 281 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 260 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 62 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 283 * __DATA_NUM )  + __i ) ] =  ( z[48].multiply(y3[ (  ( 82 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 284 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 190 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 262 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 82 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 14 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 285 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 234 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 134 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 138 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 286 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 195 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 26 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 25 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 287 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 146 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 34 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 240 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 28 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 267 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 32 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 288 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 270 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 42 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 158 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 36 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 34 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 40 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 289 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 108 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 273 * __DATA_NUM )  + __i ) ]) ) ;
			y3[ (  ( 290 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 53 * __DATA_NUM )  + __i ) ].divide( ( new BigDecimal(1).add(  y3[ (  ( 218 * __DATA_NUM )  + __i ) ].divide(z[97] ,128,BigDecimal.ROUND_HALF_UP) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 291 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y3[ (  ( 219 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 292 * __DATA_NUM )  + __i ) ] = y3[ (  ( 221 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 293 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 280 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 294 * __DATA_NUM )  + __i ) ] =  ( z[48].multiply(y3[ (  ( 283 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 295 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 80 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 13 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 283 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 15 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 296 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 134 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 191 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 22 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 283 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 15 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 297 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 90 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 196 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 298 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 206 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 39 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 155 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 43 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 299 * __DATA_NUM )  + __i ) ] =    ( y3[ (  ( 290 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 18 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x3[ (  ( 24 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y3[ (  ( 170 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y3[ (  ( 56 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y3[ (  ( 116 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 300 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 258 * __DATA_NUM )  + __i ) ].divide(y3[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 301 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 61 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 59 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 123 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 61 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 281 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 62 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 302 * __DATA_NUM )  + __i ) ] =  ( z[48].multiply(y3[ (  ( 294 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 303 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 81 * __DATA_NUM )  + __i ) ] .add( z[45]) .add( y3[ (  ( 302 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 17 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 304 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 79 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 22 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 302 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 17 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 305 * __DATA_NUM )  + __i ) ] =    ( z[91].multiply(y3[ (  ( 274 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y3[ (  ( 51 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y3[ (  ( 112 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 306 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 300 * __DATA_NUM )  + __i ) ].divide(y3[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 307 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 166 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 251 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 299 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 107 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 248 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 169 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 275 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 305 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 289 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 49 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 111 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 48 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 72 * __DATA_NUM )  + __i ) ]) ) ;
			y3[ (  ( 308 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 15 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 137 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 23 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 294 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 16 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 309 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 291 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 310 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 135 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 78 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 294 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 16 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y3[ (  ( 311 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 32 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 205 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 35 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			k3[ (  ( 0 * __DATA_NUM )  + __i ) ] =  ( ( ( y3[ (  ( 166 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 48 * __DATA_NUM )  + __i ) ]).add( ( new BigDecimal(3).multiply( ( y3[ (  ( 275 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 305 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) .add( y3[ (  ( 168 * __DATA_NUM )  + __i ) ]) ) ).negate() .multiply(y3[ (  ( 129 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			k3[ (  ( 1 * __DATA_NUM )  + __i ) ] =  ( ( (  (  ( y3[ (  ( 107 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 248 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 169 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 299 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 72 * __DATA_NUM )  + __i ) ]) ) .subtract( ( new BigDecimal(2).multiply(y3[ (  ( 305 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ))  .add( y3[ (  ( 108 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 212 * __DATA_NUM )  + __i ) ]) ) ).negate() .multiply(y3[ (  ( 129 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			k3[ (  ( 2 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 7 * __DATA_NUM )  + __i ) ].multiply( (  (  ( y3[ (  ( 4 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 188 * __DATA_NUM )  + __i ) ])) .subtract(y3[ (  ( 233 * __DATA_NUM )  + __i ) ])) .subtract( (  (  ( y3[ (  ( 111 * __DATA_NUM )  + __i ) ].subtract( ( new BigDecimal(2).multiply(y3[ (  ( 275 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ))  .add( y3[ (  ( 49 * __DATA_NUM )  + __i ) ]) ) .multiply(new BigDecimal(0.5), MathContext.DECIMAL128).multiply(y3[ (  ( 129 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) , MathContext.DECIMAL128) ) ;
			k3[ (  ( 3 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 6 * __DATA_NUM )  + __i ) ].multiply( (  (    ( y3[ (  ( 3 * __DATA_NUM )  + __i ) ].multiply(z[5], MathContext.DECIMAL128) ) .divide(z[7] ,128,BigDecimal.ROUND_HALF_UP) .subtract(   ( y3[ (  ( 4 * __DATA_NUM )  + __i ) ].multiply(z[4], MathContext.DECIMAL128) ) .divide(z[7] ,128,BigDecimal.ROUND_HALF_UP) )) .subtract( ( y3[ (  ( 251 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 71 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) , MathContext.DECIMAL128) ) ;
			k3[ (  ( 4 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 74 * __DATA_NUM )  + __i ) ].multiply( ( y3[ (  ( 73 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 3 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			k3[ (  ( 5 * __DATA_NUM )  + __i ) ] =  (    ( y3[ (  ( 188 * __DATA_NUM )  + __i ) ].multiply(z[4], MathContext.DECIMAL128) ) .divide(z[6] ,128,BigDecimal.ROUND_HALF_UP) .subtract(   ( y3[ (  ( 73 * __DATA_NUM )  + __i ) ].multiply(z[5], MathContext.DECIMAL128) ) .divide(z[6] ,128,BigDecimal.ROUND_HALF_UP) )) ;
			k3[ (  ( 6 * __DATA_NUM )  + __i ) ] = (y3[ (  ( 307 * __DATA_NUM )  + __i ) ]).negate() ;
			k3[ (  ( 7 * __DATA_NUM )  + __i ) ] = y3[ (  ( 131 * __DATA_NUM )  + __i ) ];
			k3[ (  ( 8 * __DATA_NUM )  + __i ) ] = y3[ (  ( 5 * __DATA_NUM )  + __i ) ];
			k3[ (  ( 9 * __DATA_NUM )  + __i ) ] = y3[ (  ( 132 * __DATA_NUM )  + __i ) ];
			k3[ (  ( 10 * __DATA_NUM )  + __i ) ] = y3[ (  ( 8 * __DATA_NUM )  + __i ) ];
			k3[ (  ( 11 * __DATA_NUM )  + __i ) ] = y3[ (  ( 75 * __DATA_NUM )  + __i ) ];
			k3[ (  ( 12 * __DATA_NUM )  + __i ) ] = y3[ (  ( 189 * __DATA_NUM )  + __i ) ];
			k3[ (  ( 13 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 193 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 17 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 14 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 139 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 284 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 15 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 264 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 295 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 16 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 236 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 310 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 17 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 265 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 303 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 18 * __DATA_NUM )  + __i ) ] =  (  ( z[45].multiply(x3[ (  ( 17 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( z[46].multiply(x3[ (  ( 18 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k3[ (  ( 19 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 237 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 84 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 20 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 140 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 285 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 21 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 296 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 194 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 22 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 308 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 238 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 23 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 304 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 266 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 24 * __DATA_NUM )  + __i ) ] =    ( y3[ (  ( 85 * __DATA_NUM )  + __i ) ].subtract(x3[ (  ( 24 * __DATA_NUM )  + __i ) ])) .divide(y3[ (  ( 19 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			k3[ (  ( 25 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 93 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 286 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 26 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 199 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 148 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 27 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 149 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 241 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 28 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 242 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 268 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 29 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 150 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 200 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 30 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 29 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 297 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 31 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 201 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 151 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 32 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 152 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 269 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 33 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 287 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 202 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 34 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 203 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 153 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 35 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 102 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 311 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 36 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 207 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 161 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 37 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 103 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 245 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 38 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 162 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 271 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 39 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 246 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 208 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 40 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 209 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 39 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 41 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 288 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 104 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 42 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 247 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 272 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 43 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 210 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 163 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 44 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 298 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 164 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 45 * __DATA_NUM )  + __i ) ] =  (  ( ( ( y3[ (  ( 121 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 222 * __DATA_NUM )  + __i ) ]) ) ).negate() .multiply(x3[ (  ( 45 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 226 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 46 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 183 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 52 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k3[ (  ( 46 * __DATA_NUM )  + __i ) ] =  (  (  ( y3[ (  ( 222 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 45 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y3[ (  ( 226 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 291 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 231 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 46 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y3[ (  ( 179 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 47 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 230 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 53 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k3[ (  ( 47 * __DATA_NUM )  + __i ) ] =  (  (  ( y3[ (  ( 291 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 46 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y3[ (  ( 179 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 223 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 259 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 47 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y3[ (  ( 256 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 48 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 258 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k3[ (  ( 48 * __DATA_NUM )  + __i ) ] =  (  (  ( y3[ (  ( 223 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 47 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y3[ (  ( 256 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 254 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 280 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 48 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y3[ (  ( 180 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 49 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 300 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 55 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k3[ (  ( 49 * __DATA_NUM )  + __i ) ] =  (  (  ( y3[ (  ( 254 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 48 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y3[ (  ( 180 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 277 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 178 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 293 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 49 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y3[ (  ( 227 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 50 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 279 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 51 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 306 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 56 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k3[ (  ( 50 * __DATA_NUM )  + __i ) ] =  (  (  ( y3[ (  ( 277 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 49 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y3[ (  ( 227 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 120 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 232 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 50 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y3[ (  ( 292 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 51 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y3[ (  ( 184 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 57 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k3[ (  ( 51 * __DATA_NUM )  + __i ) ] =  (  (  ( y3[ (  ( 178 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 49 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 120 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 50 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( (  ( y3[ (  ( 279 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 292 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 51 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k3[ (  ( 52 * __DATA_NUM )  + __i ) ] =  (  (  ( y3[ (  ( 121 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 45 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y3[ (  ( 183 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 224 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 52 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y3[ (  ( 228 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 53 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k3[ (  ( 53 * __DATA_NUM )  + __i ) ] =  (  (  (  ( y3[ (  ( 231 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 46 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 224 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 52 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( (  ( y3[ (  ( 228 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 230 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 309 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 53 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y3[ (  ( 181 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k3[ (  ( 54 * __DATA_NUM )  + __i ) ] =  (  (  (  ( y3[ (  ( 259 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 47 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 309 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 53 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( (  ( y3[ (  ( 225 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 258 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 181 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y3[ (  ( 257 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 55 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k3[ (  ( 55 * __DATA_NUM )  + __i ) ] =  (  (  (  ( y3[ (  ( 280 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 48 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 225 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( (  ( y3[ (  ( 257 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 300 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 255 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 55 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y3[ (  ( 182 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 56 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k3[ (  ( 56 * __DATA_NUM )  + __i ) ] =  (  (  (  ( y3[ (  ( 293 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 49 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 255 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 55 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( (  ( y3[ (  ( 182 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 306 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 278 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 56 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y3[ (  ( 229 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 57 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k3[ (  ( 57 * __DATA_NUM )  + __i ) ] =  (  (  ( y3[ (  ( 232 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 50 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 278 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 56 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( (  ( y3[ (  ( 229 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 184 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 57 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k3[ (  ( 58 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 185 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 59 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( y3[ (  ( 62 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 58 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k3[ (  ( 59 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 124 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 186 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 60 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 301 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 125 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 61 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 261 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 126 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 62 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 66 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 282 * __DATA_NUM )  + __i ) ])) ;
			k3[ (  ( 63 * __DATA_NUM )  + __i ) ] =  (  ( (y3[ (  ( 67 * __DATA_NUM )  + __i ) ]).negate() .multiply(x3[ (  ( 63 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y3[ (  ( 128 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 64 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k3[ (  ( 64 * __DATA_NUM )  + __i ) ] =  (  (  ( y3[ (  ( 67 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 63 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y3[ (  ( 128 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 127 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 64 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y3[ (  ( 187 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 65 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k3[ (  ( 65 * __DATA_NUM )  + __i ) ] =  (  (  ( y3[ (  ( 127 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 64 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y3[ (  ( 187 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 68 * __DATA_NUM )  + __i ) ]) ) .multiply(x3[ (  ( 65 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y3[ (  ( 69 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 66 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k3[ (  ( 66 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 68 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 65 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( y3[ (  ( 69 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 66 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			x4[ (  ( 0 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 0 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 1 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 1 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 1 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 2 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 2 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 2 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 3 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 3 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 3 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 4 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 4 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 4 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 5 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 5 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 5 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 6 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 6 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 6 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 7 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 7 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 7 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 8 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 8 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 8 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 9 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 9 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 9 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 10 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 10 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 10 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 11 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 11 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 11 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 12 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 12 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 12 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 13 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 13 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 13 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 14 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 14 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 14 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 15 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 15 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 15 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 16 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 16 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 16 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 17 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 17 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 17 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 18 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 18 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 18 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 19 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 19 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 19 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 20 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 20 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 20 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 21 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 21 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 21 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 22 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 22 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 22 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 23 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 23 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 23 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 24 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 24 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 24 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 25 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 25 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 25 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 26 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 26 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 26 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 27 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 27 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 27 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 28 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 28 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 28 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 29 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 29 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 29 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 30 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 30 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 30 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 31 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 31 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 31 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 32 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 32 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 32 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 33 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 33 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 33 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 34 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 34 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 34 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 35 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 35 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 35 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 36 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 36 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 36 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 37 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 37 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 37 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 38 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 38 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 38 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 39 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 39 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 39 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 40 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 40 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 40 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 41 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 41 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 41 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 42 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 42 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 42 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 43 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 43 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 43 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 44 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 44 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 44 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 45 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 45 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 45 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 46 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 46 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 46 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 47 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 47 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 47 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 48 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 48 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 48 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 49 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 49 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 49 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 50 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 50 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 50 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 51 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 51 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 51 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 52 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 52 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 52 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 53 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 53 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 53 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 54 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 54 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 54 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 55 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 55 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 55 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 56 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 56 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 56 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 57 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 57 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 57 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 58 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 58 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 58 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 59 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 59 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 60 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 60 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 60 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 61 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 61 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 61 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 62 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 62 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 62 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 63 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 63 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 63 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 64 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 64 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 64 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 65 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 65 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 65 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 66 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 66 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 66 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 0 * __DATA_NUM )  + __i ) ] =    ( z[2].multiply(z[1], MathContext.DECIMAL128) ) .divide(z[0] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 1 * __DATA_NUM )  + __i ) ] =  ( ((  t.divide(z[11] ,128,BigDecimal.ROUND_HALF_UP) ).setScale(0,RoundingMode.FLOOR)).multiply(z[11], MathContext.DECIMAL128) ) ;
			y4[ (  ( 2 * __DATA_NUM )  + __i ) ] = (  x4[ (  ( 2 * __DATA_NUM )  + __i ) ].divide(z[15] ,128,BigDecimal.ROUND_HALF_UP) .pow(z[16] ));
			y4[ (  ( 3 * __DATA_NUM )  + __i ) ] =  ( z[22].multiply( ( x4[ (  ( 12 * __DATA_NUM )  + __i ) ] .add( x4[ (  ( 10 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128).multiply( ( x4[ (  ( 4 * __DATA_NUM )  + __i ) ].subtract(x4[ (  ( 3 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y4[ (  ( 4 * __DATA_NUM )  + __i ) ] =    ( x4[ (  ( 3 * __DATA_NUM )  + __i ) ].subtract(x4[ (  ( 2 * __DATA_NUM )  + __i ) ])) .divide(z[24] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 5 * __DATA_NUM )  + __i ) ] =  (  ( z[27].multiply(x4[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( new BigDecimal(1).subtract(x4[ (  ( 8 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( z[28].multiply(x4[ (  ( 8 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			y4[ (  ( 6 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add(   ( z[31].multiply(z[34], MathContext.DECIMAL128) ) .divide(( ( x4[ (  ( 3 * __DATA_NUM )  + __i ) ] .add( z[34]) ) .pow(2 )) ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( z[33].multiply(z[36], MathContext.DECIMAL128) ) .divide(( ( x4[ (  ( 3 * __DATA_NUM )  + __i ) ] .add( z[36]) ) .pow(2 )) ,128,BigDecimal.ROUND_HALF_UP) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 7 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add(   ( z[31].multiply(z[34], MathContext.DECIMAL128) ) .divide(( ( x4[ (  ( 2 * __DATA_NUM )  + __i ) ] .add( z[34]) ) .pow(2 )) ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( z[33].multiply(z[36], MathContext.DECIMAL128) ) .divide(( ( x4[ (  ( 2 * __DATA_NUM )  + __i ) ] .add( z[36]) ) .pow(2 )) ,128,BigDecimal.ROUND_HALF_UP) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 8 * __DATA_NUM )  + __i ) ] =  (  ( z[39].multiply(( ( x4[ (  ( 3 * __DATA_NUM )  + __i ) ].multiply(new BigDecimal(1000), MathContext.DECIMAL128) ) .pow(z[44] )), MathContext.DECIMAL128).multiply(x4[ (  ( 12 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( z[40].multiply(x4[ (  ( 10 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			y4[ (  ( 9 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(new BigDecimal(1.2), MathContext.DECIMAL128).multiply(new BigDecimal(0.416), MathContext.DECIMAL128).multiply(exp( ( new BigDecimal(0.012).multiply( ( x4[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(new BigDecimal(35))) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 10 * __DATA_NUM )  + __i ) ] =  ( z[48].multiply(y4[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 11 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.6).multiply(new BigDecimal(0.09233), MathContext.DECIMAL128).multiply(x4[ (  ( 3 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 12 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y4[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 13 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y4[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 14 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y4[ (  ( 10 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 15 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y4[ (  ( 10 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 16 * __DATA_NUM )  + __i ) ] = y4[ (  ( 11 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 17 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 12 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 16 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 13 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 18 * __DATA_NUM )  + __i ) ] = new BigDecimal(0.82);
			y4[ (  ( 19 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (   new BigDecimal(0.00336336209452).divide( ( new BigDecimal(0.5).add(exp(  x4[ (  ( 6 * __DATA_NUM )  + __i ) ].divide( (new BigDecimal(-5.53899874036055))  ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) .add( ( new BigDecimal(0.00779046570737).multiply(exp(  x4[ (  ( 6 * __DATA_NUM )  + __i ) ].divide( (new BigDecimal(-49.51039631160386))  ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 20 * __DATA_NUM )  + __i ) ] =  ( z[51].multiply(exp( ( (z[52]).negate() .multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 21 * __DATA_NUM )  + __i ) ] =  ( z[55].multiply(exp( ( z[56].multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 22 * __DATA_NUM )  + __i ) ] = y4[ (  ( 20 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 23 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y4[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 24 * __DATA_NUM )  + __i ) ] =   y4[ (  ( 20 * __DATA_NUM )  + __i ) ].divide(z[57] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 25 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(3).multiply(z[58], MathContext.DECIMAL128).multiply(y4[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[59] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 26 * __DATA_NUM )  + __i ) ] = y4[ (  ( 21 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 27 * __DATA_NUM )  + __i ) ] =  ( z[58].multiply(y4[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 28 * __DATA_NUM )  + __i ) ] =  ( z[60].multiply(y4[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 29 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 26 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 25 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 24 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 31 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 30 * __DATA_NUM )  + __i ) ] =  ( z[73].multiply(exp( ( z[74].multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 31 * __DATA_NUM )  + __i ) ] = z[77];
			y4[ (  ( 32 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y4[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 33 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y4[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 34 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(z[69], MathContext.DECIMAL128).multiply(y4[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 35 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(2).multiply(z[71], MathContext.DECIMAL128).multiply(y4[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[70] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 36 * __DATA_NUM )  + __i ) ] = y4[ (  ( 31 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 37 * __DATA_NUM )  + __i ) ] =   y4[ (  ( 31 * __DATA_NUM )  + __i ) ].divide(z[70] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 38 * __DATA_NUM )  + __i ) ] =   y4[ (  ( 31 * __DATA_NUM )  + __i ) ].divide(z[72] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 39 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 36 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 34 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 40 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 40 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 0 * __DATA_NUM )  + __i ) ].multiply(ln(   z[9].divide(x4[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 41 * __DATA_NUM )  + __i ) ] =  ( z[8].add( ( new BigDecimal(0.01833).multiply(z[9], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 42 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.5).multiply(y4[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(ln(   z[10].divide(x4[ (  ( 2 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 43 * __DATA_NUM )  + __i ) ] =  ( z[85].multiply(z[84], MathContext.DECIMAL128).multiply(new BigDecimal(0.1), MathContext.DECIMAL128) ) ;
			y4[ (  ( 44 * __DATA_NUM )  + __i ) ] = sqrt(   z[8].divide(new BigDecimal(4) ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE);
			y4[ (  ( 45 * __DATA_NUM )  + __i ) ] =   x4[ (  ( 6 * __DATA_NUM )  + __i ) ].divide(y4[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 46 * __DATA_NUM )  + __i ) ] =  (  ( x4[ (  ( 1 * __DATA_NUM )  + __i ) ].multiply(exp(y4[ (  ( 45 * __DATA_NUM )  + __i ) ],__SCALE), MathContext.DECIMAL128) ) .subtract(z[8])) ;
			y4[ (  ( 47 * __DATA_NUM )  + __i ) ] =  (  ( x4[ (  ( 0 * __DATA_NUM )  + __i ) ].multiply(exp(y4[ (  ( 45 * __DATA_NUM )  + __i ) ],__SCALE), MathContext.DECIMAL128) ) .subtract(z[9])) ;
			y4[ (  ( 48 * __DATA_NUM )  + __i ) ] =  ( z[83].multiply( ( x4[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 40 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y4[ (  ( 49 * __DATA_NUM )  + __i ) ] =    ( z[94].multiply(x4[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide( ( z[95] .add( x4[ (  ( 2 * __DATA_NUM )  + __i ) ]) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 50 * __DATA_NUM )  + __i ) ] =    ( exp(  z[9].divide(new BigDecimal(67.3) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE).subtract(new BigDecimal(1))) .divide(new BigDecimal(7) ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 51 * __DATA_NUM )  + __i ) ] =   z[8].divide( ( z[8] .add( z[93]) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 52 * __DATA_NUM )  + __i ) ] =  ( z[88] .add( z[10]) ) ;
			y4[ (  ( 53 * __DATA_NUM )  + __i ) ] =  ( z[98].multiply((double)4.574E-7, MathContext.DECIMAL128) ) ;
			y4[ (  ( 54 * __DATA_NUM )  + __i ) ] =   x4[ (  ( 6 * __DATA_NUM )  + __i ) ].divide(y4[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 55 * __DATA_NUM )  + __i ) ] =  (  ( (double)1.0E-3.multiply(exp( ( new BigDecimal(2).multiply(y4[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .subtract( ( z[10].multiply(new BigDecimal(0.341), MathContext.DECIMAL128) ) )) ;
			y4[ (  ( 56 * __DATA_NUM )  + __i ) ] =  (  ( x4[ (  ( 1 * __DATA_NUM )  + __i ) ].multiply(exp(y4[ (  ( 54 * __DATA_NUM )  + __i ) ],__SCALE), MathContext.DECIMAL128) ) .subtract(z[8])) ;
			y4[ (  ( 57 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide(y4[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 58 * __DATA_NUM )  + __i ) ] =  ( z[2].multiply(z[99], MathContext.DECIMAL128) ) ;
			y4[ (  ( 59 * __DATA_NUM )  + __i ) ] = new BigDecimal(1.38862291252871);
			y4[ (  ( 60 * __DATA_NUM )  + __i ) ] = new BigDecimal(1.40042625477401);
			y4[ (  ( 61 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(new BigDecimal(0.02608362043337), MathContext.DECIMAL128) ) ;
			y4[ (  ( 62 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[101], MathContext.DECIMAL128).multiply(exp( ( z[102].multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 63 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[105], MathContext.DECIMAL128).multiply(exp( ( z[106].multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 64 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[109], MathContext.DECIMAL128).multiply(exp( ( z[110].multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 65 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[113], MathContext.DECIMAL128).multiply(exp( ( z[114].multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 66 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 65 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 64 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 61 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 67 * __DATA_NUM )  + __i ) ] = new BigDecimal(0.00795600798004);
			y4[ (  ( 68 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.00767254363063).multiply(exp( ( new BigDecimal(0.08662945914655).multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 69 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.00379737998368).multiply(exp( (  (new BigDecimal(-0.01425668126881)) .multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 70 * __DATA_NUM )  + __i ) ] =  ( z[3].multiply((double)1.0E-3, MathContext.DECIMAL128) ) ;
			y4[ (  ( 71 * __DATA_NUM )  + __i ) ] =   y4[ (  ( 70 * __DATA_NUM )  + __i ) ].divide( ( new BigDecimal(2).multiply(z[7], MathContext.DECIMAL128).multiply(z[0], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 72 * __DATA_NUM )  + __i ) ] =  (  (  (  ( t.subtract(y4[ (  ( 1 * __DATA_NUM )  + __i ) ]))  .compareTo(z[14])>=0)  &&  (  ( t.subtract(y4[ (  ( 1 * __DATA_NUM )  + __i ) ])) .compareTo( ( z[14] .add( z[12]) ) )<=0)  )  ? z[13] : new BigDecimal(0) ) ;
			y4[ (  ( 73 * __DATA_NUM )  + __i ) ] =    ( x4[ (  ( 5 * __DATA_NUM )  + __i ) ].subtract(x4[ (  ( 4 * __DATA_NUM )  + __i ) ])) .divide(z[23] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 74 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add(   ( z[32].multiply(z[35], MathContext.DECIMAL128) ) .divide(( ( x4[ (  ( 4 * __DATA_NUM )  + __i ) ] .add( z[35]) ) .pow(2 )) ,128,BigDecimal.ROUND_HALF_UP) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 75 * __DATA_NUM )  + __i ) ] =  (  ( z[41].multiply(x4[ (  ( 12 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( z[42].multiply(x4[ (  ( 11 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			y4[ (  ( 76 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(new BigDecimal(0.45), MathContext.DECIMAL128).multiply(new BigDecimal(0.049), MathContext.DECIMAL128).multiply(exp( (  (new BigDecimal(-0.065)) .multiply( ( x4[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(new BigDecimal(22))) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 77 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.25).multiply(new BigDecimal(0.01), MathContext.DECIMAL128) ) ;
			y4[ (  ( 78 * __DATA_NUM )  + __i ) ] = y4[ (  ( 9 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 79 * __DATA_NUM )  + __i ) ] = y4[ (  ( 10 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 80 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y4[ (  ( 76 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 81 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y4[ (  ( 76 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 82 * __DATA_NUM )  + __i ) ] =  ( z[48].multiply(y4[ (  ( 16 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 83 * __DATA_NUM )  + __i ) ] = y4[ (  ( 77 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 84 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 14 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 83 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 19 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 85 * __DATA_NUM )  + __i ) ] =  (  (   y4[ (  ( 18 * __DATA_NUM )  + __i ) ].divide( ( new BigDecimal(1).add(exp(   ( x4[ (  ( 6 * __DATA_NUM )  + __i ) ].add(new BigDecimal(28.5)) ) .divide(new BigDecimal(7.8) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) .add(new BigDecimal(1)) ) .subtract(y4[ (  ( 18 * __DATA_NUM )  + __i ) ])) ;
			y4[ (  ( 86 * __DATA_NUM )  + __i ) ] =  ( z[53].multiply(exp( ( (z[54]).negate() .multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 87 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y4[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 88 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(2).multiply(z[57], MathContext.DECIMAL128).multiply(y4[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[58] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 89 * __DATA_NUM )  + __i ) ] =  ( z[57].multiply(y4[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 90 * __DATA_NUM )  + __i ) ] = y4[ (  ( 86 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 91 * __DATA_NUM )  + __i ) ] =   y4[ (  ( 86 * __DATA_NUM )  + __i ) ].divide(z[62] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 92 * __DATA_NUM )  + __i ) ] =   y4[ (  ( 86 * __DATA_NUM )  + __i ) ].divide(z[64] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 93 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 22 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 26 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 90 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 94 * __DATA_NUM )  + __i ) ] =  ( z[75].multiply(exp( ( (z[76]).negate() .multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 95 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y4[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 96 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(3).multiply(z[70], MathContext.DECIMAL128).multiply(y4[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[69] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 97 * __DATA_NUM )  + __i ) ] = y4[ (  ( 94 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 98 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y4[ (  ( 94 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 99 * __DATA_NUM )  + __i ) ] =   y4[ (  ( 94 * __DATA_NUM )  + __i ) ].divide(z[65] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 100 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(3).multiply(z[66], MathContext.DECIMAL128).multiply(y4[ (  ( 94 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[67] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 101 * __DATA_NUM )  + __i ) ] =   y4[ (  ( 31 * __DATA_NUM )  + __i ) ].divide(z[69] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 102 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 97 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 36 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 36 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 40 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 103 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 98 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 38 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 37 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 42 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 95 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 36 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 104 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 96 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 101 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 99 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 41 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 105 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 0 * __DATA_NUM )  + __i ) ].multiply(ln(   z[8].divide(x4[ (  ( 1 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 106 * __DATA_NUM )  + __i ) ] =  (  ( new BigDecimal(1).subtract(z[85])) .multiply(z[84], MathContext.DECIMAL128).multiply((double)4.2986E-7, MathContext.DECIMAL128) ) ;
			y4[ (  ( 107 * __DATA_NUM )  + __i ) ] =  ( z[79].multiply(y4[ (  ( 44 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x4[ (  ( 61 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x4[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 105 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y4[ (  ( 108 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 43 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 29 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x4[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 105 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y4[ (  ( 109 * __DATA_NUM )  + __i ) ] =  ( exp(y4[ (  ( 45 * __DATA_NUM )  + __i ) ],__SCALE).subtract(new BigDecimal(1))) ;
			y4[ (  ( 110 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(0.94).add(exp( (   new BigDecimal(1.26).divide(y4[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( x4[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 105 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 111 * __DATA_NUM )  + __i ) ] =  ( z[96].multiply( ( x4[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 42 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y4[ (  ( 112 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(1).add((  z[92].divide(x4[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .pow(1.5 ))) ) ;
			y4[ (  ( 113 * __DATA_NUM )  + __i ) ] =    ( (z[87].pow(3 )).add((z[9].pow(3 ))) ) .divide(new BigDecimal(5000) ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 114 * __DATA_NUM )  + __i ) ] =  ( z[98].multiply((double)2.469E-4, MathContext.DECIMAL128) ) ;
			y4[ (  ( 115 * __DATA_NUM )  + __i ) ] =  ( exp( ( new BigDecimal(2).multiply(y4[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE).subtract(new BigDecimal(1))) ;
			y4[ (  ( 116 * __DATA_NUM )  + __i ) ] =  ( exp(y4[ (  ( 54 * __DATA_NUM )  + __i ) ],__SCALE).subtract(new BigDecimal(1))) ;
			y4[ (  ( 117 * __DATA_NUM )  + __i ) ] =    ( (double)1.381E-23.multiply(z[99], MathContext.DECIMAL128) ) .divide((double)6.626E-31 ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 118 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y4[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-85800.3675578326)) .divide(y4[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(70.078).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 119 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y4[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-287913.446530953)) .divide(y4[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(786.217).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 120 * __DATA_NUM )  + __i ) ] = y4[ (  ( 118 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 121 * __DATA_NUM )  + __i ) ] = y4[ (  ( 119 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 122 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(new BigDecimal(0.14832978132145), MathContext.DECIMAL128) ) ;
			y4[ (  ( 123 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[107], MathContext.DECIMAL128).multiply(exp( ( z[108].multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 124 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 62 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 58 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 122 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 125 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 65 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 63 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 122 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 126 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 123 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 64 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 61 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 127 * __DATA_NUM )  + __i ) ] = new BigDecimal(0.03966720676071);
			y4[ (  ( 128 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.2162557589585).multiply(exp( (  (new BigDecimal(-0.00001889123021)) .multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 129 * __DATA_NUM )  + __i ) ] =   y4[ (  ( 70 * __DATA_NUM )  + __i ) ].divide( ( z[4].multiply(z[0], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 130 * __DATA_NUM )  + __i ) ] = (  x4[ (  ( 5 * __DATA_NUM )  + __i ) ].divide(z[17] ,128,BigDecimal.ROUND_HALF_UP) .pow(z[18] ));
			y4[ (  ( 131 * __DATA_NUM )  + __i ) ] =  (  ( z[29].multiply(x4[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( new BigDecimal(1).subtract(x4[ (  ( 7 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( z[30].multiply(x4[ (  ( 7 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			y4[ (  ( 132 * __DATA_NUM )  + __i ) ] =  (  ( (z[37]).negate() .multiply(( ( x4[ (  ( 3 * __DATA_NUM )  + __i ) ].multiply(new BigDecimal(1000), MathContext.DECIMAL128) ) .pow(z[43] )), MathContext.DECIMAL128).multiply(x4[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( z[38].multiply(x4[ (  ( 12 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 133 * __DATA_NUM )  + __i ) ] =   y4[ (  ( 76 * __DATA_NUM )  + __i ) ].divide(z[47] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 134 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y4[ (  ( 10 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 135 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y4[ (  ( 76 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 136 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y4[ (  ( 133 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 137 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y4[ (  ( 133 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 138 * __DATA_NUM )  + __i ) ] =   y4[ (  ( 83 * __DATA_NUM )  + __i ) ].divide(z[47] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 139 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 12 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 13 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 80 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 15 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 138 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 140 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 14 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 19 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 136 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 82 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 14 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 141 * __DATA_NUM )  + __i ) ] =  ( z[49].multiply(exp( ( z[50].multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 142 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y4[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 143 * __DATA_NUM )  + __i ) ] = y4[ (  ( 141 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 144 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(3).multiply(z[62], MathContext.DECIMAL128).multiply(y4[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[61] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 145 * __DATA_NUM )  + __i ) ] =    ( z[64].multiply(y4[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[63] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 146 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(4).multiply(z[59], MathContext.DECIMAL128).multiply(y4[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[60] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 147 * __DATA_NUM )  + __i ) ] =   y4[ (  ( 86 * __DATA_NUM )  + __i ) ].divide(z[61] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 148 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 142 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 22 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 89 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 26 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 149 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 23 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 28 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 91 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 32 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 142 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 26 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 150 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 143 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 28 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 92 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 34 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 151 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 144 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 147 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 24 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 31 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 152 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 25 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 33 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 27 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 27 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 144 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 31 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 153 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 92 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 146 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 34 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 154 * __DATA_NUM )  + __i ) ] = z[78];
			y4[ (  ( 155 * __DATA_NUM )  + __i ) ] =    ( z[72].multiply(y4[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[71] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 156 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y4[ (  ( 94 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 157 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(4).multiply(z[67], MathContext.DECIMAL128).multiply(y4[ (  ( 94 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[68] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 158 * __DATA_NUM )  + __i ) ] =  ( z[65].multiply(y4[ (  ( 154 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 159 * __DATA_NUM )  + __i ) ] =  ( z[67].multiply(y4[ (  ( 154 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 160 * __DATA_NUM )  + __i ) ] =   y4[ (  ( 31 * __DATA_NUM )  + __i ) ].divide(z[71] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 161 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 95 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 97 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 158 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 36 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 162 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 156 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 39 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 160 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 43 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 33 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 37 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 163 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 155 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 160 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 100 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 43 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 164 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 38 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 157 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 44 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 165 * __DATA_NUM )  + __i ) ] =  ( x4[ (  ( 1 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(0.01833).multiply(x4[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 166 * __DATA_NUM )  + __i ) ] =  ( z[82].multiply( ( x4[ (  ( 50 * __DATA_NUM )  + __i ) ] .add( x4[ (  ( 51 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128).multiply( ( x4[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 40 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y4[ (  ( 167 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(1000).multiply(z[0], MathContext.DECIMAL128).multiply(y4[ (  ( 45 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 168 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.02).multiply(y4[ (  ( 106 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x4[ (  ( 39 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y4[ (  ( 167 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y4[ (  ( 47 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y4[ (  ( 109 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 169 * __DATA_NUM )  + __i ) ] =  ( z[81].multiply(sqrt(   z[8].divide(new BigDecimal(1) ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128).multiply(y4[ (  ( 110 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x4[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 105 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y4[ (  ( 170 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(1000).multiply(z[0], MathContext.DECIMAL128).multiply(y4[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 171 * __DATA_NUM )  + __i ) ] =    ( z[2].multiply(z[99], MathContext.DECIMAL128) ) .divide(z[0] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 172 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y4[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-272470.273489681)) .divide(y4[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(708.146).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   (  (new BigDecimal(-2.28528417586424)) .multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y4[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 173 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y4[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-133689.9304091)) .divide(y4[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(229.205).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   (  (new BigDecimal(-1.55804214553883)) .multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y4[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 174 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y4[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-97657.8497137015)) .divide(y4[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(1.51).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( new BigDecimal(0.0684861993100685).multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y4[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 175 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y4[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-55700.6624658307)) .divide(y4[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(   (new BigDecimal(-130.639)) .divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   (  (new BigDecimal(-3.64981672927078)) .multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y4[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 176 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y4[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-147813.990005035)) .divide(y4[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(338.915).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( new BigDecimal(2.1360043702126).multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y4[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 177 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y4[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-59565.2236284584)) .divide(y4[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(0.00711).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 178 * __DATA_NUM )  + __i ) ] = y4[ (  ( 176 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 179 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y4[ (  ( 172 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 180 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y4[ (  ( 172 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 181 * __DATA_NUM )  + __i ) ] =   y4[ (  ( 179 * __DATA_NUM )  + __i ) ].divide(y4[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 182 * __DATA_NUM )  + __i ) ] =   y4[ (  ( 180 * __DATA_NUM )  + __i ) ].divide(y4[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 183 * __DATA_NUM )  + __i ) ] = y4[ (  ( 177 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 184 * __DATA_NUM )  + __i ) ] = y4[ (  ( 174 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 185 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[103], MathContext.DECIMAL128).multiply(exp( ( z[104].multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 186 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 185 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 61 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 59 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 187 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.00700806628929).multiply(exp( (  (new BigDecimal(-0.14999754700285)) .multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 188 * __DATA_NUM )  + __i ) ] =    ( z[19].multiply( (  ( z[20].multiply(y4[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( z[21].multiply(y4[ (  ( 130 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) , MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1) .add( y4[ (  ( 2 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 130 * __DATA_NUM )  + __i ) ]) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 189 * __DATA_NUM )  + __i ) ] = ( ( y4[ (  ( 132 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 8 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 75 * __DATA_NUM )  + __i ) ]) ) ).negate() ;
			y4[ (  ( 190 * __DATA_NUM )  + __i ) ] = y4[ (  ( 76 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 191 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y4[ (  ( 133 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 192 * __DATA_NUM )  + __i ) ] =   y4[ (  ( 138 * __DATA_NUM )  + __i ) ].divide(z[47] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 193 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 190 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 14 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 83 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 19 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 194 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 136 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 15 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 192 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 195 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y4[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 196 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(z[61], MathContext.DECIMAL128).multiply(y4[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 197 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y4[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 198 * __DATA_NUM )  + __i ) ] =   y4[ (  ( 86 * __DATA_NUM )  + __i ) ].divide(z[63] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 199 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 87 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 27 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 147 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 31 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 195 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 25 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 200 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 197 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 28 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 29 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 201 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 88 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 32 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 89 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 26 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 196 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 202 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 145 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 198 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 25 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 33 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 203 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 28 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 29 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 145 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 33 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 204 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y4[ (  ( 94 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 205 * __DATA_NUM )  + __i ) ] = y4[ (  ( 154 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 206 * __DATA_NUM )  + __i ) ] =  ( z[68].multiply(y4[ (  ( 154 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 207 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 204 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 37 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 101 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 41 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 32 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 35 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 208 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 156 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 206 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 39 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 209 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 205 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 35 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 99 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 41 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 210 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 157 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 44 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 159 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 38 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 35 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 42 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 211 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 0 * __DATA_NUM )  + __i ) ].multiply(ln(   y4[ (  ( 41 * __DATA_NUM )  + __i ) ].divide(y4[ (  ( 165 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 212 * __DATA_NUM )  + __i ) ] =    ( y4[ (  ( 106 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 39 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y4[ (  ( 167 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y4[ (  ( 46 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y4[ (  ( 109 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 213 * __DATA_NUM )  + __i ) ] =   x4[ (  ( 6 * __DATA_NUM )  + __i ) ].divide(y4[ (  ( 0 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 214 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.0365).multiply(y4[ (  ( 50 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (  (new BigDecimal(-1.33)) .multiply(y4[ (  ( 213 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 215 * __DATA_NUM )  + __i ) ] =  ( exp( ( z[90].multiply(y4[ (  ( 213 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE).multiply((x4[ (  ( 0 * __DATA_NUM )  + __i ) ].pow(3 )), MathContext.DECIMAL128).multiply(z[10], MathContext.DECIMAL128) ) ;
			y4[ (  ( 216 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(1).add( ( z[89].multiply(exp( (  ( z[90].subtract(new BigDecimal(1))) .multiply(y4[ (  ( 213 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 217 * __DATA_NUM )  + __i ) ] =    ( y4[ (  ( 114 * __DATA_NUM )  + __i ) ].multiply(new BigDecimal(4), MathContext.DECIMAL128).multiply(y4[ (  ( 170 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y4[ (  ( 55 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y4[ (  ( 115 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 218 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 217 * __DATA_NUM )  + __i ) ] .compareTo(new BigDecimal(0))>=0)  ? new BigDecimal(0) : y4[ (  ( 217 * __DATA_NUM )  + __i ) ] ) ;
			y4[ (  ( 219 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y4[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-114007.462700232)) .divide(y4[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(224.114).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( new BigDecimal(0.286374268596235).multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y4[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 220 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y4[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-62123.0784380481)) .divide(y4[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(39.295).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( new BigDecimal(0.288816042743232).multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y4[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 221 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y4[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-121955.166154864)) .divide(y4[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(225.175).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 222 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(4).multiply(y4[ (  ( 219 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 223 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y4[ (  ( 219 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 224 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 222 * __DATA_NUM )  + __i ) ].multiply(y4[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 225 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 223 * __DATA_NUM )  + __i ) ].multiply(y4[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 226 * __DATA_NUM )  + __i ) ] = y4[ (  ( 172 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 227 * __DATA_NUM )  + __i ) ] = y4[ (  ( 173 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 228 * __DATA_NUM )  + __i ) ] =   y4[ (  ( 226 * __DATA_NUM )  + __i ) ].divide(y4[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 229 * __DATA_NUM )  + __i ) ] = y4[ (  ( 175 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 230 * __DATA_NUM )  + __i ) ] =   y4[ (  ( 183 * __DATA_NUM )  + __i ) ].divide(y4[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 231 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 121 * __DATA_NUM )  + __i ) ].multiply(y4[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 232 * __DATA_NUM )  + __i ) ] = y4[ (  ( 220 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 233 * __DATA_NUM )  + __i ) ] =  (  ( z[25].multiply(y4[ (  ( 131 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( z[26].multiply(y4[ (  ( 5 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 234 * __DATA_NUM )  + __i ) ] = y4[ (  ( 133 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 235 * __DATA_NUM )  + __i ) ] =   y4[ (  ( 192 * __DATA_NUM )  + __i ) ].divide(z[47] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 236 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 13 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 15 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 81 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 17 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 235 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 22 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 237 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 234 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 16 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 13 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 238 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 191 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 79 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 235 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 22 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 239 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply(y4[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 240 * __DATA_NUM )  + __i ) ] =  ( z[59].multiply(y4[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 241 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 239 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 87 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 27 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 27 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 242 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 197 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 29 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 198 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 33 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 239 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 27 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 243 * __DATA_NUM )  + __i ) ] = y4[ (  ( 30 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 244 * __DATA_NUM )  + __i ) ] =  ( z[66].multiply(y4[ (  ( 154 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 245 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 33 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 204 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 244 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 37 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 246 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 243 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 38 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 38 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 44 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 247 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 100 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 43 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 244 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 37 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 96 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 41 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 248 * __DATA_NUM )  + __i ) ] =  ( z[80].multiply( ( x4[ (  ( 65 * __DATA_NUM )  + __i ) ] .add( x4[ (  ( 66 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128).multiply( ( x4[ (  ( 6 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 105 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y4[ (  ( 249 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(1).add( ( new BigDecimal(0.1245).multiply(exp( (  (new BigDecimal(-0.1)) .multiply(y4[ (  ( 213 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 250 * __DATA_NUM )  + __i ) ] =  ( exp( (  ( z[90].subtract(new BigDecimal(1))) .multiply(y4[ (  ( 213 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE).multiply((z[9].pow(3 )), MathContext.DECIMAL128).multiply(x4[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 251 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 217 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 24 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x4[ (  ( 18 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 252 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y4[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-196336.575735923)) .divide(y4[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(529.952).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( new BigDecimal(2.78084918596045).multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y4[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 253 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y4[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (    (new BigDecimal(-121322.143275242)) .divide(y4[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(193.265).divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   (  (new BigDecimal(-1.74290267020903)) .multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y4[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 254 * __DATA_NUM )  + __i ) ] = y4[ (  ( 219 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 255 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 254 * __DATA_NUM )  + __i ) ].multiply(y4[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 256 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y4[ (  ( 172 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 257 * __DATA_NUM )  + __i ) ] =   y4[ (  ( 256 * __DATA_NUM )  + __i ) ].divide(y4[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 258 * __DATA_NUM )  + __i ) ] =   y4[ (  ( 230 * __DATA_NUM )  + __i ) ].divide(y4[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 259 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 231 * __DATA_NUM )  + __i ) ].multiply(y4[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 260 * __DATA_NUM )  + __i ) ] =  ( z[100].multiply(z[111], MathContext.DECIMAL128).multiply(exp( ( z[112].multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 261 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 63 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 260 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 62 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 262 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y4[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 263 * __DATA_NUM )  + __i ) ] =   y4[ (  ( 235 * __DATA_NUM )  + __i ) ].divide(z[47] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 264 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 262 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 14 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 135 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 16 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 192 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 265 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 78 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 16 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( z[46].multiply(x4[ (  ( 18 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 263 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 23 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 266 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 137 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 263 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 23 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 267 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(2).multiply(z[63], MathContext.DECIMAL128).multiply(y4[ (  ( 141 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[62] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 268 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 143 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 23 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 240 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 28 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 269 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 267 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 91 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 88 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 32 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 270 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(2).multiply(z[65], MathContext.DECIMAL128).multiply(y4[ (  ( 94 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(z[66] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 271 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 243 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 98 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 159 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 38 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 272 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 35 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 37 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 270 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 42 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 273 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 212 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 168 * __DATA_NUM )  + __i ) ]) ) ;
			y4[ (  ( 274 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( y4[ (  ( 249 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 214 * __DATA_NUM )  + __i ) ]) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 275 * __DATA_NUM )  + __i ) ] =    ( z[86].multiply( ( y4[ (  ( 215 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 250 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .divide( ( y4[ (  ( 52 * __DATA_NUM )  + __i ) ].multiply(y4[ (  ( 216 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y4[ (  ( 113 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 276 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 59 * __DATA_NUM )  + __i ) ].multiply(y4[ (  ( 117 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(exp( (   new BigDecimal(116431.142142348).divide(y4[ (  ( 58 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .add(   (new BigDecimal(-578.317)) .divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) ).add(   ( new BigDecimal(0.764126011745707).multiply(x4[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y4[ (  ( 171 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) ) ,__SCALE), MathContext.DECIMAL128) ) ;
			y4[ (  ( 277 * __DATA_NUM )  + __i ) ] = y4[ (  ( 252 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 278 * __DATA_NUM )  + __i ) ] = y4[ (  ( 276 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 279 * __DATA_NUM )  + __i ) ] = y4[ (  ( 253 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 280 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 259 * __DATA_NUM )  + __i ) ].multiply(y4[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 281 * __DATA_NUM )  + __i ) ] =    ( y4[ (  ( 123 * __DATA_NUM )  + __i ) ].multiply(y4[ (  ( 260 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y4[ (  ( 65 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide( ( y4[ (  ( 63 * __DATA_NUM )  + __i ) ].multiply(y4[ (  ( 64 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 282 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 281 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 260 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 62 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 283 * __DATA_NUM )  + __i ) ] =  ( z[48].multiply(y4[ (  ( 82 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 284 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 190 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 262 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 82 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 14 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 285 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 234 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 134 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 138 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 286 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 195 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 26 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 25 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 287 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 146 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 34 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 240 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 28 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 267 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 32 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 288 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 270 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 42 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 158 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 36 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 34 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 40 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 289 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 108 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 273 * __DATA_NUM )  + __i ) ]) ) ;
			y4[ (  ( 290 * __DATA_NUM )  + __i ) ] =   y4[ (  ( 53 * __DATA_NUM )  + __i ) ].divide( ( new BigDecimal(1).add(  y4[ (  ( 218 * __DATA_NUM )  + __i ) ].divide(z[97] ,128,BigDecimal.ROUND_HALF_UP) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 291 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3).multiply(y4[ (  ( 219 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 292 * __DATA_NUM )  + __i ) ] = y4[ (  ( 221 * __DATA_NUM )  + __i ) ];
			y4[ (  ( 293 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 280 * __DATA_NUM )  + __i ) ].multiply(y4[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 294 * __DATA_NUM )  + __i ) ] =  ( z[48].multiply(y4[ (  ( 283 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 295 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 80 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 13 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 283 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 15 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 296 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 134 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 191 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 22 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 283 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 15 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 297 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 90 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 196 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 298 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 206 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 39 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 155 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 43 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 299 * __DATA_NUM )  + __i ) ] =    ( y4[ (  ( 290 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 18 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x4[ (  ( 24 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y4[ (  ( 170 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y4[ (  ( 56 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y4[ (  ( 116 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 300 * __DATA_NUM )  + __i ) ] =   y4[ (  ( 258 * __DATA_NUM )  + __i ) ].divide(y4[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 301 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 61 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 59 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 123 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 61 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 281 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 62 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 302 * __DATA_NUM )  + __i ) ] =  ( z[48].multiply(y4[ (  ( 294 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 303 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 81 * __DATA_NUM )  + __i ) ] .add( z[45]) .add( y4[ (  ( 302 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 17 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 304 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 79 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 22 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 302 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 17 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 305 * __DATA_NUM )  + __i ) ] =    ( z[91].multiply(y4[ (  ( 274 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y4[ (  ( 51 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide(y4[ (  ( 112 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 306 * __DATA_NUM )  + __i ) ] =   y4[ (  ( 300 * __DATA_NUM )  + __i ) ].divide(y4[ (  ( 60 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			y4[ (  ( 307 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 166 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 251 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 299 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 107 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 248 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 169 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 275 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 305 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 289 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 49 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 111 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 48 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 72 * __DATA_NUM )  + __i ) ]) ) ;
			y4[ (  ( 308 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 15 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 137 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 23 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 294 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 16 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y4[ (  ( 309 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 291 * __DATA_NUM )  + __i ) ].multiply(y4[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 310 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 135 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 78 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 294 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 16 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y4[ (  ( 311 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 32 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 205 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 35 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			k4[ (  ( 0 * __DATA_NUM )  + __i ) ] =  ( ( ( y4[ (  ( 166 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 48 * __DATA_NUM )  + __i ) ]).add( ( new BigDecimal(3).multiply( ( y4[ (  ( 275 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 305 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) .add( y4[ (  ( 168 * __DATA_NUM )  + __i ) ]) ) ).negate() .multiply(y4[ (  ( 129 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			k4[ (  ( 1 * __DATA_NUM )  + __i ) ] =  ( ( (  (  ( y4[ (  ( 107 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 248 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 169 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 299 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 72 * __DATA_NUM )  + __i ) ]) ) .subtract( ( new BigDecimal(2).multiply(y4[ (  ( 305 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ))  .add( y4[ (  ( 108 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 212 * __DATA_NUM )  + __i ) ]) ) ).negate() .multiply(y4[ (  ( 129 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			k4[ (  ( 2 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 7 * __DATA_NUM )  + __i ) ].multiply( (  (  ( y4[ (  ( 4 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 188 * __DATA_NUM )  + __i ) ])) .subtract(y4[ (  ( 233 * __DATA_NUM )  + __i ) ])) .subtract( (  (  ( y4[ (  ( 111 * __DATA_NUM )  + __i ) ].subtract( ( new BigDecimal(2).multiply(y4[ (  ( 275 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ))  .add( y4[ (  ( 49 * __DATA_NUM )  + __i ) ]) ) .multiply(new BigDecimal(0.5), MathContext.DECIMAL128).multiply(y4[ (  ( 129 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) , MathContext.DECIMAL128) ) ;
			k4[ (  ( 3 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 6 * __DATA_NUM )  + __i ) ].multiply( (  (    ( y4[ (  ( 3 * __DATA_NUM )  + __i ) ].multiply(z[5], MathContext.DECIMAL128) ) .divide(z[7] ,128,BigDecimal.ROUND_HALF_UP) .subtract(   ( y4[ (  ( 4 * __DATA_NUM )  + __i ) ].multiply(z[4], MathContext.DECIMAL128) ) .divide(z[7] ,128,BigDecimal.ROUND_HALF_UP) )) .subtract( ( y4[ (  ( 251 * __DATA_NUM )  + __i ) ].multiply(y4[ (  ( 71 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) , MathContext.DECIMAL128) ) ;
			k4[ (  ( 4 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 74 * __DATA_NUM )  + __i ) ].multiply( ( y4[ (  ( 73 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 3 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			k4[ (  ( 5 * __DATA_NUM )  + __i ) ] =  (    ( y4[ (  ( 188 * __DATA_NUM )  + __i ) ].multiply(z[4], MathContext.DECIMAL128) ) .divide(z[6] ,128,BigDecimal.ROUND_HALF_UP) .subtract(   ( y4[ (  ( 73 * __DATA_NUM )  + __i ) ].multiply(z[5], MathContext.DECIMAL128) ) .divide(z[6] ,128,BigDecimal.ROUND_HALF_UP) )) ;
			k4[ (  ( 6 * __DATA_NUM )  + __i ) ] = (y4[ (  ( 307 * __DATA_NUM )  + __i ) ]).negate() ;
			k4[ (  ( 7 * __DATA_NUM )  + __i ) ] = y4[ (  ( 131 * __DATA_NUM )  + __i ) ];
			k4[ (  ( 8 * __DATA_NUM )  + __i ) ] = y4[ (  ( 5 * __DATA_NUM )  + __i ) ];
			k4[ (  ( 9 * __DATA_NUM )  + __i ) ] = y4[ (  ( 132 * __DATA_NUM )  + __i ) ];
			k4[ (  ( 10 * __DATA_NUM )  + __i ) ] = y4[ (  ( 8 * __DATA_NUM )  + __i ) ];
			k4[ (  ( 11 * __DATA_NUM )  + __i ) ] = y4[ (  ( 75 * __DATA_NUM )  + __i ) ];
			k4[ (  ( 12 * __DATA_NUM )  + __i ) ] = y4[ (  ( 189 * __DATA_NUM )  + __i ) ];
			k4[ (  ( 13 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 193 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 17 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 14 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 139 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 284 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 15 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 264 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 295 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 16 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 236 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 310 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 17 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 265 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 303 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 18 * __DATA_NUM )  + __i ) ] =  (  ( z[45].multiply(x4[ (  ( 17 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( z[46].multiply(x4[ (  ( 18 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k4[ (  ( 19 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 237 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 84 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 20 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 140 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 285 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 21 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 296 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 194 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 22 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 308 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 238 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 23 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 304 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 266 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 24 * __DATA_NUM )  + __i ) ] =    ( y4[ (  ( 85 * __DATA_NUM )  + __i ) ].subtract(x4[ (  ( 24 * __DATA_NUM )  + __i ) ])) .divide(y4[ (  ( 19 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ;
			k4[ (  ( 25 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 93 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 286 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 26 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 199 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 148 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 27 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 149 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 241 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 28 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 242 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 268 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 29 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 150 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 200 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 30 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 29 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 297 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 31 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 201 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 151 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 32 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 152 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 269 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 33 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 287 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 202 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 34 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 203 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 153 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 35 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 102 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 311 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 36 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 207 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 161 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 37 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 103 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 245 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 38 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 162 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 271 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 39 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 246 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 208 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 40 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 209 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 39 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 41 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 288 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 104 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 42 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 247 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 272 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 43 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 210 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 163 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 44 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 298 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 164 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 45 * __DATA_NUM )  + __i ) ] =  (  ( ( ( y4[ (  ( 121 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 222 * __DATA_NUM )  + __i ) ]) ) ).negate() .multiply(x4[ (  ( 45 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 226 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 46 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 183 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 52 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k4[ (  ( 46 * __DATA_NUM )  + __i ) ] =  (  (  ( y4[ (  ( 222 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 45 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y4[ (  ( 226 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 291 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 231 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 46 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y4[ (  ( 179 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 47 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 230 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 53 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k4[ (  ( 47 * __DATA_NUM )  + __i ) ] =  (  (  ( y4[ (  ( 291 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 46 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y4[ (  ( 179 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 223 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 259 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 47 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y4[ (  ( 256 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 48 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 258 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k4[ (  ( 48 * __DATA_NUM )  + __i ) ] =  (  (  ( y4[ (  ( 223 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 47 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y4[ (  ( 256 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 254 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 280 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 48 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y4[ (  ( 180 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 49 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 300 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 55 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k4[ (  ( 49 * __DATA_NUM )  + __i ) ] =  (  (  ( y4[ (  ( 254 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 48 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y4[ (  ( 180 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 277 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 178 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 293 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 49 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y4[ (  ( 227 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 50 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 279 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 51 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 306 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 56 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k4[ (  ( 50 * __DATA_NUM )  + __i ) ] =  (  (  ( y4[ (  ( 277 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 49 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y4[ (  ( 227 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 120 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 232 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 50 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y4[ (  ( 292 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 51 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( y4[ (  ( 184 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 57 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k4[ (  ( 51 * __DATA_NUM )  + __i ) ] =  (  (  ( y4[ (  ( 178 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 49 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 120 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 50 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( (  ( y4[ (  ( 279 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 292 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 51 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k4[ (  ( 52 * __DATA_NUM )  + __i ) ] =  (  (  ( y4[ (  ( 121 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 45 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y4[ (  ( 183 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 224 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 52 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y4[ (  ( 228 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 53 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k4[ (  ( 53 * __DATA_NUM )  + __i ) ] =  (  (  (  ( y4[ (  ( 231 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 46 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 224 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 52 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( (  ( y4[ (  ( 228 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 230 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 309 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 53 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y4[ (  ( 181 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k4[ (  ( 54 * __DATA_NUM )  + __i ) ] =  (  (  (  ( y4[ (  ( 259 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 47 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 309 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 53 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( (  ( y4[ (  ( 225 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 258 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 181 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y4[ (  ( 257 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 55 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k4[ (  ( 55 * __DATA_NUM )  + __i ) ] =  (  (  (  ( y4[ (  ( 280 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 48 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 225 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( (  ( y4[ (  ( 257 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 300 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 255 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 55 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y4[ (  ( 182 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 56 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k4[ (  ( 56 * __DATA_NUM )  + __i ) ] =  (  (  (  ( y4[ (  ( 293 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 49 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 255 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 55 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( (  ( y4[ (  ( 182 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 306 * __DATA_NUM )  + __i ) ]) .add( y4[ (  ( 278 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 56 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y4[ (  ( 229 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 57 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k4[ (  ( 57 * __DATA_NUM )  + __i ) ] =  (  (  ( y4[ (  ( 232 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 50 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 278 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 56 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( (  ( y4[ (  ( 229 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 184 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 57 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k4[ (  ( 58 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 185 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 59 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( y4[ (  ( 62 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 58 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k4[ (  ( 59 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 124 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 186 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 60 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 301 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 125 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 61 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 261 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 126 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 62 * __DATA_NUM )  + __i ) ] =  ( y4[ (  ( 66 * __DATA_NUM )  + __i ) ].subtract(y4[ (  ( 282 * __DATA_NUM )  + __i ) ])) ;
			k4[ (  ( 63 * __DATA_NUM )  + __i ) ] =  (  ( (y4[ (  ( 67 * __DATA_NUM )  + __i ) ]).negate() .multiply(x4[ (  ( 63 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y4[ (  ( 128 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 64 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k4[ (  ( 64 * __DATA_NUM )  + __i ) ] =  (  (  ( y4[ (  ( 67 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 63 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y4[ (  ( 128 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 127 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 64 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y4[ (  ( 187 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 65 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k4[ (  ( 65 * __DATA_NUM )  + __i ) ] =  (  (  ( y4[ (  ( 127 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 64 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( (  ( y4[ (  ( 187 * __DATA_NUM )  + __i ) ] .add( y4[ (  ( 68 * __DATA_NUM )  + __i ) ]) ) .multiply(x4[ (  ( 65 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) .add( ( y4[ (  ( 69 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 66 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			k4[ (  ( 66 * __DATA_NUM )  + __i ) ] =  (  ( y4[ (  ( 68 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 65 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( y4[ (  ( 69 * __DATA_NUM )  + __i ) ].multiply(x4[ (  ( 66 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			x5[ (  ( 0 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 0 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 0 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 1 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 1 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 1 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 1 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 1 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 1 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 2 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 2 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 2 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 2 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 3 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 3 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 3 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 3 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 3 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 3 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 4 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 4 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 4 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 4 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 4 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 4 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 5 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 5 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 5 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 5 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 5 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 5 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 6 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 6 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 6 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 6 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 7 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 7 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 7 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 7 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 7 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 7 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 8 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 8 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 8 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 8 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 8 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 8 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 9 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 9 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 9 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 9 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 10 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 10 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 10 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 10 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 10 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 10 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 11 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 11 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 11 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 11 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 11 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 11 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 12 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 12 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 12 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 12 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 12 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 12 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 13 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 13 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 13 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 13 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 13 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 13 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 14 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 14 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 14 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 14 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 14 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 14 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 15 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 15 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 15 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 15 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 15 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 15 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 16 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 16 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 16 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 16 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 16 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 16 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 17 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 17 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 17 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 17 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 17 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 17 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 18 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 18 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 18 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 18 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 18 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 18 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 19 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 19 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 19 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 19 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 19 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 19 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 20 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 20 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 20 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 20 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 21 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 21 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 21 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 21 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 22 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 22 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 22 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 22 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 22 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 22 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 23 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 23 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 23 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 23 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 23 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 23 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 24 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 24 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 24 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 24 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 24 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 24 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 25 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 25 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 25 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 25 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 25 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 25 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 26 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 26 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 26 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 26 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 26 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 26 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 27 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 27 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 27 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 27 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 27 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 27 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 28 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 28 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 28 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 28 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 28 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 28 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 29 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 29 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 29 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 29 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 29 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 29 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 30 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 30 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 30 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 30 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 31 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 31 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 31 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 31 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 31 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 31 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 32 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 32 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 32 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 32 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 32 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 32 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 33 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 33 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 33 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 33 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 33 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 33 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 34 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 34 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 34 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 34 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 34 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 34 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 35 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 35 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 35 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 35 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 35 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 35 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 36 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 36 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 36 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 36 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 36 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 36 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 37 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 37 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 37 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 37 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 37 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 37 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 38 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 38 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 38 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 38 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 38 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 38 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 39 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 39 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 39 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 39 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 39 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 39 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 40 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 40 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 40 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 40 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 40 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 40 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 41 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 41 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 41 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 41 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 41 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 41 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 42 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 42 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 42 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 42 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 42 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 42 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 43 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 43 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 43 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 43 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 43 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 43 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 44 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 44 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 44 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 44 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 44 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 44 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 45 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 45 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 45 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 45 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 45 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 45 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 46 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 46 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 46 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 46 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 46 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 46 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 47 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 47 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 47 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 47 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 47 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 47 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 48 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 48 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 48 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 48 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 48 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 48 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 49 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 49 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 49 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 49 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 49 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 49 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 50 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 50 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 50 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 50 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 50 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 50 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 51 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 51 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 51 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 51 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 51 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 51 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 52 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 52 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 52 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 52 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 52 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 52 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 53 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 53 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 53 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 53 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 53 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 53 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 54 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 54 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 54 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 54 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 54 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 55 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 55 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 55 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 55 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 55 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 55 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 56 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 56 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 56 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 56 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 56 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 56 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 57 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 57 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 57 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 57 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 57 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 57 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 58 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 58 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 58 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 58 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 58 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 58 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 59 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 59 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 59 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 59 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 59 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 59 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 60 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 60 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 60 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 60 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 60 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 61 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 61 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 61 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 61 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 61 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 61 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 62 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 62 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 62 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 62 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 62 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 62 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 63 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 63 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 63 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 63 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 63 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 63 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 64 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 64 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 64 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 64 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 64 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 64 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 65 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 65 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 65 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 65 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 65 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 65 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x5[ (  ( 66 * __DATA_NUM )  + __i ) ] =  ( x1[ (  ( 66 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 66 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 66 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 66 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 66 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			xo[ (  ( 0 * __DATA_NUM )  + __i ) ] = x5[ (  ( 0 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 1 * __DATA_NUM )  + __i ) ] = x5[ (  ( 1 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 2 * __DATA_NUM )  + __i ) ] = x5[ (  ( 2 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 3 * __DATA_NUM )  + __i ) ] = x5[ (  ( 3 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 4 * __DATA_NUM )  + __i ) ] = x5[ (  ( 4 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 5 * __DATA_NUM )  + __i ) ] = x5[ (  ( 5 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 6 * __DATA_NUM )  + __i ) ] = x5[ (  ( 6 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 7 * __DATA_NUM )  + __i ) ] = x5[ (  ( 7 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 8 * __DATA_NUM )  + __i ) ] = x5[ (  ( 8 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 9 * __DATA_NUM )  + __i ) ] = x5[ (  ( 9 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 10 * __DATA_NUM )  + __i ) ] = x5[ (  ( 10 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 11 * __DATA_NUM )  + __i ) ] = x5[ (  ( 11 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 12 * __DATA_NUM )  + __i ) ] = x5[ (  ( 12 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 13 * __DATA_NUM )  + __i ) ] = x5[ (  ( 13 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 14 * __DATA_NUM )  + __i ) ] = x5[ (  ( 14 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 15 * __DATA_NUM )  + __i ) ] = x5[ (  ( 15 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 16 * __DATA_NUM )  + __i ) ] = x5[ (  ( 16 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 17 * __DATA_NUM )  + __i ) ] = x5[ (  ( 17 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 18 * __DATA_NUM )  + __i ) ] = x5[ (  ( 18 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 19 * __DATA_NUM )  + __i ) ] = x5[ (  ( 19 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 20 * __DATA_NUM )  + __i ) ] = x5[ (  ( 20 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 21 * __DATA_NUM )  + __i ) ] = x5[ (  ( 21 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 22 * __DATA_NUM )  + __i ) ] = x5[ (  ( 22 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 23 * __DATA_NUM )  + __i ) ] = x5[ (  ( 23 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 24 * __DATA_NUM )  + __i ) ] = x5[ (  ( 24 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 25 * __DATA_NUM )  + __i ) ] = x5[ (  ( 25 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 26 * __DATA_NUM )  + __i ) ] = x5[ (  ( 26 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 27 * __DATA_NUM )  + __i ) ] = x5[ (  ( 27 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 28 * __DATA_NUM )  + __i ) ] = x5[ (  ( 28 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 29 * __DATA_NUM )  + __i ) ] = x5[ (  ( 29 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 30 * __DATA_NUM )  + __i ) ] = x5[ (  ( 30 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 31 * __DATA_NUM )  + __i ) ] = x5[ (  ( 31 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 32 * __DATA_NUM )  + __i ) ] = x5[ (  ( 32 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 33 * __DATA_NUM )  + __i ) ] = x5[ (  ( 33 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 34 * __DATA_NUM )  + __i ) ] = x5[ (  ( 34 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 35 * __DATA_NUM )  + __i ) ] = x5[ (  ( 35 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 36 * __DATA_NUM )  + __i ) ] = x5[ (  ( 36 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 37 * __DATA_NUM )  + __i ) ] = x5[ (  ( 37 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 38 * __DATA_NUM )  + __i ) ] = x5[ (  ( 38 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 39 * __DATA_NUM )  + __i ) ] = x5[ (  ( 39 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 40 * __DATA_NUM )  + __i ) ] = x5[ (  ( 40 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 41 * __DATA_NUM )  + __i ) ] = x5[ (  ( 41 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 42 * __DATA_NUM )  + __i ) ] = x5[ (  ( 42 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 43 * __DATA_NUM )  + __i ) ] = x5[ (  ( 43 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 44 * __DATA_NUM )  + __i ) ] = x5[ (  ( 44 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 45 * __DATA_NUM )  + __i ) ] = x5[ (  ( 45 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 46 * __DATA_NUM )  + __i ) ] = x5[ (  ( 46 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 47 * __DATA_NUM )  + __i ) ] = x5[ (  ( 47 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 48 * __DATA_NUM )  + __i ) ] = x5[ (  ( 48 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 49 * __DATA_NUM )  + __i ) ] = x5[ (  ( 49 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 50 * __DATA_NUM )  + __i ) ] = x5[ (  ( 50 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 51 * __DATA_NUM )  + __i ) ] = x5[ (  ( 51 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 52 * __DATA_NUM )  + __i ) ] = x5[ (  ( 52 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 53 * __DATA_NUM )  + __i ) ] = x5[ (  ( 53 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 54 * __DATA_NUM )  + __i ) ] = x5[ (  ( 54 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 55 * __DATA_NUM )  + __i ) ] = x5[ (  ( 55 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 56 * __DATA_NUM )  + __i ) ] = x5[ (  ( 56 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 57 * __DATA_NUM )  + __i ) ] = x5[ (  ( 57 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 58 * __DATA_NUM )  + __i ) ] = x5[ (  ( 58 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 59 * __DATA_NUM )  + __i ) ] = x5[ (  ( 59 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 60 * __DATA_NUM )  + __i ) ] = x5[ (  ( 60 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 61 * __DATA_NUM )  + __i ) ] = x5[ (  ( 61 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 62 * __DATA_NUM )  + __i ) ] = x5[ (  ( 62 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 63 * __DATA_NUM )  + __i ) ] = x5[ (  ( 63 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 64 * __DATA_NUM )  + __i ) ] = x5[ (  ( 64 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 65 * __DATA_NUM )  + __i ) ] = x5[ (  ( 65 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 66 * __DATA_NUM )  + __i ) ] = x5[ (  ( 66 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 0 * __DATA_NUM )  + __i ) ] = xo[ (  ( 0 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 1 * __DATA_NUM )  + __i ) ] = xo[ (  ( 1 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 2 * __DATA_NUM )  + __i ) ] = xo[ (  ( 2 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 3 * __DATA_NUM )  + __i ) ] = xo[ (  ( 3 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 4 * __DATA_NUM )  + __i ) ] = xo[ (  ( 4 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 5 * __DATA_NUM )  + __i ) ] = xo[ (  ( 5 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 6 * __DATA_NUM )  + __i ) ] = xo[ (  ( 6 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 7 * __DATA_NUM )  + __i ) ] = xo[ (  ( 7 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 8 * __DATA_NUM )  + __i ) ] = xo[ (  ( 8 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 9 * __DATA_NUM )  + __i ) ] = xo[ (  ( 9 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 10 * __DATA_NUM )  + __i ) ] = xo[ (  ( 10 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 11 * __DATA_NUM )  + __i ) ] = xo[ (  ( 11 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 12 * __DATA_NUM )  + __i ) ] = xo[ (  ( 12 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 13 * __DATA_NUM )  + __i ) ] = xo[ (  ( 13 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 14 * __DATA_NUM )  + __i ) ] = xo[ (  ( 14 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 15 * __DATA_NUM )  + __i ) ] = xo[ (  ( 15 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 16 * __DATA_NUM )  + __i ) ] = xo[ (  ( 16 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 17 * __DATA_NUM )  + __i ) ] = xo[ (  ( 17 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 18 * __DATA_NUM )  + __i ) ] = xo[ (  ( 18 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 19 * __DATA_NUM )  + __i ) ] = xo[ (  ( 19 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 20 * __DATA_NUM )  + __i ) ] = xo[ (  ( 20 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 21 * __DATA_NUM )  + __i ) ] = xo[ (  ( 21 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 22 * __DATA_NUM )  + __i ) ] = xo[ (  ( 22 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 23 * __DATA_NUM )  + __i ) ] = xo[ (  ( 23 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 24 * __DATA_NUM )  + __i ) ] = xo[ (  ( 24 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 25 * __DATA_NUM )  + __i ) ] = xo[ (  ( 25 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 26 * __DATA_NUM )  + __i ) ] = xo[ (  ( 26 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 27 * __DATA_NUM )  + __i ) ] = xo[ (  ( 27 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 28 * __DATA_NUM )  + __i ) ] = xo[ (  ( 28 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 29 * __DATA_NUM )  + __i ) ] = xo[ (  ( 29 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 30 * __DATA_NUM )  + __i ) ] = xo[ (  ( 30 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 31 * __DATA_NUM )  + __i ) ] = xo[ (  ( 31 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 32 * __DATA_NUM )  + __i ) ] = xo[ (  ( 32 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 33 * __DATA_NUM )  + __i ) ] = xo[ (  ( 33 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 34 * __DATA_NUM )  + __i ) ] = xo[ (  ( 34 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 35 * __DATA_NUM )  + __i ) ] = xo[ (  ( 35 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 36 * __DATA_NUM )  + __i ) ] = xo[ (  ( 36 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 37 * __DATA_NUM )  + __i ) ] = xo[ (  ( 37 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 38 * __DATA_NUM )  + __i ) ] = xo[ (  ( 38 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 39 * __DATA_NUM )  + __i ) ] = xo[ (  ( 39 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 40 * __DATA_NUM )  + __i ) ] = xo[ (  ( 40 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 41 * __DATA_NUM )  + __i ) ] = xo[ (  ( 41 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 42 * __DATA_NUM )  + __i ) ] = xo[ (  ( 42 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 43 * __DATA_NUM )  + __i ) ] = xo[ (  ( 43 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 44 * __DATA_NUM )  + __i ) ] = xo[ (  ( 44 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 45 * __DATA_NUM )  + __i ) ] = xo[ (  ( 45 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 46 * __DATA_NUM )  + __i ) ] = xo[ (  ( 46 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 47 * __DATA_NUM )  + __i ) ] = xo[ (  ( 47 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 48 * __DATA_NUM )  + __i ) ] = xo[ (  ( 48 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 49 * __DATA_NUM )  + __i ) ] = xo[ (  ( 49 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 50 * __DATA_NUM )  + __i ) ] = xo[ (  ( 50 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 51 * __DATA_NUM )  + __i ) ] = xo[ (  ( 51 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 52 * __DATA_NUM )  + __i ) ] = xo[ (  ( 52 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 53 * __DATA_NUM )  + __i ) ] = xo[ (  ( 53 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 54 * __DATA_NUM )  + __i ) ] = xo[ (  ( 54 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 55 * __DATA_NUM )  + __i ) ] = xo[ (  ( 55 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 56 * __DATA_NUM )  + __i ) ] = xo[ (  ( 56 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 57 * __DATA_NUM )  + __i ) ] = xo[ (  ( 57 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 58 * __DATA_NUM )  + __i ) ] = xo[ (  ( 58 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 59 * __DATA_NUM )  + __i ) ] = xo[ (  ( 59 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 60 * __DATA_NUM )  + __i ) ] = xo[ (  ( 60 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 61 * __DATA_NUM )  + __i ) ] = xo[ (  ( 61 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 62 * __DATA_NUM )  + __i ) ] = xo[ (  ( 62 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 63 * __DATA_NUM )  + __i ) ] = xo[ (  ( 63 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 64 * __DATA_NUM )  + __i ) ] = xo[ (  ( 64 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 65 * __DATA_NUM )  + __i ) ] = xo[ (  ( 65 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 66 * __DATA_NUM )  + __i ) ] = xo[ (  ( 66 * __DATA_NUM )  + __i ) ];

		}


	}

}


/**
* Compute x^exponent to a given scale.  Uses the same
* algorithm as class numbercruncher.mathutils.IntPower.
* @param x the value x
* @param exponent the exponent value
* @param scale the desired scale of the result
* @return the result value
*/
public static BigDecimal intPower(BigDecimal x, long exponent,int scale)
{
   if (exponent < 0) {
      return BigDecimal.valueOf(1).divide(intPower(x, -exponent, scale), scale,BigDecimal.ROUND_HALF_EVEN);
   }

   BigDecimal power = BigDecimal.valueOf(1);
   // Loop to compute value^exponent.
   while (exponent > 0) {
       // Is the rightmost bit a 1?
       if ((exponent & 1) == 1) {
           power = power.multiply(x).setScale(scale, BigDecimal.ROUND_HALF_EVEN);
       }

       // Square x and shift exponent 1 bit to the right.
	x = x.multiply(x).setScale(scale, BigDecimal.ROUND_HALF_EVEN);
       exponent >>= 1;

       Thread.yield();
   }

   return power;
}
/**
 * Compute the integral root of x to a given scale, x >= 0.
 * Use Newton's algorithm.
 * @param x the value of x
 * @param index the integral root value
 * @param scale the desired scale of the result
 * @return the result value
 */
public static BigDecimal intRoot(BigDecimal x, long index,int scale)
{
   // Check that x >= 0.
   if (x.signum() < 0) {
       throw new IllegalArgumentException("x < 0");
   }
   int        sp1 = scale + 1;
   BigDecimal n   = x;
   BigDecimal i   = BigDecimal.valueOf(index);
   BigDecimal im1 = BigDecimal.valueOf(index-1);
   BigDecimal tolerance = BigDecimal.valueOf(5).movePointLeft(sp1);
   BigDecimal xPrev;
   // The initial approximation is x/index.
   x = x.divide(i, scale, BigDecimal.ROUND_HALF_EVEN);
   // Loop until the approximations converge
   // (two successive approximations are equal after rounding).
   do {
       // x^(index-1)
       BigDecimal xToIm1 = intPower(x, index-1, sp1);
       // x^index
       BigDecimal xToI = x.multiply(xToIm1).setScale(sp1, BigDecimal.ROUND_HALF_EVEN);
       // n + (index-1)*(x^index)
       BigDecimal numerator = n.add(im1.multiply(xToI)).setScale(sp1, BigDecimal.ROUND_HALF_EVEN);
       // (index*(x^(index-1))
       BigDecimal denominator = i.multiply(xToIm1).setScale(sp1, BigDecimal.ROUND_HALF_EVEN);

       // x = (n + (index-1)*(x^index)) / (index*(x^(index-1)))
       xPrev = x;
       x = numerator.divide(denominator, sp1, BigDecimal.ROUND_DOWN);

       Thread.yield();
   } while (x.subtract(xPrev).abs().compareTo(tolerance) > 0);
   return x;
}

/**
 * Compute e^x to a given scale.
 * Break x into its whole and fraction parts and
 * compute (e^(1 + fraction/whole))^whole using Taylor's formula.
 * @param x the value of x
 * @param scale the desired scale of the result
 * @return the result value
 */
public static BigDecimal exp(BigDecimal x, int scale)
{
   // e^0 = 1
   if (x.signum() == 0) {
       return BigDecimal.valueOf(1);
   }
   // If x is negative, return 1/(e^-x).
   else if (x.signum() == -1) {
       return BigDecimal.valueOf(1).divide(exp(x.negate(), scale), scale,BigDecimal.ROUND_HALF_EVEN);
   }

   // Compute the whole part of x.
   BigDecimal xWhole = x.setScale(0, BigDecimal.ROUND_DOWN);

   // If there isn't a whole part, compute and return e^x.
   if (xWhole.signum() == 0) return expTaylor(x, scale);

   // Compute the fraction part of x.
   BigDecimal xFraction = x.subtract(xWhole);

   // z = 1 + fraction/whole
   BigDecimal z = BigDecimal.valueOf(1).add(xFraction.divide(
                               xWhole, scale,
                               BigDecimal.ROUND_HALF_EVEN));

   // t = e^z
   BigDecimal t = expTaylor(z, scale);

   BigDecimal maxLong = BigDecimal.valueOf(Long.MAX_VALUE);
   BigDecimal result  = BigDecimal.valueOf(1);

   // Compute and return t^whole using intPower().
   // If whole > Long.MAX_VALUE, then first compute products
   // of e^Long.MAX_VALUE.
   while (xWhole.compareTo(maxLong) >= 0) {
       result = result.multiply(
                           intPower(t, Long.MAX_VALUE, scale))
                   .setScale(scale, BigDecimal.ROUND_HALF_EVEN);
       xWhole = xWhole.subtract(maxLong);

       Thread.yield();
   }
   return result.multiply(intPower(t, xWhole.longValue(), scale))
                   .setScale(scale, BigDecimal.ROUND_HALF_EVEN);
}

/**
 * Compute e^x to a given scale by the Taylor series.
 * @param x the value of x
 * @param scale the desired scale of the result
 * @return the result value
 */
private static BigDecimal expTaylor(BigDecimal x, int scale)
{
   BigDecimal factorial = BigDecimal.valueOf(1);
   BigDecimal xPower    = x;
   BigDecimal sumPrev;

   // 1 + x
   BigDecimal sum  = x.add(BigDecimal.valueOf(1));

   // Loop until the sums converge
   // (two successive sums are equal after rounding).
   int i = 2;
   do {
       // x^i
       xPower = xPower.multiply(x)
                   .setScale(scale, BigDecimal.ROUND_HALF_EVEN);

       // i!
       factorial = factorial.multiply(BigDecimal.valueOf(i));

       // x^i/i!
       BigDecimal term = xPower
                           .divide(factorial, scale,
                                   BigDecimal.ROUND_HALF_EVEN);

       // sum = sum + x^i/i!
       sumPrev = sum;
       sum = sum.add(term);

       ++i;
       Thread.yield();
   } while (sum.compareTo(sumPrev) != 0);

   return sum;
}

/**
 * Compute the natural logarithm of x to a given scale, x > 0.
 */
public static BigDecimal ln(BigDecimal x, int scale)
{
   // Check that x > 0.
   if (x.signum() <= 0) {
       throw new IllegalArgumentException("x <= 0");
   }

   // The number of digits to the left of the decimal point.
   int magnitude = x.toString().length() - x.scale() - 1;

   if (magnitude < 3) {
       return lnNewton(x, scale);
   }

   // Compute magnitude*ln(x^(1/magnitude)).
   else {

       // x^(1/magnitude)
       BigDecimal root = intRoot(x, magnitude, scale);

       // ln(x^(1/magnitude))
       BigDecimal lnRoot = lnNewton(root, scale);

       // magnitude*ln(x^(1/magnitude))
       return BigDecimal.valueOf(magnitude).multiply(lnRoot)
                   .setScale(scale, BigDecimal.ROUND_HALF_EVEN);
   }
}

/**
 * Compute the natural logarithm of x to a given scale, x > 0.
 * Use Newton's algorithm.
 */
private static BigDecimal lnNewton(BigDecimal x, int scale)
{
   int        sp1 = scale + 1;
   BigDecimal n   = x;
   BigDecimal term;

   // Convergence tolerance = 5*(10^-(scale+1))
   BigDecimal tolerance = BigDecimal.valueOf(5)
                                       .movePointLeft(sp1);

   // Loop until the approximations converge
   // (two successive approximations are within the tolerance).
   do {

       // e^x
       BigDecimal eToX = exp(x, sp1);

       // (e^x - n)/e^x
       term = eToX.subtract(n)
                   .divide(eToX, sp1, BigDecimal.ROUND_DOWN);

       // x - (e^x - n)/e^x
       x = x.subtract(term);

       Thread.yield();
   } while (term.compareTo(tolerance) > 0);

   return x.setScale(scale, BigDecimal.ROUND_HALF_EVEN);
}

/**
 * Compute the arctangent of x to a given scale, |x| < 1
 * @param x the value of x
 * @param scale the desired scale of the result
 * @return the result value
 */
public static BigDecimal arctan(BigDecimal x, int scale)
{
   // Check that |x| < 1.
   if (x.abs().compareTo(BigDecimal.valueOf(1)) >= 0) {
       throw new IllegalArgumentException("|x| >= 1");
   }

   // If x is negative, return -arctan(-x).
   if (x.signum() == -1) {
       return arctan(x.negate(), scale).negate();
   }
   else {
       return arctanTaylor(x, scale);
   }
}

/**
 * Compute the arctangent of x to a given scale
 * by the Taylor series, |x| < 1 
 * @param x the value of x
 * @param scale the desired scale of the result
 * @return the result value 
 */
private static BigDecimal arctanTaylor(BigDecimal x, int scale)
{
   int     sp1     = scale + 1;
   int     i       = 3;
   boolean addFlag = false;

   BigDecimal power = x;
   BigDecimal sum   = x;
   BigDecimal term;

   // Convergence tolerance = 5*(10^-(scale+1))
   BigDecimal tolerance = BigDecimal.valueOf(5)
                                       .movePointLeft(sp1);

   // Loop until the approximations converge
   // (two successive approximations are within the tolerance).
   do {
       // x^i
       power = power.multiply(x).multiply(x)
                   .setScale(sp1, BigDecimal.ROUND_HALF_EVEN);

       // (x^i)/i
       term = power.divide(BigDecimal.valueOf(i), sp1,
                            BigDecimal.ROUND_HALF_EVEN);

       // sum = sum +- (x^i)/i
       sum = addFlag ? sum.add(term)
                     : sum.subtract(term);

       i += 2;
       addFlag = !addFlag;

       Thread.yield();
   } while (term.compareTo(tolerance) > 0);

   return sum;
}

/**
 * Compute the square root of x to a given scale, x >= 0.
 * Use Newton's algorithm.
 * @param x the value of x
 * @param scale the desired scale of the result2
 * @return the result value
 */
public static BigDecimal sqrt(BigDecimal x, int scale)
{
   // Check that x >= 0.
   if (x.signum() < 0) {
       throw new IllegalArgumentException("x < 0");
   }

   // n = x*(10^(2*scale))
   BigInteger n = x.movePointRight(scale << 1).toBigInteger();

  // The first approximation is the upper half of n.
   int bits = (n.bitLength() + 1) >> 1;
   BigInteger ix = n.shiftRight(bits);
   BigInteger ixPrev;

   // Loop until the approximations converge
   // (two successive approximations are equal after rounding).
   do {
       ixPrev = ix;

       // x = (x + n/x)/2
       ix = ix.add(n.divide(ix)).shiftRight(1);

       Thread.yield();
   } while (ix.compareTo(ixPrev) != 0);

   return new BigDecimal(ix, scale);
}
}

