import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;


public final class JavaBigDecimalProgram{
public static void main ( String args[] ) {

	int __i;
	BigDecimal xi[];
	BigDecimal xo[];
	BigDecimal x0[];
	BigDecimal x1[];
	BigDecimal x2[];
	BigDecimal x3[];
	BigDecimal x4[];
	BigDecimal k1[];
	BigDecimal k2[];
	BigDecimal k3[];
	BigDecimal k4[];
	BigDecimal y0[];
	BigDecimal y1[];
	BigDecimal y2[];
	BigDecimal y3[];
	BigDecimal z[];
	BigDecimal t;
	BigDecimal d = new BigDecimal( 0.010000);
	int __DATA_NUM = 32;
	int __SCALE = 80;

	xi = new BigDecimal[ ( 8 * __DATA_NUM ) ];
	xo = new BigDecimal[ ( 8 * __DATA_NUM ) ];
	x0 = new BigDecimal[ ( 8 * __DATA_NUM ) ];
	x1 = new BigDecimal[ ( 8 * __DATA_NUM ) ];
	x2 = new BigDecimal[ ( 8 * __DATA_NUM ) ];
	x3 = new BigDecimal[ ( 8 * __DATA_NUM ) ];
	x4 = new BigDecimal[ ( 8 * __DATA_NUM ) ];
	y0 = new BigDecimal[ ( 31 * __DATA_NUM ) ];
	y1 = new BigDecimal[ ( 31 * __DATA_NUM ) ];
	y2 = new BigDecimal[ ( 31 * __DATA_NUM ) ];
	y3 = new BigDecimal[ ( 31 * __DATA_NUM ) ];
	k1 = new BigDecimal[ ( 8 * __DATA_NUM ) ];
	k2 = new BigDecimal[ ( 8 * __DATA_NUM ) ];
	k3 = new BigDecimal[ ( 8 * __DATA_NUM ) ];
	k4 = new BigDecimal[ ( 8 * __DATA_NUM ) ];
	z = new BigDecimal[18];
	for(t = new BigDecimal(0.000000); ( t.compareTo(new BigDecimal(400.000000))<=0) ;t =  ( t .add( d) ) ){

		for(__i = 0; ( __i < __DATA_NUM ) ;__i++){

			x0[ (  ( 0 * __DATA_NUM )  + __i ) ] = xi[ (  ( 0 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 1 * __DATA_NUM )  + __i ) ] = xi[ (  ( 1 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 2 * __DATA_NUM )  + __i ) ] = xi[ (  ( 2 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 3 * __DATA_NUM )  + __i ) ] = xi[ (  ( 3 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 4 * __DATA_NUM )  + __i ) ] = xi[ (  ( 4 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 5 * __DATA_NUM )  + __i ) ] = xi[ (  ( 5 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 6 * __DATA_NUM )  + __i ) ] = xi[ (  ( 6 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 7 * __DATA_NUM )  + __i ) ] = xi[ (  ( 7 * __DATA_NUM )  + __i ) ];
			y0[ (  ( 0 * __DATA_NUM )  + __i ) ] =  (  (  ( t .compareTo(z[4])>=0)  &&  ( t.compareTo(z[5])<=0)  &&  (  (  ( t.subtract(z[4])) .subtract( ( ((   ( t.subtract(z[4])) .divide(z[6] ,128,BigDecimal.ROUND_HALF_UP) ).setScale(0,RoundingMode.FLOOR)).multiply(z[6], MathContext.DECIMAL128) ) )) .compareTo(z[7])<=0)  )  ? z[8] : new BigDecimal(0) ) ;
			y0[ (  ( 1 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.32).multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(47.13)) ) , MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).subtract(exp( (  (new BigDecimal(-0.1)) .multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(47.13)) ) , MathContext.DECIMAL128) ) ,__SCALE)))  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 2 * __DATA_NUM )  + __i ) ] =  (  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ] .compareTo( (new BigDecimal(-40)) )<0)  ?  ( new BigDecimal(0.135).multiply(exp(   ( new BigDecimal(80) .add( x0[ (  ( 0 * __DATA_NUM )  + __i ) ]) ) .divide( (new BigDecimal(-6.8))  ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) )  : new BigDecimal(0) ) ;
			y0[ (  ( 3 * __DATA_NUM )  + __i ) ] =  (  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ] .compareTo( (new BigDecimal(-40)) )<0)  ?    (  (  (  (new BigDecimal(-127140)) .multiply(exp( ( new BigDecimal(0.2444).multiply(x0[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .subtract( ( new BigDecimal(0.00003474).multiply(exp( (  (new BigDecimal(-0.04391)) .multiply(x0[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) )) .multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(37.78)) ) , MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( ( new BigDecimal(0.311).multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(79.23)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP)  : new BigDecimal(0) ) ;
			y0[ (  ( 4 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(7.7).subtract( ( new BigDecimal(13.0287).multiply(ln(   x0[ (  ( 7 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(1) ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) )) ;
			y0[ (  ( 5 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.095).multiply(exp( (  (new BigDecimal(-0.01)) .multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(new BigDecimal(5))) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( (  (new BigDecimal(-0.072)) .multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(new BigDecimal(5))) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 6 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.012).multiply(exp( (  (new BigDecimal(-0.008)) .multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(28)) ) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( ( new BigDecimal(0.15).multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(28)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 7 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.282).multiply(sqrt(   z[13].divide(new BigDecimal(5.4) ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y0[ (  ( 8 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.0005).multiply(exp( ( new BigDecimal(0.083).multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(50)) ) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( ( new BigDecimal(0.057).multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(50)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 9 * __DATA_NUM )  + __i ) ] =  (  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ] .compareTo( (new BigDecimal(-100)) )>0)  ?    ( new BigDecimal(2.837).multiply( ( exp( ( new BigDecimal(0.04).multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(77)) ) , MathContext.DECIMAL128) ) ,__SCALE).subtract(new BigDecimal(1))) , MathContext.DECIMAL128) ) .divide( (  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(77)) ) .multiply(exp( ( new BigDecimal(0.04).multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(35)) ) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP)  : new BigDecimal(1) ) ;
			y0[ (  ( 10 * __DATA_NUM )  + __i ) ] =  (    ( z[0].multiply(z[1], MathContext.DECIMAL128) ) .divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) .multiply(ln(   z[13].divide(z[14] ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y0[ (  ( 11 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1.02).divide( ( new BigDecimal(1).add(exp( ( new BigDecimal(0.2385).multiply( (  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 10 * __DATA_NUM )  + __i ) ])) .subtract(new BigDecimal(59.215))) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 12 * __DATA_NUM )  + __i ) ] = y0[ (  ( 10 * __DATA_NUM )  + __i ) ];
			y0[ (  ( 13 * __DATA_NUM )  + __i ) ] =  ( z[17].multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(z[16])) , MathContext.DECIMAL128) ) ;
			y0[ (  ( 14 * __DATA_NUM )  + __i ) ] =  (    ( z[0].multiply(z[1], MathContext.DECIMAL128) ) .divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) .multiply(ln(   z[10].divide(z[11] ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y0[ (  ( 15 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.08).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(11) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ;
			y0[ (  ( 16 * __DATA_NUM )  + __i ) ] =  (  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ] .compareTo( (new BigDecimal(-40)) )<0)  ?    ( new BigDecimal(0.1212).multiply(exp( (  (new BigDecimal(-0.01052)) .multiply(x0[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( (  (new BigDecimal(-0.1378)) .multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(40.14)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP)  :    ( new BigDecimal(0.3).multiply(exp( (  (new BigDecimal(-0.0000002535)) .multiply(x0[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( (  (new BigDecimal(-0.1)) .multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(32)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP)  ) ;
			y0[ (  ( 17 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.07).multiply(exp( (  (new BigDecimal(-0.017)) .multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(44)) ) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( ( new BigDecimal(0.05).multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(44)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 18 * __DATA_NUM )  + __i ) ] =  (    ( z[0].multiply(z[1], MathContext.DECIMAL128) ) .divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) .multiply(ln(    ( z[13].add( ( z[12].multiply(z[10], MathContext.DECIMAL128) ) ) ) .divide( ( z[14].add( ( z[12].multiply(z[11], MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y0[ (  ( 19 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.0013).multiply(exp( (  (new BigDecimal(-0.06)) .multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(20)) ) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( (  (new BigDecimal(-0.04)) .multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(20)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 20 * __DATA_NUM )  + __i ) ] =    (  ( new BigDecimal(0.49124).multiply(exp( ( new BigDecimal(0.08032).multiply( (  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(5.476)) ) .subtract(y0[ (  ( 10 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(1).multiply(exp( ( new BigDecimal(0.06175).multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract( ( y0[ (  ( 10 * __DATA_NUM )  + __i ) ].add(new BigDecimal(594.31)) ) )) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ) ) .divide( ( new BigDecimal(1).add(exp( (  (new BigDecimal(-0.5143)) .multiply( (  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 10 * __DATA_NUM )  + __i ) ])) .add(new BigDecimal(4.753)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 21 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add(exp(   ( new BigDecimal(7.488).subtract(x0[ (  ( 0 * __DATA_NUM )  + __i ) ])) .divide(new BigDecimal(5.98) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 22 * __DATA_NUM )  + __i ) ] =  ( z[9].multiply((x0[ (  ( 1 * __DATA_NUM )  + __i ) ].pow(3 )), MathContext.DECIMAL128).multiply(x0[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x0[ (  ( 3 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 14 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y0[ (  ( 23 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.09).multiply(x0[ (  ( 4 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x0[ (  ( 5 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 4 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y0[ (  ( 24 * __DATA_NUM )  + __i ) ] =  ( y0[ (  ( 7 * __DATA_NUM )  + __i ) ].multiply(x0[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y0[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 18 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y0[ (  ( 25 * __DATA_NUM )  + __i ) ] =   y0[ (  ( 11 * __DATA_NUM )  + __i ) ].divide( ( y0[ (  ( 11 * __DATA_NUM )  + __i ) ] .add( y0[ (  ( 20 * __DATA_NUM )  + __i ) ]) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 26 * __DATA_NUM )  + __i ) ] =  (  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ] .compareTo( (new BigDecimal(-40)) )<0)  ?  (  ( new BigDecimal(3.56).multiply(exp( ( new BigDecimal(0.079).multiply(x0[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(310000).multiply(exp( ( new BigDecimal(0.35).multiply(x0[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ) )  :   new BigDecimal(1).divide( ( new BigDecimal(0.13).multiply( ( new BigDecimal(1).add(exp(   ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(10.66)) ) .divide( (new BigDecimal(-11.1))  ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE)) ) , MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP)  ) ;
			y0[ (  ( 27 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.6047).multiply(sqrt(   z[13].divide(new BigDecimal(5.4) ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y0[ (  ( 28 * __DATA_NUM )  + __i ) ] =  ( z[15].multiply(y0[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 12 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y0[ (  ( 29 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.0065).multiply(exp( (  (new BigDecimal(-0.02)) .multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(30)) ) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( (  (new BigDecimal(-0.2)) .multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(30)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 30 * __DATA_NUM )  + __i ) ] =  ( y0[ (  ( 27 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 25 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 10 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			k1[ (  ( 0 * __DATA_NUM )  + __i ) ] =  (    (new BigDecimal(-1)) .divide(z[3] ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( y0[ (  ( 0 * __DATA_NUM )  + __i ) ] .add( y0[ (  ( 22 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 23 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 24 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 30 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 28 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 13 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ;
			k1[ (  ( 1 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 1 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x0[ (  ( 1 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y0[ (  ( 15 * __DATA_NUM )  + __i ) ].multiply(x0[ (  ( 1 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 2 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 2 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x0[ (  ( 2 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y0[ (  ( 26 * __DATA_NUM )  + __i ) ].multiply(x0[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 3 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 3 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x0[ (  ( 3 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y0[ (  ( 16 * __DATA_NUM )  + __i ) ].multiply(x0[ (  ( 3 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 4 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 5 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x0[ (  ( 4 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y0[ (  ( 17 * __DATA_NUM )  + __i ) ].multiply(x0[ (  ( 4 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 5 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 6 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x0[ (  ( 5 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y0[ (  ( 29 * __DATA_NUM )  + __i ) ].multiply(x0[ (  ( 5 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 6 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 8 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x0[ (  ( 6 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y0[ (  ( 19 * __DATA_NUM )  + __i ) ].multiply(x0[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 7 * __DATA_NUM )  + __i ) ] =  (  (    (new BigDecimal(-0.0001)) .divide(new BigDecimal(1) ,128,BigDecimal.ROUND_HALF_UP) .multiply(y0[ (  ( 23 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( new BigDecimal(0.07).multiply( ( new BigDecimal(0.0001).subtract(x0[ (  ( 7 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 0 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 0 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 1 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 1 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 1 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 2 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 2 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 2 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 3 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 3 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 3 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 4 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 4 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 4 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 5 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 5 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 5 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 6 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 6 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 6 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 7 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 7 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 7 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			y1[ (  ( 0 * __DATA_NUM )  + __i ) ] =  (  (  ( t .compareTo(z[4])>=0)  &&  ( t.compareTo(z[5])<=0)  &&  (  (  ( t.subtract(z[4])) .subtract( ( ((   ( t.subtract(z[4])) .divide(z[6] ,128,BigDecimal.ROUND_HALF_UP) ).setScale(0,RoundingMode.FLOOR)).multiply(z[6], MathContext.DECIMAL128) ) )) .compareTo(z[7])<=0)  )  ? z[8] : new BigDecimal(0) ) ;
			y1[ (  ( 1 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.32).multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(47.13)) ) , MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).subtract(exp( (  (new BigDecimal(-0.1)) .multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(47.13)) ) , MathContext.DECIMAL128) ) ,__SCALE)))  ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 2 * __DATA_NUM )  + __i ) ] =  (  ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ] .compareTo( (new BigDecimal(-40)) )<0)  ?  ( new BigDecimal(0.135).multiply(exp(   ( new BigDecimal(80) .add( x1[ (  ( 0 * __DATA_NUM )  + __i ) ]) ) .divide( (new BigDecimal(-6.8))  ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) )  : new BigDecimal(0) ) ;
			y1[ (  ( 3 * __DATA_NUM )  + __i ) ] =  (  ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ] .compareTo( (new BigDecimal(-40)) )<0)  ?    (  (  (  (new BigDecimal(-127140)) .multiply(exp( ( new BigDecimal(0.2444).multiply(x1[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .subtract( ( new BigDecimal(0.00003474).multiply(exp( (  (new BigDecimal(-0.04391)) .multiply(x1[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) )) .multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(37.78)) ) , MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( ( new BigDecimal(0.311).multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(79.23)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP)  : new BigDecimal(0) ) ;
			y1[ (  ( 4 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(7.7).subtract( ( new BigDecimal(13.0287).multiply(ln(   x1[ (  ( 7 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(1) ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) )) ;
			y1[ (  ( 5 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.095).multiply(exp( (  (new BigDecimal(-0.01)) .multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(new BigDecimal(5))) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( (  (new BigDecimal(-0.072)) .multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(new BigDecimal(5))) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 6 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.012).multiply(exp( (  (new BigDecimal(-0.008)) .multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(28)) ) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( ( new BigDecimal(0.15).multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(28)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 7 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.282).multiply(sqrt(   z[13].divide(new BigDecimal(5.4) ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 8 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.0005).multiply(exp( ( new BigDecimal(0.083).multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(50)) ) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( ( new BigDecimal(0.057).multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(50)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 9 * __DATA_NUM )  + __i ) ] =  (  ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ] .compareTo( (new BigDecimal(-100)) )>0)  ?    ( new BigDecimal(2.837).multiply( ( exp( ( new BigDecimal(0.04).multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(77)) ) , MathContext.DECIMAL128) ) ,__SCALE).subtract(new BigDecimal(1))) , MathContext.DECIMAL128) ) .divide( (  ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(77)) ) .multiply(exp( ( new BigDecimal(0.04).multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(35)) ) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP)  : new BigDecimal(1) ) ;
			y1[ (  ( 10 * __DATA_NUM )  + __i ) ] =  (    ( z[0].multiply(z[1], MathContext.DECIMAL128) ) .divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) .multiply(ln(   z[13].divide(z[14] ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 11 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1.02).divide( ( new BigDecimal(1).add(exp( ( new BigDecimal(0.2385).multiply( (  ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 10 * __DATA_NUM )  + __i ) ])) .subtract(new BigDecimal(59.215))) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 12 * __DATA_NUM )  + __i ) ] = y1[ (  ( 10 * __DATA_NUM )  + __i ) ];
			y1[ (  ( 13 * __DATA_NUM )  + __i ) ] =  ( z[17].multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(z[16])) , MathContext.DECIMAL128) ) ;
			y1[ (  ( 14 * __DATA_NUM )  + __i ) ] =  (    ( z[0].multiply(z[1], MathContext.DECIMAL128) ) .divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) .multiply(ln(   z[10].divide(z[11] ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 15 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.08).multiply(exp(  (x1[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(11) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 16 * __DATA_NUM )  + __i ) ] =  (  ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ] .compareTo( (new BigDecimal(-40)) )<0)  ?    ( new BigDecimal(0.1212).multiply(exp( (  (new BigDecimal(-0.01052)) .multiply(x1[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( (  (new BigDecimal(-0.1378)) .multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(40.14)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP)  :    ( new BigDecimal(0.3).multiply(exp( (  (new BigDecimal(-0.0000002535)) .multiply(x1[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( (  (new BigDecimal(-0.1)) .multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(32)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP)  ) ;
			y1[ (  ( 17 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.07).multiply(exp( (  (new BigDecimal(-0.017)) .multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(44)) ) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( ( new BigDecimal(0.05).multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(44)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 18 * __DATA_NUM )  + __i ) ] =  (    ( z[0].multiply(z[1], MathContext.DECIMAL128) ) .divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) .multiply(ln(    ( z[13].add( ( z[12].multiply(z[10], MathContext.DECIMAL128) ) ) ) .divide( ( z[14].add( ( z[12].multiply(z[11], MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 19 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.0013).multiply(exp( (  (new BigDecimal(-0.06)) .multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(20)) ) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( (  (new BigDecimal(-0.04)) .multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(20)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 20 * __DATA_NUM )  + __i ) ] =    (  ( new BigDecimal(0.49124).multiply(exp( ( new BigDecimal(0.08032).multiply( (  ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(5.476)) ) .subtract(y1[ (  ( 10 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(1).multiply(exp( ( new BigDecimal(0.06175).multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract( ( y1[ (  ( 10 * __DATA_NUM )  + __i ) ].add(new BigDecimal(594.31)) ) )) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ) ) .divide( ( new BigDecimal(1).add(exp( (  (new BigDecimal(-0.5143)) .multiply( (  ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 10 * __DATA_NUM )  + __i ) ])) .add(new BigDecimal(4.753)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 21 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add(exp(   ( new BigDecimal(7.488).subtract(x1[ (  ( 0 * __DATA_NUM )  + __i ) ])) .divide(new BigDecimal(5.98) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 22 * __DATA_NUM )  + __i ) ] =  ( z[9].multiply((x1[ (  ( 1 * __DATA_NUM )  + __i ) ].pow(3 )), MathContext.DECIMAL128).multiply(x1[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x1[ (  ( 3 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 14 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y1[ (  ( 23 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.09).multiply(x1[ (  ( 4 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x1[ (  ( 5 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 4 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y1[ (  ( 24 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 7 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y1[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 18 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y1[ (  ( 25 * __DATA_NUM )  + __i ) ] =   y1[ (  ( 11 * __DATA_NUM )  + __i ) ].divide( ( y1[ (  ( 11 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 20 * __DATA_NUM )  + __i ) ]) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 26 * __DATA_NUM )  + __i ) ] =  (  ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ] .compareTo( (new BigDecimal(-40)) )<0)  ?  (  ( new BigDecimal(3.56).multiply(exp( ( new BigDecimal(0.079).multiply(x1[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(310000).multiply(exp( ( new BigDecimal(0.35).multiply(x1[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ) )  :   new BigDecimal(1).divide( ( new BigDecimal(0.13).multiply( ( new BigDecimal(1).add(exp(   ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(10.66)) ) .divide( (new BigDecimal(-11.1))  ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE)) ) , MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP)  ) ;
			y1[ (  ( 27 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.6047).multiply(sqrt(   z[13].divide(new BigDecimal(5.4) ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y1[ (  ( 28 * __DATA_NUM )  + __i ) ] =  ( z[15].multiply(y1[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 12 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y1[ (  ( 29 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.0065).multiply(exp( (  (new BigDecimal(-0.02)) .multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(30)) ) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( (  (new BigDecimal(-0.2)) .multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(30)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y1[ (  ( 30 * __DATA_NUM )  + __i ) ] =  ( y1[ (  ( 27 * __DATA_NUM )  + __i ) ].multiply(y1[ (  ( 25 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x1[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y1[ (  ( 10 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			k2[ (  ( 0 * __DATA_NUM )  + __i ) ] =  (    (new BigDecimal(-1)) .divide(z[3] ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( y1[ (  ( 0 * __DATA_NUM )  + __i ) ] .add( y1[ (  ( 22 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 23 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 24 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 30 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 28 * __DATA_NUM )  + __i ) ]) .add( y1[ (  ( 13 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ;
			k2[ (  ( 1 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 1 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x1[ (  ( 1 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y1[ (  ( 15 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 1 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k2[ (  ( 2 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 2 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x1[ (  ( 2 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y1[ (  ( 26 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k2[ (  ( 3 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 3 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x1[ (  ( 3 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y1[ (  ( 16 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 3 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k2[ (  ( 4 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 5 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x1[ (  ( 4 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y1[ (  ( 17 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 4 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k2[ (  ( 5 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 6 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x1[ (  ( 5 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y1[ (  ( 29 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 5 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k2[ (  ( 6 * __DATA_NUM )  + __i ) ] =  (  ( y1[ (  ( 8 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x1[ (  ( 6 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y1[ (  ( 19 * __DATA_NUM )  + __i ) ].multiply(x1[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k2[ (  ( 7 * __DATA_NUM )  + __i ) ] =  (  (    (new BigDecimal(-0.0001)) .divide(new BigDecimal(1) ,128,BigDecimal.ROUND_HALF_UP) .multiply(y1[ (  ( 23 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( new BigDecimal(0.07).multiply( ( new BigDecimal(0.0001).subtract(x1[ (  ( 7 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 0 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 0 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 1 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 1 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 1 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 2 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 2 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 2 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 3 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 3 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 3 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 4 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 4 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 4 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 5 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 5 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 5 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 6 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 6 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 6 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			x2[ (  ( 7 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 7 * __DATA_NUM )  + __i ) ].add( ( k2[ (  ( 7 * __DATA_NUM )  + __i ) ].multiply(  d.divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) , MathContext.DECIMAL128) ) ) ) ;
			y2[ (  ( 0 * __DATA_NUM )  + __i ) ] =  (  (  ( t .compareTo(z[4])>=0)  &&  ( t.compareTo(z[5])<=0)  &&  (  (  ( t.subtract(z[4])) .subtract( ( ((   ( t.subtract(z[4])) .divide(z[6] ,128,BigDecimal.ROUND_HALF_UP) ).setScale(0,RoundingMode.FLOOR)).multiply(z[6], MathContext.DECIMAL128) ) )) .compareTo(z[7])<=0)  )  ? z[8] : new BigDecimal(0) ) ;
			y2[ (  ( 1 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.32).multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(47.13)) ) , MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).subtract(exp( (  (new BigDecimal(-0.1)) .multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(47.13)) ) , MathContext.DECIMAL128) ) ,__SCALE)))  ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 2 * __DATA_NUM )  + __i ) ] =  (  ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ] .compareTo( (new BigDecimal(-40)) )<0)  ?  ( new BigDecimal(0.135).multiply(exp(   ( new BigDecimal(80) .add( x2[ (  ( 0 * __DATA_NUM )  + __i ) ]) ) .divide( (new BigDecimal(-6.8))  ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) )  : new BigDecimal(0) ) ;
			y2[ (  ( 3 * __DATA_NUM )  + __i ) ] =  (  ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ] .compareTo( (new BigDecimal(-40)) )<0)  ?    (  (  (  (new BigDecimal(-127140)) .multiply(exp( ( new BigDecimal(0.2444).multiply(x2[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .subtract( ( new BigDecimal(0.00003474).multiply(exp( (  (new BigDecimal(-0.04391)) .multiply(x2[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) )) .multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(37.78)) ) , MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( ( new BigDecimal(0.311).multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(79.23)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP)  : new BigDecimal(0) ) ;
			y2[ (  ( 4 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(7.7).subtract( ( new BigDecimal(13.0287).multiply(ln(   x2[ (  ( 7 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(1) ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) )) ;
			y2[ (  ( 5 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.095).multiply(exp( (  (new BigDecimal(-0.01)) .multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(new BigDecimal(5))) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( (  (new BigDecimal(-0.072)) .multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(new BigDecimal(5))) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 6 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.012).multiply(exp( (  (new BigDecimal(-0.008)) .multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(28)) ) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( ( new BigDecimal(0.15).multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(28)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 7 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.282).multiply(sqrt(   z[13].divide(new BigDecimal(5.4) ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 8 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.0005).multiply(exp( ( new BigDecimal(0.083).multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(50)) ) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( ( new BigDecimal(0.057).multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(50)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 9 * __DATA_NUM )  + __i ) ] =  (  ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ] .compareTo( (new BigDecimal(-100)) )>0)  ?    ( new BigDecimal(2.837).multiply( ( exp( ( new BigDecimal(0.04).multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(77)) ) , MathContext.DECIMAL128) ) ,__SCALE).subtract(new BigDecimal(1))) , MathContext.DECIMAL128) ) .divide( (  ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(77)) ) .multiply(exp( ( new BigDecimal(0.04).multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(35)) ) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP)  : new BigDecimal(1) ) ;
			y2[ (  ( 10 * __DATA_NUM )  + __i ) ] =  (    ( z[0].multiply(z[1], MathContext.DECIMAL128) ) .divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) .multiply(ln(   z[13].divide(z[14] ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 11 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1.02).divide( ( new BigDecimal(1).add(exp( ( new BigDecimal(0.2385).multiply( (  ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 10 * __DATA_NUM )  + __i ) ])) .subtract(new BigDecimal(59.215))) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 12 * __DATA_NUM )  + __i ) ] = y2[ (  ( 10 * __DATA_NUM )  + __i ) ];
			y2[ (  ( 13 * __DATA_NUM )  + __i ) ] =  ( z[17].multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(z[16])) , MathContext.DECIMAL128) ) ;
			y2[ (  ( 14 * __DATA_NUM )  + __i ) ] =  (    ( z[0].multiply(z[1], MathContext.DECIMAL128) ) .divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) .multiply(ln(   z[10].divide(z[11] ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 15 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.08).multiply(exp(  (x2[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(11) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 16 * __DATA_NUM )  + __i ) ] =  (  ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ] .compareTo( (new BigDecimal(-40)) )<0)  ?    ( new BigDecimal(0.1212).multiply(exp( (  (new BigDecimal(-0.01052)) .multiply(x2[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( (  (new BigDecimal(-0.1378)) .multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(40.14)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP)  :    ( new BigDecimal(0.3).multiply(exp( (  (new BigDecimal(-0.0000002535)) .multiply(x2[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( (  (new BigDecimal(-0.1)) .multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(32)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP)  ) ;
			y2[ (  ( 17 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.07).multiply(exp( (  (new BigDecimal(-0.017)) .multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(44)) ) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( ( new BigDecimal(0.05).multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(44)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 18 * __DATA_NUM )  + __i ) ] =  (    ( z[0].multiply(z[1], MathContext.DECIMAL128) ) .divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) .multiply(ln(    ( z[13].add( ( z[12].multiply(z[10], MathContext.DECIMAL128) ) ) ) .divide( ( z[14].add( ( z[12].multiply(z[11], MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 19 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.0013).multiply(exp( (  (new BigDecimal(-0.06)) .multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(20)) ) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( (  (new BigDecimal(-0.04)) .multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(20)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 20 * __DATA_NUM )  + __i ) ] =    (  ( new BigDecimal(0.49124).multiply(exp( ( new BigDecimal(0.08032).multiply( (  ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(5.476)) ) .subtract(y2[ (  ( 10 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(1).multiply(exp( ( new BigDecimal(0.06175).multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract( ( y2[ (  ( 10 * __DATA_NUM )  + __i ) ].add(new BigDecimal(594.31)) ) )) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ) ) .divide( ( new BigDecimal(1).add(exp( (  (new BigDecimal(-0.5143)) .multiply( (  ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 10 * __DATA_NUM )  + __i ) ])) .add(new BigDecimal(4.753)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 21 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add(exp(   ( new BigDecimal(7.488).subtract(x2[ (  ( 0 * __DATA_NUM )  + __i ) ])) .divide(new BigDecimal(5.98) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 22 * __DATA_NUM )  + __i ) ] =  ( z[9].multiply((x2[ (  ( 1 * __DATA_NUM )  + __i ) ].pow(3 )), MathContext.DECIMAL128).multiply(x2[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x2[ (  ( 3 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 14 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y2[ (  ( 23 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.09).multiply(x2[ (  ( 4 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x2[ (  ( 5 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 4 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y2[ (  ( 24 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 7 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y2[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 18 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y2[ (  ( 25 * __DATA_NUM )  + __i ) ] =   y2[ (  ( 11 * __DATA_NUM )  + __i ) ].divide( ( y2[ (  ( 11 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 20 * __DATA_NUM )  + __i ) ]) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 26 * __DATA_NUM )  + __i ) ] =  (  ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ] .compareTo( (new BigDecimal(-40)) )<0)  ?  (  ( new BigDecimal(3.56).multiply(exp( ( new BigDecimal(0.079).multiply(x2[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(310000).multiply(exp( ( new BigDecimal(0.35).multiply(x2[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ) )  :   new BigDecimal(1).divide( ( new BigDecimal(0.13).multiply( ( new BigDecimal(1).add(exp(   ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(10.66)) ) .divide( (new BigDecimal(-11.1))  ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE)) ) , MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP)  ) ;
			y2[ (  ( 27 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.6047).multiply(sqrt(   z[13].divide(new BigDecimal(5.4) ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y2[ (  ( 28 * __DATA_NUM )  + __i ) ] =  ( z[15].multiply(y2[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 12 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y2[ (  ( 29 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.0065).multiply(exp( (  (new BigDecimal(-0.02)) .multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(30)) ) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( (  (new BigDecimal(-0.2)) .multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(30)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y2[ (  ( 30 * __DATA_NUM )  + __i ) ] =  ( y2[ (  ( 27 * __DATA_NUM )  + __i ) ].multiply(y2[ (  ( 25 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x2[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y2[ (  ( 10 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			k3[ (  ( 0 * __DATA_NUM )  + __i ) ] =  (    (new BigDecimal(-1)) .divide(z[3] ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( y2[ (  ( 0 * __DATA_NUM )  + __i ) ] .add( y2[ (  ( 22 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 23 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 24 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 30 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 28 * __DATA_NUM )  + __i ) ]) .add( y2[ (  ( 13 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ;
			k3[ (  ( 1 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 1 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x2[ (  ( 1 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y2[ (  ( 15 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 1 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k3[ (  ( 2 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 2 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x2[ (  ( 2 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y2[ (  ( 26 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k3[ (  ( 3 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 3 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x2[ (  ( 3 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y2[ (  ( 16 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 3 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k3[ (  ( 4 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 5 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x2[ (  ( 4 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y2[ (  ( 17 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 4 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k3[ (  ( 5 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 6 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x2[ (  ( 5 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y2[ (  ( 29 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 5 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k3[ (  ( 6 * __DATA_NUM )  + __i ) ] =  (  ( y2[ (  ( 8 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x2[ (  ( 6 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y2[ (  ( 19 * __DATA_NUM )  + __i ) ].multiply(x2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k3[ (  ( 7 * __DATA_NUM )  + __i ) ] =  (  (    (new BigDecimal(-0.0001)) .divide(new BigDecimal(1) ,128,BigDecimal.ROUND_HALF_UP) .multiply(y2[ (  ( 23 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( new BigDecimal(0.07).multiply( ( new BigDecimal(0.0001).subtract(x2[ (  ( 7 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 0 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 0 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 1 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 1 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 1 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 2 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 2 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 2 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 3 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 3 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 3 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 4 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 4 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 4 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 5 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 5 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 5 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 6 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 6 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 6 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x3[ (  ( 7 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 7 * __DATA_NUM )  + __i ) ].add( ( k3[ (  ( 7 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			y3[ (  ( 0 * __DATA_NUM )  + __i ) ] =  (  (  ( t .compareTo(z[4])>=0)  &&  ( t.compareTo(z[5])<=0)  &&  (  (  ( t.subtract(z[4])) .subtract( ( ((   ( t.subtract(z[4])) .divide(z[6] ,128,BigDecimal.ROUND_HALF_UP) ).setScale(0,RoundingMode.FLOOR)).multiply(z[6], MathContext.DECIMAL128) ) )) .compareTo(z[7])<=0)  )  ? z[8] : new BigDecimal(0) ) ;
			y3[ (  ( 1 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.32).multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(47.13)) ) , MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).subtract(exp( (  (new BigDecimal(-0.1)) .multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(47.13)) ) , MathContext.DECIMAL128) ) ,__SCALE)))  ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 2 * __DATA_NUM )  + __i ) ] =  (  ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ] .compareTo( (new BigDecimal(-40)) )<0)  ?  ( new BigDecimal(0.135).multiply(exp(   ( new BigDecimal(80) .add( x3[ (  ( 0 * __DATA_NUM )  + __i ) ]) ) .divide( (new BigDecimal(-6.8))  ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) )  : new BigDecimal(0) ) ;
			y3[ (  ( 3 * __DATA_NUM )  + __i ) ] =  (  ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ] .compareTo( (new BigDecimal(-40)) )<0)  ?    (  (  (  (new BigDecimal(-127140)) .multiply(exp( ( new BigDecimal(0.2444).multiply(x3[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .subtract( ( new BigDecimal(0.00003474).multiply(exp( (  (new BigDecimal(-0.04391)) .multiply(x3[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) )) .multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(37.78)) ) , MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( ( new BigDecimal(0.311).multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(79.23)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP)  : new BigDecimal(0) ) ;
			y3[ (  ( 4 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(7.7).subtract( ( new BigDecimal(13.0287).multiply(ln(   x3[ (  ( 7 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(1) ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) )) ;
			y3[ (  ( 5 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.095).multiply(exp( (  (new BigDecimal(-0.01)) .multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(new BigDecimal(5))) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( (  (new BigDecimal(-0.072)) .multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(new BigDecimal(5))) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 6 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.012).multiply(exp( (  (new BigDecimal(-0.008)) .multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(28)) ) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( ( new BigDecimal(0.15).multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(28)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 7 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.282).multiply(sqrt(   z[13].divide(new BigDecimal(5.4) ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 8 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.0005).multiply(exp( ( new BigDecimal(0.083).multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(50)) ) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( ( new BigDecimal(0.057).multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(50)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 9 * __DATA_NUM )  + __i ) ] =  (  ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ] .compareTo( (new BigDecimal(-100)) )>0)  ?    ( new BigDecimal(2.837).multiply( ( exp( ( new BigDecimal(0.04).multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(77)) ) , MathContext.DECIMAL128) ) ,__SCALE).subtract(new BigDecimal(1))) , MathContext.DECIMAL128) ) .divide( (  ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(77)) ) .multiply(exp( ( new BigDecimal(0.04).multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(35)) ) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP)  : new BigDecimal(1) ) ;
			y3[ (  ( 10 * __DATA_NUM )  + __i ) ] =  (    ( z[0].multiply(z[1], MathContext.DECIMAL128) ) .divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) .multiply(ln(   z[13].divide(z[14] ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 11 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1.02).divide( ( new BigDecimal(1).add(exp( ( new BigDecimal(0.2385).multiply( (  ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 10 * __DATA_NUM )  + __i ) ])) .subtract(new BigDecimal(59.215))) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 12 * __DATA_NUM )  + __i ) ] = y3[ (  ( 10 * __DATA_NUM )  + __i ) ];
			y3[ (  ( 13 * __DATA_NUM )  + __i ) ] =  ( z[17].multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(z[16])) , MathContext.DECIMAL128) ) ;
			y3[ (  ( 14 * __DATA_NUM )  + __i ) ] =  (    ( z[0].multiply(z[1], MathContext.DECIMAL128) ) .divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) .multiply(ln(   z[10].divide(z[11] ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 15 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.08).multiply(exp(  (x3[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(11) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 16 * __DATA_NUM )  + __i ) ] =  (  ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ] .compareTo( (new BigDecimal(-40)) )<0)  ?    ( new BigDecimal(0.1212).multiply(exp( (  (new BigDecimal(-0.01052)) .multiply(x3[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( (  (new BigDecimal(-0.1378)) .multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(40.14)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP)  :    ( new BigDecimal(0.3).multiply(exp( (  (new BigDecimal(-0.0000002535)) .multiply(x3[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( (  (new BigDecimal(-0.1)) .multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(32)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP)  ) ;
			y3[ (  ( 17 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.07).multiply(exp( (  (new BigDecimal(-0.017)) .multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(44)) ) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( ( new BigDecimal(0.05).multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(44)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 18 * __DATA_NUM )  + __i ) ] =  (    ( z[0].multiply(z[1], MathContext.DECIMAL128) ) .divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) .multiply(ln(    ( z[13].add( ( z[12].multiply(z[10], MathContext.DECIMAL128) ) ) ) .divide( ( z[14].add( ( z[12].multiply(z[11], MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 19 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.0013).multiply(exp( (  (new BigDecimal(-0.06)) .multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(20)) ) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( (  (new BigDecimal(-0.04)) .multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(20)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 20 * __DATA_NUM )  + __i ) ] =    (  ( new BigDecimal(0.49124).multiply(exp( ( new BigDecimal(0.08032).multiply( (  ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(5.476)) ) .subtract(y3[ (  ( 10 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(1).multiply(exp( ( new BigDecimal(0.06175).multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract( ( y3[ (  ( 10 * __DATA_NUM )  + __i ) ].add(new BigDecimal(594.31)) ) )) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ) ) .divide( ( new BigDecimal(1).add(exp( (  (new BigDecimal(-0.5143)) .multiply( (  ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 10 * __DATA_NUM )  + __i ) ])) .add(new BigDecimal(4.753)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 21 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add(exp(   ( new BigDecimal(7.488).subtract(x3[ (  ( 0 * __DATA_NUM )  + __i ) ])) .divide(new BigDecimal(5.98) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 22 * __DATA_NUM )  + __i ) ] =  ( z[9].multiply((x3[ (  ( 1 * __DATA_NUM )  + __i ) ].pow(3 )), MathContext.DECIMAL128).multiply(x3[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x3[ (  ( 3 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 14 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y3[ (  ( 23 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.09).multiply(x3[ (  ( 4 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x3[ (  ( 5 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 4 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y3[ (  ( 24 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 7 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y3[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 18 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y3[ (  ( 25 * __DATA_NUM )  + __i ) ] =   y3[ (  ( 11 * __DATA_NUM )  + __i ) ].divide( ( y3[ (  ( 11 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 20 * __DATA_NUM )  + __i ) ]) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 26 * __DATA_NUM )  + __i ) ] =  (  ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ] .compareTo( (new BigDecimal(-40)) )<0)  ?  (  ( new BigDecimal(3.56).multiply(exp( ( new BigDecimal(0.079).multiply(x3[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(310000).multiply(exp( ( new BigDecimal(0.35).multiply(x3[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) ) )  :   new BigDecimal(1).divide( ( new BigDecimal(0.13).multiply( ( new BigDecimal(1).add(exp(   ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(10.66)) ) .divide( (new BigDecimal(-11.1))  ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE)) ) , MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP)  ) ;
			y3[ (  ( 27 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.6047).multiply(sqrt(   z[13].divide(new BigDecimal(5.4) ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y3[ (  ( 28 * __DATA_NUM )  + __i ) ] =  ( z[15].multiply(y3[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 12 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y3[ (  ( 29 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.0065).multiply(exp( (  (new BigDecimal(-0.02)) .multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(30)) ) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( (  (new BigDecimal(-0.2)) .multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(30)) ) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y3[ (  ( 30 * __DATA_NUM )  + __i ) ] =  ( y3[ (  ( 27 * __DATA_NUM )  + __i ) ].multiply(y3[ (  ( 25 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x3[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y3[ (  ( 10 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			k4[ (  ( 0 * __DATA_NUM )  + __i ) ] =  (    (new BigDecimal(-1)) .divide(z[3] ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( y3[ (  ( 0 * __DATA_NUM )  + __i ) ] .add( y3[ (  ( 22 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 23 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 24 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 30 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 28 * __DATA_NUM )  + __i ) ]) .add( y3[ (  ( 13 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ;
			k4[ (  ( 1 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 1 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x3[ (  ( 1 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y3[ (  ( 15 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 1 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k4[ (  ( 2 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 2 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x3[ (  ( 2 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y3[ (  ( 26 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k4[ (  ( 3 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 3 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x3[ (  ( 3 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y3[ (  ( 16 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 3 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k4[ (  ( 4 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 5 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x3[ (  ( 4 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y3[ (  ( 17 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 4 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k4[ (  ( 5 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 6 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x3[ (  ( 5 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y3[ (  ( 29 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 5 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k4[ (  ( 6 * __DATA_NUM )  + __i ) ] =  (  ( y3[ (  ( 8 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x3[ (  ( 6 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y3[ (  ( 19 * __DATA_NUM )  + __i ) ].multiply(x3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k4[ (  ( 7 * __DATA_NUM )  + __i ) ] =  (  (    (new BigDecimal(-0.0001)) .divide(new BigDecimal(1) ,128,BigDecimal.ROUND_HALF_UP) .multiply(y3[ (  ( 23 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( new BigDecimal(0.07).multiply( ( new BigDecimal(0.0001).subtract(x3[ (  ( 7 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 0 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 0 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 0 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 1 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 1 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 1 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 1 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 1 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 1 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 2 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 2 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 2 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 2 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 3 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 3 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 3 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 3 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 3 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 3 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 4 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 4 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 4 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 4 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 4 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 4 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 5 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 5 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 5 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 5 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 5 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 5 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 6 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 6 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 6 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 6 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			x4[ (  ( 7 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 7 * __DATA_NUM )  + __i ) ].add( (   d.divide(new BigDecimal(6) ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( k1[ (  ( 7 * __DATA_NUM )  + __i ) ].add( ( new BigDecimal(2).multiply(k2[ (  ( 7 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(2).multiply(k3[ (  ( 7 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) .add( k4[ (  ( 7 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ) ) ;
			xo[ (  ( 0 * __DATA_NUM )  + __i ) ] = x4[ (  ( 0 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 1 * __DATA_NUM )  + __i ) ] = x4[ (  ( 1 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 2 * __DATA_NUM )  + __i ) ] = x4[ (  ( 2 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 3 * __DATA_NUM )  + __i ) ] = x4[ (  ( 3 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 4 * __DATA_NUM )  + __i ) ] = x4[ (  ( 4 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 5 * __DATA_NUM )  + __i ) ] = x4[ (  ( 5 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 6 * __DATA_NUM )  + __i ) ] = x4[ (  ( 6 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 7 * __DATA_NUM )  + __i ) ] = x4[ (  ( 7 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 0 * __DATA_NUM )  + __i ) ] = xo[ (  ( 0 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 1 * __DATA_NUM )  + __i ) ] = xo[ (  ( 1 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 2 * __DATA_NUM )  + __i ) ] = xo[ (  ( 2 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 3 * __DATA_NUM )  + __i ) ] = xo[ (  ( 3 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 4 * __DATA_NUM )  + __i ) ] = xo[ (  ( 4 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 5 * __DATA_NUM )  + __i ) ] = xo[ (  ( 5 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 6 * __DATA_NUM )  + __i ) ] = xo[ (  ( 6 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 7 * __DATA_NUM )  + __i ) ] = xo[ (  ( 7 * __DATA_NUM )  + __i ) ];

		}


	}

}


/**
* Compute x^exponent to a given scale.  Uses the same
* algorithm as class numbercruncher.mathutils.IntPower.
* @param x the value x
* @param exponent the exponent value
* @param scale the desired scale of the result
* @return the result value
*/
public static BigDecimal intPower(BigDecimal x, long exponent,int scale)
{
   if (exponent < 0) {
      return BigDecimal.valueOf(1).divide(intPower(x, -exponent, scale), scale,BigDecimal.ROUND_HALF_EVEN);
   }

   BigDecimal power = BigDecimal.valueOf(1);
   // Loop to compute value^exponent.
   while (exponent > 0) {
       // Is the rightmost bit a 1?
       if ((exponent & 1) == 1) {
           power = power.multiply(x).setScale(scale, BigDecimal.ROUND_HALF_EVEN);
       }

       // Square x and shift exponent 1 bit to the right.
	x = x.multiply(x).setScale(scale, BigDecimal.ROUND_HALF_EVEN);
       exponent >>= 1;

       Thread.yield();
   }

   return power;
}
/**
 * Compute the integral root of x to a given scale, x >= 0.
 * Use Newton's algorithm.
 * @param x the value of x
 * @param index the integral root value
 * @param scale the desired scale of the result
 * @return the result value
 */
public static BigDecimal intRoot(BigDecimal x, long index,int scale)
{
   // Check that x >= 0.
   if (x.signum() < 0) {
       throw new IllegalArgumentException("x < 0");
   }
   int        sp1 = scale + 1;
   BigDecimal n   = x;
   BigDecimal i   = BigDecimal.valueOf(index);
   BigDecimal im1 = BigDecimal.valueOf(index-1);
   BigDecimal tolerance = BigDecimal.valueOf(5).movePointLeft(sp1);
   BigDecimal xPrev;
   // The initial approximation is x/index.
   x = x.divide(i, scale, BigDecimal.ROUND_HALF_EVEN);
   // Loop until the approximations converge
   // (two successive approximations are equal after rounding).
   do {
       // x^(index-1)
       BigDecimal xToIm1 = intPower(x, index-1, sp1);
       // x^index
       BigDecimal xToI = x.multiply(xToIm1).setScale(sp1, BigDecimal.ROUND_HALF_EVEN);
       // n + (index-1)*(x^index)
       BigDecimal numerator = n.add(im1.multiply(xToI)).setScale(sp1, BigDecimal.ROUND_HALF_EVEN);
       // (index*(x^(index-1))
       BigDecimal denominator = i.multiply(xToIm1).setScale(sp1, BigDecimal.ROUND_HALF_EVEN);

       // x = (n + (index-1)*(x^index)) / (index*(x^(index-1)))
       xPrev = x;
       x = numerator.divide(denominator, sp1, BigDecimal.ROUND_DOWN);

       Thread.yield();
   } while (x.subtract(xPrev).abs().compareTo(tolerance) > 0);
   return x;
}

/**
 * Compute e^x to a given scale.
 * Break x into its whole and fraction parts and
 * compute (e^(1 + fraction/whole))^whole using Taylor's formula.
 * @param x the value of x
 * @param scale the desired scale of the result
 * @return the result value
 */
public static BigDecimal exp(BigDecimal x, int scale)
{
   // e^0 = 1
   if (x.signum() == 0) {
       return BigDecimal.valueOf(1);
   }
   // If x is negative, return 1/(e^-x).
   else if (x.signum() == -1) {
       return BigDecimal.valueOf(1).divide(exp(x.negate(), scale), scale,BigDecimal.ROUND_HALF_EVEN);
   }

   // Compute the whole part of x.
   BigDecimal xWhole = x.setScale(0, BigDecimal.ROUND_DOWN);

   // If there isn't a whole part, compute and return e^x.
   if (xWhole.signum() == 0) return expTaylor(x, scale);

   // Compute the fraction part of x.
   BigDecimal xFraction = x.subtract(xWhole);

   // z = 1 + fraction/whole
   BigDecimal z = BigDecimal.valueOf(1).add(xFraction.divide(
                               xWhole, scale,
                               BigDecimal.ROUND_HALF_EVEN));

   // t = e^z
   BigDecimal t = expTaylor(z, scale);

   BigDecimal maxLong = BigDecimal.valueOf(Long.MAX_VALUE);
   BigDecimal result  = BigDecimal.valueOf(1);

   // Compute and return t^whole using intPower().
   // If whole > Long.MAX_VALUE, then first compute products
   // of e^Long.MAX_VALUE.
   while (xWhole.compareTo(maxLong) >= 0) {
       result = result.multiply(
                           intPower(t, Long.MAX_VALUE, scale))
                   .setScale(scale, BigDecimal.ROUND_HALF_EVEN);
       xWhole = xWhole.subtract(maxLong);

       Thread.yield();
   }
   return result.multiply(intPower(t, xWhole.longValue(), scale))
                   .setScale(scale, BigDecimal.ROUND_HALF_EVEN);
}

/**
 * Compute e^x to a given scale by the Taylor series.
 * @param x the value of x
 * @param scale the desired scale of the result
 * @return the result value
 */
private static BigDecimal expTaylor(BigDecimal x, int scale)
{
   BigDecimal factorial = BigDecimal.valueOf(1);
   BigDecimal xPower    = x;
   BigDecimal sumPrev;

   // 1 + x
   BigDecimal sum  = x.add(BigDecimal.valueOf(1));

   // Loop until the sums converge
   // (two successive sums are equal after rounding).
   int i = 2;
   do {
       // x^i
       xPower = xPower.multiply(x)
                   .setScale(scale, BigDecimal.ROUND_HALF_EVEN);

       // i!
       factorial = factorial.multiply(BigDecimal.valueOf(i));

       // x^i/i!
       BigDecimal term = xPower
                           .divide(factorial, scale,
                                   BigDecimal.ROUND_HALF_EVEN);

       // sum = sum + x^i/i!
       sumPrev = sum;
       sum = sum.add(term);

       ++i;
       Thread.yield();
   } while (sum.compareTo(sumPrev) != 0);

   return sum;
}

/**
 * Compute the natural logarithm of x to a given scale, x > 0.
 */
public static BigDecimal ln(BigDecimal x, int scale)
{
   // Check that x > 0.
   if (x.signum() <= 0) {
       throw new IllegalArgumentException("x <= 0");
   }

   // The number of digits to the left of the decimal point.
   int magnitude = x.toString().length() - x.scale() - 1;

   if (magnitude < 3) {
       return lnNewton(x, scale);
   }

   // Compute magnitude*ln(x^(1/magnitude)).
   else {

       // x^(1/magnitude)
       BigDecimal root = intRoot(x, magnitude, scale);

       // ln(x^(1/magnitude))
       BigDecimal lnRoot = lnNewton(root, scale);

       // magnitude*ln(x^(1/magnitude))
       return BigDecimal.valueOf(magnitude).multiply(lnRoot)
                   .setScale(scale, BigDecimal.ROUND_HALF_EVEN);
   }
}

/**
 * Compute the natural logarithm of x to a given scale, x > 0.
 * Use Newton's algorithm.
 */
private static BigDecimal lnNewton(BigDecimal x, int scale)
{
   int        sp1 = scale + 1;
   BigDecimal n   = x;
   BigDecimal term;

   // Convergence tolerance = 5*(10^-(scale+1))
   BigDecimal tolerance = BigDecimal.valueOf(5)
                                       .movePointLeft(sp1);

   // Loop until the approximations converge
   // (two successive approximations are within the tolerance).
   do {

       // e^x
       BigDecimal eToX = exp(x, sp1);

       // (e^x - n)/e^x
       term = eToX.subtract(n)
                   .divide(eToX, sp1, BigDecimal.ROUND_DOWN);

       // x - (e^x - n)/e^x
       x = x.subtract(term);

       Thread.yield();
   } while (term.compareTo(tolerance) > 0);

   return x.setScale(scale, BigDecimal.ROUND_HALF_EVEN);
}

/**
 * Compute the arctangent of x to a given scale, |x| < 1
 * @param x the value of x
 * @param scale the desired scale of the result
 * @return the result value
 */
public static BigDecimal arctan(BigDecimal x, int scale)
{
   // Check that |x| < 1.
   if (x.abs().compareTo(BigDecimal.valueOf(1)) >= 0) {
       throw new IllegalArgumentException("|x| >= 1");
   }

   // If x is negative, return -arctan(-x).
   if (x.signum() == -1) {
       return arctan(x.negate(), scale).negate();
   }
   else {
       return arctanTaylor(x, scale);
   }
}

/**
 * Compute the arctangent of x to a given scale
 * by the Taylor series, |x| < 1 
 * @param x the value of x
 * @param scale the desired scale of the result
 * @return the result value 
 */
private static BigDecimal arctanTaylor(BigDecimal x, int scale)
{
   int     sp1     = scale + 1;
   int     i       = 3;
   boolean addFlag = false;

   BigDecimal power = x;
   BigDecimal sum   = x;
   BigDecimal term;

   // Convergence tolerance = 5*(10^-(scale+1))
   BigDecimal tolerance = BigDecimal.valueOf(5)
                                       .movePointLeft(sp1);

   // Loop until the approximations converge
   // (two successive approximations are within the tolerance).
   do {
       // x^i
       power = power.multiply(x).multiply(x)
                   .setScale(sp1, BigDecimal.ROUND_HALF_EVEN);

       // (x^i)/i
       term = power.divide(BigDecimal.valueOf(i), sp1,
                            BigDecimal.ROUND_HALF_EVEN);

       // sum = sum +- (x^i)/i
       sum = addFlag ? sum.add(term)
                     : sum.subtract(term);

       i += 2;
       addFlag = !addFlag;

       Thread.yield();
   } while (term.compareTo(tolerance) > 0);

   return sum;
}

/**
 * Compute the square root of x to a given scale, x >= 0.
 * Use Newton's algorithm.
 * @param x the value of x
 * @param scale the desired scale of the result2
 * @return the result value
 */
public static BigDecimal sqrt(BigDecimal x, int scale)
{
   // Check that x >= 0.
   if (x.signum() < 0) {
       throw new IllegalArgumentException("x < 0");
   }

   // n = x*(10^(2*scale))
   BigInteger n = x.movePointRight(scale << 1).toBigInteger();

  // The first approximation is the upper half of n.
   int bits = (n.bitLength() + 1) >> 1;
   BigInteger ix = n.shiftRight(bits);
   BigInteger ixPrev;

   // Loop until the approximations converge
   // (two successive approximations are equal after rounding).
   do {
       ixPrev = ix;

       // x = (x + n/x)/2
       ix = ix.add(n.divide(ix)).shiftRight(1);

       Thread.yield();
   } while (ix.compareTo(ixPrev) != 0);

   return new BigDecimal(ix, scale);
}
}

