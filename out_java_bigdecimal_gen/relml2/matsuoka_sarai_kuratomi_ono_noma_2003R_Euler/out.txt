import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;


public final class JavaBigDecimalProgram{
public static void main ( String args[] ) {

	int __i;
	BigDecimal xi[];
	BigDecimal xo[];
	BigDecimal x0[];
	BigDecimal x1[];
	BigDecimal k1[];
	BigDecimal y0[];
	BigDecimal z[];
	BigDecimal t;
	BigDecimal d = new BigDecimal( 0.010000);
	int __DATA_NUM = 32;
	int __SCALE = 80;

	xi = new BigDecimal[ ( 37 * __DATA_NUM ) ];
	xo = new BigDecimal[ ( 37 * __DATA_NUM ) ];
	x0 = new BigDecimal[ ( 37 * __DATA_NUM ) ];
	x1 = new BigDecimal[ ( 37 * __DATA_NUM ) ];
	y0 = new BigDecimal[ ( 151 * __DATA_NUM ) ];
	k1 = new BigDecimal[ ( 37 * __DATA_NUM ) ];
	z = new BigDecimal[92];
	for(t = new BigDecimal(0.000000); ( t.compareTo(new BigDecimal(400.000000))<=0) ;t =  ( t .add( d) ) ){

		for(__i = 0; ( __i < __DATA_NUM ) ;__i++){

			x0[ (  ( 0 * __DATA_NUM )  + __i ) ] = xi[ (  ( 0 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 1 * __DATA_NUM )  + __i ) ] = xi[ (  ( 1 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 2 * __DATA_NUM )  + __i ) ] = xi[ (  ( 2 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 3 * __DATA_NUM )  + __i ) ] = xi[ (  ( 3 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 4 * __DATA_NUM )  + __i ) ] = xi[ (  ( 4 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 5 * __DATA_NUM )  + __i ) ] = xi[ (  ( 5 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 6 * __DATA_NUM )  + __i ) ] = xi[ (  ( 6 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 7 * __DATA_NUM )  + __i ) ] = xi[ (  ( 7 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 8 * __DATA_NUM )  + __i ) ] = xi[ (  ( 8 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 9 * __DATA_NUM )  + __i ) ] = xi[ (  ( 9 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 10 * __DATA_NUM )  + __i ) ] = xi[ (  ( 10 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 11 * __DATA_NUM )  + __i ) ] = xi[ (  ( 11 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 12 * __DATA_NUM )  + __i ) ] = xi[ (  ( 12 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 13 * __DATA_NUM )  + __i ) ] = xi[ (  ( 13 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 14 * __DATA_NUM )  + __i ) ] = xi[ (  ( 14 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 15 * __DATA_NUM )  + __i ) ] = xi[ (  ( 15 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 16 * __DATA_NUM )  + __i ) ] = xi[ (  ( 16 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 17 * __DATA_NUM )  + __i ) ] = xi[ (  ( 17 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 18 * __DATA_NUM )  + __i ) ] = xi[ (  ( 18 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 19 * __DATA_NUM )  + __i ) ] = xi[ (  ( 19 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 20 * __DATA_NUM )  + __i ) ] = xi[ (  ( 20 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 21 * __DATA_NUM )  + __i ) ] = xi[ (  ( 21 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 22 * __DATA_NUM )  + __i ) ] = xi[ (  ( 22 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 23 * __DATA_NUM )  + __i ) ] = xi[ (  ( 23 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 24 * __DATA_NUM )  + __i ) ] = xi[ (  ( 24 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 25 * __DATA_NUM )  + __i ) ] = xi[ (  ( 25 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 26 * __DATA_NUM )  + __i ) ] = xi[ (  ( 26 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 27 * __DATA_NUM )  + __i ) ] = xi[ (  ( 27 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 28 * __DATA_NUM )  + __i ) ] = xi[ (  ( 28 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 29 * __DATA_NUM )  + __i ) ] = xi[ (  ( 29 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 30 * __DATA_NUM )  + __i ) ] = xi[ (  ( 30 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 31 * __DATA_NUM )  + __i ) ] = xi[ (  ( 31 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 32 * __DATA_NUM )  + __i ) ] = xi[ (  ( 32 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 33 * __DATA_NUM )  + __i ) ] = xi[ (  ( 33 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 34 * __DATA_NUM )  + __i ) ] = xi[ (  ( 34 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 35 * __DATA_NUM )  + __i ) ] = xi[ (  ( 35 * __DATA_NUM )  + __i ) ];
			x0[ (  ( 36 * __DATA_NUM )  + __i ) ] = xi[ (  ( 36 * __DATA_NUM )  + __i ) ];
			y0[ (  ( 0 * __DATA_NUM )  + __i ) ] =  (  (  ( t .compareTo(z[4])>=0)  &&  ( t.compareTo(z[5])<=0)  &&  (  (  ( t.subtract(z[4])) .subtract( ( ((   ( t.subtract(z[4])) .divide(z[6] ,128,BigDecimal.ROUND_HALF_UP) ).setScale(0,RoundingMode.FLOOR)).multiply(z[6], MathContext.DECIMAL128) ) )) .compareTo(z[7])<=0)  )  ? z[8] : new BigDecimal(0) ) ;
			y0[ (  ( 1 * __DATA_NUM )  + __i ) ] =  (  ( z[13].subtract(x0[ (  ( 3 * __DATA_NUM )  + __i ) ]))  .add( z[14]) ) ;
			y0[ (  ( 2 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ] == new BigDecimal(0) ? (z[9]).negate()  :    (    ( z[2].multiply(x0[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide( ( z[0].multiply(z[1], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( x0[ (  ( 1 * __DATA_NUM )  + __i ) ].subtract( ( z[9].multiply(exp(   ( (z[2]).negate() .multiply(x0[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide( ( z[0].multiply(z[1], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) )) , MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).subtract(exp(   ( (z[2]).negate() .multiply(x0[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide( ( z[0].multiply(z[1], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE)))  ,128,BigDecimal.ROUND_HALF_UP)  ) ;
			y0[ (  ( 3 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ] == new BigDecimal(0) ? x0[ (  ( 2 * __DATA_NUM )  + __i ) ] :    (    ( z[2].multiply(x0[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide( ( z[0].multiply(z[1], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( x0[ (  ( 2 * __DATA_NUM )  + __i ) ].subtract( ( z[11].multiply(exp(   ( (z[2]).negate() .multiply(x0[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide( ( z[0].multiply(z[1], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) )) , MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).subtract(exp(   ( (z[2]).negate() .multiply(x0[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide( ( z[0].multiply(z[1], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE)))  ,128,BigDecimal.ROUND_HALF_UP)  ) ;
			y0[ (  ( 4 * __DATA_NUM )  + __i ) ] =  ( z[17].multiply(y0[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x0[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x0[ (  ( 8 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 5 * __DATA_NUM )  + __i ) ] =  (  (  ( new BigDecimal(1).subtract(x0[ (  ( 5 * __DATA_NUM )  + __i ) ])) .subtract(x0[ (  ( 6 * __DATA_NUM )  + __i ) ])) .subtract(x0[ (  ( 7 * __DATA_NUM )  + __i ) ])) ;
			y0[ (  ( 6 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (  ( new BigDecimal(26).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(17) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(0.02).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(800) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 7 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (  ( new BigDecimal(1300).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(20) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(0.04).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(800) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 8 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (  ( new BigDecimal(9000000000).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(5) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(8000).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(100) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 9 * __DATA_NUM )  + __i ) ] =    ( x0[ (  ( 10 * __DATA_NUM )  + __i ) ].multiply( ( x0[ (  ( 12 * __DATA_NUM )  + __i ) ] .add( x0[ (  ( 13 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128).multiply(x0[ (  ( 15 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add((  new BigDecimal(1.4).divide(x0[ (  ( 4 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .pow(3 ))) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 10 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (  ( new BigDecimal(0.27).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(5.9) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(1.5).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(65) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 11 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (  ( new BigDecimal(0.0018).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(7.4) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(2).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(100) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 12 * __DATA_NUM )  + __i ) ] =  (  (  ( new BigDecimal(1).subtract(x0[ (  ( 14 * __DATA_NUM )  + __i ) ])) .subtract(x0[ (  ( 12 * __DATA_NUM )  + __i ) ])) .subtract(x0[ (  ( 13 * __DATA_NUM )  + __i ) ])) ;
			y0[ (  ( 13 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (  ( new BigDecimal(250000).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(9) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(58).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(65) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 14 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (  ( new BigDecimal(0.019).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(5.6) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(0.82).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(250) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 15 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (  ( new BigDecimal(62000).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(10.1) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(30).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(3000) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 16 * __DATA_NUM )  + __i ) ] =  (    ( z[0].multiply(z[1], MathContext.DECIMAL128) ) .divide(z[2] ,128,BigDecimal.ROUND_HALF_UP) .multiply(ln(   z[11].divide(x0[ (  ( 2 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP)  ,__SCALE), MathContext.DECIMAL128) ) ;
			y0[ (  ( 17 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.75).multiply(exp( ( new BigDecimal(0.035).multiply( (  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 16 * __DATA_NUM )  + __i ) ])) .subtract(new BigDecimal(10))) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( ( new BigDecimal(0.015).multiply( (  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 16 * __DATA_NUM )  + __i ) ])) .subtract(new BigDecimal(140))) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 18 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (  ( new BigDecimal(8000).multiply(exp(   (  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 16 * __DATA_NUM )  + __i ) ])) .subtract(new BigDecimal(97))) .divide(new BigDecimal(8.5) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(7).multiply(exp(   (  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 16 * __DATA_NUM )  + __i ) ])) .subtract(new BigDecimal(97))) .divide(new BigDecimal(300) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 19 * __DATA_NUM )  + __i ) ] =  ( z[31].multiply(z[3], MathContext.DECIMAL128).multiply((  z[11].divide(new BigDecimal(5.4) ,128,BigDecimal.ROUND_HALF_UP) .pow(0.2 )), MathContext.DECIMAL128) ) ;
			y0[ (  ( 20 * __DATA_NUM )  + __i ) ] =  (   new BigDecimal(1).divide( (  ( new BigDecimal(160).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(28) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(200).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(1000) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(1).divide( ( new BigDecimal(2500).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(20) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ) ) ;
			y0[ (  ( 21 * __DATA_NUM )  + __i ) ] =  (   new BigDecimal(1).divide( (  ( new BigDecimal(1600).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(28) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(2000).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(1000) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) .add(  new BigDecimal(1).divide( ( new BigDecimal(10000).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(20) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ) ) ;
			y0[ (  ( 22 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (  ( new BigDecimal(0.35).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(17) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(2).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(150) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 23 * __DATA_NUM )  + __i ) ] =  ( z[32].multiply(y0[ (  ( 3 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply((x0[ (  ( 22 * __DATA_NUM )  + __i ) ].pow(2 )), MathContext.DECIMAL128).multiply( (  ( new BigDecimal(0.9).multiply(x0[ (  ( 23 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add(new BigDecimal(0.1)) ) , MathContext.DECIMAL128) ) ;
			y0[ (  ( 24 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (  ( new BigDecimal(85).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(10.5) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(370).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(62) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 25 * __DATA_NUM )  + __i ) ] =  ( z[35].multiply(y0[ (  ( 3 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply((x0[ (  ( 24 * __DATA_NUM )  + __i ) ].pow(3 )), MathContext.DECIMAL128).multiply(x0[ (  ( 25 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 26 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (  ( new BigDecimal(11).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(28) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(0.2).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(400) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 27 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.0038).multiply(exp(  ( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(13.5)) ) ).negate() .divide(new BigDecimal(11.3) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add( ( new BigDecimal(0.051335).multiply(exp(  ( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(13.5)) ) ).negate() .divide(new BigDecimal(11.3) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 28 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.4).multiply(z[37], MathContext.DECIMAL128).multiply(y0[ (  ( 3 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 29 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.00011).multiply((  z[11].divide(new BigDecimal(5.4) ,128,BigDecimal.ROUND_HALF_UP) .pow(0.16 )), MathContext.DECIMAL128) ) ;
			y0[ (  ( 30 * __DATA_NUM )  + __i ) ] =  ( z[39].multiply(z[40], MathContext.DECIMAL128).multiply((  z[11].divide(new BigDecimal(1) ,128,BigDecimal.ROUND_HALF_UP) .pow(0.24 )), MathContext.DECIMAL128) ) ;
			y0[ (  ( 31 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add( ( (  z[45].divide(z[9] ,128,BigDecimal.ROUND_HALF_UP) .pow(3 )).multiply( ( new BigDecimal(1).add(  z[10].divide(z[47] ,128,BigDecimal.ROUND_HALF_UP) ) ) , MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 32 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add( (   z[47].divide(z[10] ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( new BigDecimal(1).add((  z[9].divide(z[45] ,128,BigDecimal.ROUND_HALF_UP) .pow(3 ))) ) , MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 33 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(1).multiply(exp(   (  ( z[49].subtract(new BigDecimal(1))) .multiply(z[2], MathContext.DECIMAL128).multiply(x0[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide( ( z[0].multiply(z[1], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ;
			y0[ (  ( 34 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add( ( (  z[53].divide(x0[ (  ( 1 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .pow(1.06 )).multiply( ( new BigDecimal(1).add((  x0[ (  ( 2 * __DATA_NUM )  + __i ) ].divide(z[55] ,128,BigDecimal.ROUND_HALF_UP) .pow(1.12 ))) ) , MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 35 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add( ( (  z[55].divide(x0[ (  ( 2 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .pow(1.12 )).multiply( ( new BigDecimal(1).add((  x0[ (  ( 1 * __DATA_NUM )  + __i ) ].divide(z[53] ,128,BigDecimal.ROUND_HALF_UP) .pow(1.06 ))) ) , MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 36 * __DATA_NUM )  + __i ) ] =   new BigDecimal(0.37).divide( ( new BigDecimal(1).add(  z[57].divide(x0[ (  ( 4 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 37 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 36 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 34 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( z[51].multiply(y0[ (  ( 35 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y0[ (  ( 38 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add(  z[62].divide(x0[ (  ( 32 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 39 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(1).subtract(y0[ (  ( 38 * __DATA_NUM )  + __i ) ])) ;
			y0[ (  ( 40 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add(  z[64].divide(x0[ (  ( 4 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 41 * __DATA_NUM )  + __i ) ] =  (  ( z[59].multiply(y0[ (  ( 38 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( z[60].multiply(y0[ (  ( 39 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y0[ (  ( 42 * __DATA_NUM )  + __i ) ] =  (  ( z[73].subtract(x0[ (  ( 31 * __DATA_NUM )  + __i ) ]))  .add( z[74]) ) ;
			y0[ (  ( 43 * __DATA_NUM )  + __i ) ] =  ( z[85].subtract(x0[ (  ( 36 * __DATA_NUM )  + __i ) ])) ;
			y0[ (  ( 44 * __DATA_NUM )  + __i ) ] = exp( (  (new BigDecimal(-20)) .multiply(( ( z[85].subtract(z[84])) .pow(2 )), MathContext.DECIMAL128) ) ,__SCALE);
			y0[ (  ( 45 * __DATA_NUM )  + __i ) ] =  ( z[79].multiply(x0[ (  ( 35 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 46 * __DATA_NUM )  + __i ) ] =  (  (new BigDecimal(-0.4)) .multiply(x0[ (  ( 34 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(z[75], MathContext.DECIMAL128) ) ;
			y0[ (  ( 47 * __DATA_NUM )  + __i ) ] =  (  ( z[86].multiply(( ( z[87].subtract(z[85])) .pow(5 )), MathContext.DECIMAL128) ) .add( ( z[88].multiply( ( z[87].subtract(z[85])) , MathContext.DECIMAL128) ) ) ) ;
			y0[ (  ( 48 * __DATA_NUM )  + __i ) ] =  ( z[90].multiply( ( y0[ (  ( 43 * __DATA_NUM )  + __i ) ].subtract(z[91])) , MathContext.DECIMAL128) ) ;
			y0[ (  ( 49 * __DATA_NUM )  + __i ) ] =  ( z[14].multiply(x0[ (  ( 3 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 50 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.1).multiply(z[17], MathContext.DECIMAL128).multiply(y0[ (  ( 3 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x0[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x0[ (  ( 8 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 51 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(0.8).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(400) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 52 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (  ( new BigDecimal(0.014).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(5) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(4000).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(100) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 53 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.0000185).multiply(z[19], MathContext.DECIMAL128).multiply(y0[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y0[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 54 * __DATA_NUM )  + __i ) ] =  (  (  ( new BigDecimal(1).subtract(x0[ (  ( 10 * __DATA_NUM )  + __i ) ])) .subtract(x0[ (  ( 9 * __DATA_NUM )  + __i ) ])) .subtract(x0[ (  ( 11 * __DATA_NUM )  + __i ) ])) ;
			y0[ (  ( 55 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (  ( new BigDecimal(2200000).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(7.4) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(11).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(100) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 56 * __DATA_NUM )  + __i ) ] =    ( z[27].multiply(z[24], MathContext.DECIMAL128).multiply(z[26], MathContext.DECIMAL128).multiply(z[23], MathContext.DECIMAL128) ) .divide( ( z[25].multiply(z[28], MathContext.DECIMAL128).multiply(z[22], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 57 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (  ( new BigDecimal(40).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(6.3) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(1.5).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(10000) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 58 * __DATA_NUM )  + __i ) ] =  ( z[30].multiply(z[3], MathContext.DECIMAL128).multiply((  z[11].divide(new BigDecimal(5.4) ,128,BigDecimal.ROUND_HALF_UP) .pow(0.4 )), MathContext.DECIMAL128) ) ;
			y0[ (  ( 59 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(3).multiply(exp( (  (new BigDecimal(-0.048)) .multiply( (  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 16 * __DATA_NUM )  + __i ) ])) .subtract(new BigDecimal(10))) , MathContext.DECIMAL128) ) ,__SCALE), MathContext.DECIMAL128).multiply( ( new BigDecimal(1).add(exp( ( new BigDecimal(0.064).multiply( (  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 16 * __DATA_NUM )  + __i ) ])) .subtract(new BigDecimal(38))) , MathContext.DECIMAL128) ) ,__SCALE)) ) , MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add(exp( ( new BigDecimal(0.03).multiply( (  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 16 * __DATA_NUM )  + __i ) ])) .subtract(new BigDecimal(70))) , MathContext.DECIMAL128) ) ,__SCALE)) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 60 * __DATA_NUM )  + __i ) ] =  ( y0[ (  ( 19 * __DATA_NUM )  + __i ) ].multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 16 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128).multiply( (  ( new BigDecimal(0.6).multiply(x0[ (  ( 19 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( new BigDecimal(0.4).multiply(x0[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) , MathContext.DECIMAL128).multiply(x0[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 61 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (  ( new BigDecimal(200).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(13) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(20).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(300) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 62 * __DATA_NUM )  + __i ) ] =  ( z[33].multiply(y0[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply((x0[ (  ( 22 * __DATA_NUM )  + __i ) ].pow(2 )), MathContext.DECIMAL128).multiply( (  ( new BigDecimal(0.9).multiply(x0[ (  ( 23 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add(new BigDecimal(0.1)) ) , MathContext.DECIMAL128) ) ;
			y0[ (  ( 63 * __DATA_NUM )  + __i ) ] =  ( z[36].multiply(y0[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply((x0[ (  ( 24 * __DATA_NUM )  + __i ) ].pow(3 )), MathContext.DECIMAL128).multiply(x0[ (  ( 25 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 64 * __DATA_NUM )  + __i ) ] =    ( new BigDecimal(0.0038).multiply(exp(   ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(13.5)) ) .divide(new BigDecimal(11.3) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).add( ( new BigDecimal(0.067083).multiply(exp(   ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(13.5)) ) .divide(new BigDecimal(11.3) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 65 * __DATA_NUM )  + __i ) ] =  ( z[37].multiply(y0[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 66 * __DATA_NUM )  + __i ) ] =   new BigDecimal(0.8).divide( ( new BigDecimal(1).add((  x0[ (  ( 4 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(0.1) ,128,BigDecimal.ROUND_HALF_UP) .pow(2 ))) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 67 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(1).multiply(exp(   ( z[49].multiply(z[2], MathContext.DECIMAL128).multiply(x0[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide( ( z[0].multiply(z[1], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ;
			y0[ (  ( 68 * __DATA_NUM )  + __i ) ] =  ( z[9].multiply(exp(   (  (new BigDecimal(-0.82)) .multiply(z[2], MathContext.DECIMAL128).multiply(x0[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide( ( z[0].multiply(z[1], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ;
			y0[ (  ( 69 * __DATA_NUM )  + __i ) ] =  ( z[74].multiply(x0[ (  ( 31 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 70 * __DATA_NUM )  + __i ) ] =  (  (  ( new BigDecimal(1).subtract(x0[ (  ( 33 * __DATA_NUM )  + __i ) ])) .subtract(x0[ (  ( 34 * __DATA_NUM )  + __i ) ])) .subtract(x0[ (  ( 35 * __DATA_NUM )  + __i ) ])) ;
			y0[ (  ( 71 * __DATA_NUM )  + __i ) ] =  (  ( z[77].multiply(x0[ (  ( 33 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y0[ (  ( 44 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( z[82].multiply(x0[ (  ( 34 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			y0[ (  ( 72 * __DATA_NUM )  + __i ) ] =  ( z[80].multiply((y0[ (  ( 48 * __DATA_NUM )  + __i ) ].pow(2 )), MathContext.DECIMAL128).multiply(x0[ (  ( 35 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 73 * __DATA_NUM )  + __i ) ] =  ( z[75].multiply( ( x0[ (  ( 34 * __DATA_NUM )  + __i ) ] .add( x0[ (  ( 35 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) ;
			y0[ (  ( 74 * __DATA_NUM )  + __i ) ] =    ( sqrt(  ( (y0[ (  ( 1 * __DATA_NUM )  + __i ) ].pow(2 )).add( ( new BigDecimal(4).multiply(y0[ (  ( 49 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) )  ,__SCALE).subtract(y0[ (  ( 1 * __DATA_NUM )  + __i ) ])) .divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 75 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ] == new BigDecimal(0) ? (z[10]).negate()  :    (    ( new BigDecimal(2).multiply(z[2], MathContext.DECIMAL128).multiply(x0[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide( ( z[0].multiply(z[1], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( y0[ (  ( 74 * __DATA_NUM )  + __i ) ].subtract( ( z[10].multiply(exp(   (  (new BigDecimal(-2)) .multiply(z[2], MathContext.DECIMAL128).multiply(x0[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide( ( z[0].multiply(z[1], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) )) , MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).subtract(exp(   (  (new BigDecimal(-2)) .multiply(z[2], MathContext.DECIMAL128).multiply(x0[ (  ( 0 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide( ( z[0].multiply(z[1], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE)))  ,128,BigDecimal.ROUND_HALF_UP)  ) ;
			y0[ (  ( 76 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (  ( new BigDecimal(0.1027).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(8) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(0.25).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(50) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 77 * __DATA_NUM )  + __i ) ] =  ( z[19].multiply(y0[ (  ( 75 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y0[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 78 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (  ( new BigDecimal(480).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(7) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(2.2).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(65) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 79 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.0676).multiply(y0[ (  ( 75 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 80 * __DATA_NUM )  + __i ) ] =  ( y0[ (  ( 74 * __DATA_NUM )  + __i ) ].subtract( ( new BigDecimal(0.3).multiply(y0[ (  ( 79 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			y0[ (  ( 81 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (  ( new BigDecimal(1800).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(14) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(66).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(65) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 82 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (  ( new BigDecimal(0.0006).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(6.7) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(1.2).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(25) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 83 * __DATA_NUM )  + __i ) ] =   y0[ (  ( 17 * __DATA_NUM )  + __i ) ].divide( ( y0[ (  ( 17 * __DATA_NUM )  + __i ) ] .add( y0[ (  ( 59 * __DATA_NUM )  + __i ) ]) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 84 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (  ( new BigDecimal(20).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(11.5) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(5).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(300) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 85 * __DATA_NUM )  + __i ) ] =  ( y0[ (  ( 62 * __DATA_NUM )  + __i ) ] .add( y0[ (  ( 23 * __DATA_NUM )  + __i ) ]) ) ;
			y0[ (  ( 86 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(3.7).multiply(y0[ (  ( 74 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 87 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (  ( new BigDecimal(4.4).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(16) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(0.2).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(500) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 88 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ] ==  (new BigDecimal(-3))  ?  ( y0[ (  ( 29 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 3 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(new BigDecimal(13.0077), MathContext.DECIMAL128) )  :    ( y0[ (  ( 29 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 3 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(3)) ) , MathContext.DECIMAL128) ) .divide( ( new BigDecimal(1).subtract(exp(  ( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add(new BigDecimal(3)) ) ).negate() .divide(new BigDecimal(13) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE)))  ,128,BigDecimal.ROUND_HALF_UP)  ) ;
			y0[ (  ( 89 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add((  new BigDecimal(0.0012).divide(y0[ (  ( 74 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .pow(3 ))) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 90 * __DATA_NUM )  + __i ) ] =  ( z[41].multiply(y0[ (  ( 75 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 91 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add( ( (  z[44].divide(x0[ (  ( 1 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .pow(3 )).multiply( ( new BigDecimal(1).add(  y0[ (  ( 74 * __DATA_NUM )  + __i ) ].divide(z[46] ,128,BigDecimal.ROUND_HALF_UP) ) ) , MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 92 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 33 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 31 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( z[43].multiply(y0[ (  ( 32 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y0[ (  ( 93 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add( ( (  z[54].divide(y0[ (  ( 68 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .pow(1.06 )).multiply( ( new BigDecimal(1).add((  z[11].divide(z[56] ,128,BigDecimal.ROUND_HALF_UP) .pow(1.12 ))) ) , MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 94 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add(  z[63].divide(y0[ (  ( 74 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 95 * __DATA_NUM )  + __i ) ] =  ( z[70].multiply( ( x0[ (  ( 32 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 74 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y0[ (  ( 96 * __DATA_NUM )  + __i ) ] =  (  ( z[76].multiply(y0[ (  ( 74 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y0[ (  ( 70 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( z[81].multiply(x0[ (  ( 33 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			y0[ (  ( 97 * __DATA_NUM )  + __i ) ] =  ( z[80].multiply((y0[ (  ( 48 * __DATA_NUM )  + __i ) ].pow(2 )), MathContext.DECIMAL128).multiply(x0[ (  ( 34 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 98 * __DATA_NUM )  + __i ) ] =  ( z[89].multiply(y0[ (  ( 73 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 99 * __DATA_NUM )  + __i ) ] =  ( y0[ (  ( 4 * __DATA_NUM )  + __i ) ] .add( y0[ (  ( 50 * __DATA_NUM )  + __i ) ]) ) ;
			y0[ (  ( 100 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.000365).multiply(z[19], MathContext.DECIMAL128).multiply(y0[ (  ( 3 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y0[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 101 * __DATA_NUM )  + __i ) ] =  ( y0[ (  ( 79 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 9 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 102 * __DATA_NUM )  + __i ) ] =  ( z[29].multiply(y0[ (  ( 75 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x0[ (  ( 16 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x0[ (  ( 17 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 103 * __DATA_NUM )  + __i ) ] =   y0[ (  ( 59 * __DATA_NUM )  + __i ) ].divide( ( y0[ (  ( 17 * __DATA_NUM )  + __i ) ] .add( y0[ (  ( 59 * __DATA_NUM )  + __i ) ]) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 104 * __DATA_NUM )  + __i ) ] =  (   new BigDecimal(8).divide(new BigDecimal(3) ,128,BigDecimal.ROUND_HALF_UP) .multiply((y0[ (  ( 103 * __DATA_NUM )  + __i ) ].pow(3 )), MathContext.DECIMAL128).multiply(y0[ (  ( 83 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 105 * __DATA_NUM )  + __i ) ] =    ( (y0[ (  ( 103 * __DATA_NUM )  + __i ) ].pow(4 )).multiply(new BigDecimal(1), MathContext.DECIMAL128) ) .divide( (  ( new BigDecimal(0.00014).multiply(exp(  ( (  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 16 * __DATA_NUM )  + __i ) ])) .subtract(new BigDecimal(97))) ).negate() .divide(new BigDecimal(9.1) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(0.2).multiply(exp(  ( (  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 16 * __DATA_NUM )  + __i ) ])) .subtract(new BigDecimal(97))) ).negate() .divide(new BigDecimal(500) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 106 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (  ( new BigDecimal(1450).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(20) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(260).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(100) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 107 * __DATA_NUM )  + __i ) ] =  ( y0[ (  ( 28 * __DATA_NUM )  + __i ) ] .add( y0[ (  ( 65 * __DATA_NUM )  + __i ) ]) ) ;
			y0[ (  ( 108 * __DATA_NUM )  + __i ) ] =  ( z[38].multiply(y0[ (  ( 3 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y0[ (  ( 89 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 109 * __DATA_NUM )  + __i ) ] =  ( y0[ (  ( 30 * __DATA_NUM )  + __i ) ].multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 16 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128).multiply(y0[ (  ( 66 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 110 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add( (   z[46].divide(y0[ (  ( 74 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) .multiply( ( new BigDecimal(1).add((  x0[ (  ( 1 * __DATA_NUM )  + __i ) ].divide(z[44] ,128,BigDecimal.ROUND_HALF_UP) .pow(3 ))) ) , MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 111 * __DATA_NUM )  + __i ) ] =  ( z[58].multiply(z[3], MathContext.DECIMAL128).multiply(new BigDecimal(1), MathContext.DECIMAL128).multiply( (  ( y0[ (  ( 36 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 34 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x0[ (  ( 27 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( z[50].multiply(y0[ (  ( 93 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( new BigDecimal(1).subtract(x0[ (  ( 27 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) )) , MathContext.DECIMAL128) ) ;
			y0[ (  ( 112 * __DATA_NUM )  + __i ) ] =  ( z[65].multiply(new BigDecimal(1), MathContext.DECIMAL128).multiply( (  ( z[59].multiply(y0[ (  ( 38 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x0[ (  ( 28 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( y0[ (  ( 40 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 94 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( new BigDecimal(1).subtract(x0[ (  ( 28 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) )) , MathContext.DECIMAL128) ) ;
			y0[ (  ( 113 * __DATA_NUM )  + __i ) ] =  (  ( new BigDecimal(280000).multiply((  y0[ (  ( 74 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(1) ,128,BigDecimal.ROUND_HALF_UP) .pow(2 )), MathContext.DECIMAL128) ) .add( ( z[68].multiply(y0[ (  ( 101 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y0[ (  ( 114 * __DATA_NUM )  + __i ) ] =    ( sqrt(  ( (y0[ (  ( 42 * __DATA_NUM )  + __i ) ].pow(2 )).add( ( new BigDecimal(4).multiply(y0[ (  ( 69 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) )  ,__SCALE).subtract(y0[ (  ( 42 * __DATA_NUM )  + __i ) ])) .divide(new BigDecimal(2) ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 115 * __DATA_NUM )  + __i ) ] =  ( y0[ (  ( 98 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 43 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 116 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (  ( new BigDecimal(0.0001027).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(8) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(5).multiply(exp(  (x0[ (  ( 0 * __DATA_NUM )  + __i ) ]).negate() .divide(new BigDecimal(400) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 117 * __DATA_NUM )  + __i ) ] =  ( y0[ (  ( 53 * __DATA_NUM )  + __i ) ] .add( y0[ (  ( 77 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 100 * __DATA_NUM )  + __i ) ]) ) ;
			y0[ (  ( 118 * __DATA_NUM )  + __i ) ] =  ( y0[ (  ( 80 * __DATA_NUM )  + __i ) ].multiply(x0[ (  ( 10 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 119 * __DATA_NUM )  + __i ) ] =  ( z[28].multiply(y0[ (  ( 118 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 120 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(2).multiply((y0[ (  ( 103 * __DATA_NUM )  + __i ) ].pow(2 )), MathContext.DECIMAL128).multiply((y0[ (  ( 83 * __DATA_NUM )  + __i ) ].pow(2 )), MathContext.DECIMAL128) ) ;
			y0[ (  ( 121 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( (  ( new BigDecimal(10).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(17) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) .add( ( new BigDecimal(2.5).multiply(exp(  x0[ (  ( 0 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(300) ,128,BigDecimal.ROUND_HALF_UP) ,__SCALE), MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 122 * __DATA_NUM )  + __i ) ] =  ( z[38].multiply(y0[ (  ( 2 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y0[ (  ( 89 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 123 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 67 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 91 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( z[42].multiply(y0[ (  ( 110 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y0[ (  ( 124 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(1).subtract(y0[ (  ( 94 * __DATA_NUM )  + __i ) ])) ;
			y0[ (  ( 125 * __DATA_NUM )  + __i ) ] =  ( z[66].multiply( ( y0[ (  ( 114 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 74 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128).multiply(x0[ (  ( 29 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 126 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.000377).multiply((  y0[ (  ( 114 * __DATA_NUM )  + __i ) ].divide(new BigDecimal(1) ,128,BigDecimal.ROUND_HALF_UP) .pow(2 )), MathContext.DECIMAL128) ) ;
			y0[ (  ( 127 * __DATA_NUM )  + __i ) ] =  (  ( z[78].multiply(x0[ (  ( 34 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( z[83].multiply(x0[ (  ( 35 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y0[ (  ( 74 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			y0[ (  ( 128 * __DATA_NUM )  + __i ) ] =  ( (y0[ (  ( 47 * __DATA_NUM )  + __i ) ]).negate()  .add( y0[ (  ( 115 * __DATA_NUM )  + __i ) ]) ) ;
			y0[ (  ( 129 * __DATA_NUM )  + __i ) ] =   new BigDecimal(0.01).divide( ( new BigDecimal(1).add(   ( z[18].multiply(y0[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y0[ (  ( 116 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide( ( y0[ (  ( 51 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 76 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y0[ (  ( 7 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 130 * __DATA_NUM )  + __i ) ] =   new BigDecimal(0.04).divide( ( new BigDecimal(1).add(   ( z[21].multiply(y0[ (  ( 78 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y0[ (  ( 11 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .divide( ( z[20].multiply(y0[ (  ( 10 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(y0[ (  ( 55 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 131 * __DATA_NUM )  + __i ) ] =  ( y0[ (  ( 118 * __DATA_NUM )  + __i ) ].add( ( y0[ (  ( 74 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x0[ (  ( 10 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ) ) ;
			y0[ (  ( 132 * __DATA_NUM )  + __i ) ] = (y0[ (  ( 103 * __DATA_NUM )  + __i ) ].pow(4 ));
			y0[ (  ( 133 * __DATA_NUM )  + __i ) ] =  ( y0[ (  ( 108 * __DATA_NUM )  + __i ) ] .add( y0[ (  ( 122 * __DATA_NUM )  + __i ) ]) ) ;
			y0[ (  ( 134 * __DATA_NUM )  + __i ) ] =   new BigDecimal(1).divide( ( new BigDecimal(1).add( ( (  z[56].divide(z[11] ,128,BigDecimal.ROUND_HALF_UP) .pow(1.12 )).multiply( ( new BigDecimal(1).add((  y0[ (  ( 68 * __DATA_NUM )  + __i ) ].divide(z[54] ,128,BigDecimal.ROUND_HALF_UP) .pow(1.06 ))) ) , MathContext.DECIMAL128) ) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 135 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 40 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 94 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( z[61].multiply(y0[ (  ( 124 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y0[ (  ( 136 * __DATA_NUM )  + __i ) ] =  ( z[69].multiply( ( x0[ (  ( 32 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 114 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y0[ (  ( 137 * __DATA_NUM )  + __i ) ] =  ( y0[ (  ( 107 * __DATA_NUM )  + __i ) ] .add( y0[ (  ( 90 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 88 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 133 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 109 * __DATA_NUM )  + __i ) ]) ) ;
			y0[ (  ( 138 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.01).subtract(y0[ (  ( 129 * __DATA_NUM )  + __i ) ])) ;
			y0[ (  ( 139 * __DATA_NUM )  + __i ) ] =  ( z[26].multiply(y0[ (  ( 131 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 140 * __DATA_NUM )  + __i ) ] =  ( y0[ (  ( 63 * __DATA_NUM )  + __i ) ] .add( y0[ (  ( 25 * __DATA_NUM )  + __i ) ]) ) ;
			y0[ (  ( 141 * __DATA_NUM )  + __i ) ] =  (  ( z[50].multiply(y0[ (  ( 93 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( z[52].multiply(y0[ (  ( 134 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y0[ (  ( 142 * __DATA_NUM )  + __i ) ] =  ( z[75].multiply( (  ( y0[ (  ( 97 * __DATA_NUM )  + __i ) ] .add( y0[ (  ( 127 * __DATA_NUM )  + __i ) ]) ) .subtract(y0[ (  ( 96 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) ;
			y0[ (  ( 143 * __DATA_NUM )  + __i ) ] =  ( new BigDecimal(0.04).subtract(y0[ (  ( 130 * __DATA_NUM )  + __i ) ])) ;
			y0[ (  ( 144 * __DATA_NUM )  + __i ) ] =  ( z[48].multiply(z[3], MathContext.DECIMAL128).multiply(new BigDecimal(1), MathContext.DECIMAL128).multiply( (  ( y0[ (  ( 67 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 91 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x0[ (  ( 26 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( y0[ (  ( 33 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 31 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply( ( new BigDecimal(1).subtract(x0[ (  ( 26 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) )) , MathContext.DECIMAL128) ) ;
			y0[ (  ( 145 * __DATA_NUM )  + __i ) ] =  ( y0[ (  ( 4 * __DATA_NUM )  + __i ) ] .add( y0[ (  ( 62 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 63 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 53 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 65 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 122 * __DATA_NUM )  + __i ) ]).add( ( new BigDecimal(3).multiply(y0[ (  ( 111 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ).add( ( new BigDecimal(3).multiply(y0[ (  ( 144 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) ;
			y0[ (  ( 146 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 77 * __DATA_NUM )  + __i ) ] .add( y0[ (  ( 102 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 90 * __DATA_NUM )  + __i ) ]) ) .subtract( ( new BigDecimal(2).multiply(y0[ (  ( 144 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			y0[ (  ( 147 * __DATA_NUM )  + __i ) ] =   new BigDecimal(0.08).divide( ( new BigDecimal(1).add(  new BigDecimal(0.36).divide(y0[ (  ( 114 * __DATA_NUM )  + __i ) ] ,128,BigDecimal.ROUND_HALF_UP) ) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			y0[ (  ( 148 * __DATA_NUM )  + __i ) ] =  ( y0[ (  ( 58 * __DATA_NUM )  + __i ) ].multiply( ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 16 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128).multiply( ( y0[ (  ( 132 * __DATA_NUM )  + __i ) ] .add( y0[ (  ( 104 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 120 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128).multiply(x0[ (  ( 18 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ;
			y0[ (  ( 149 * __DATA_NUM )  + __i ) ] =  ( y0[ (  ( 99 * __DATA_NUM )  + __i ) ] .add( y0[ (  ( 117 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 102 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 148 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 60 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 85 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 140 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 137 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 111 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 144 * __DATA_NUM )  + __i ) ]) ) ;
			y0[ (  ( 150 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 148 * __DATA_NUM )  + __i ) ] .add( y0[ (  ( 60 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 25 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 109 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 23 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 50 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 100 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 28 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 108 * __DATA_NUM )  + __i ) ]) .add( y0[ (  ( 88 * __DATA_NUM )  + __i ) ]) ) .subtract( ( new BigDecimal(2).multiply(y0[ (  ( 111 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 0 * __DATA_NUM )  + __i ) ] =   ( ( y0[ (  ( 149 * __DATA_NUM )  + __i ) ] .add( y0[ (  ( 0 * __DATA_NUM )  + __i ) ]) ) ).negate() .divide(z[3] ,128,BigDecimal.ROUND_HALF_UP) ;
			k1[ (  ( 1 * __DATA_NUM )  + __i ) ] =   (y0[ (  ( 145 * __DATA_NUM )  + __i ) ]).negate() .divide( ( z[2].multiply(z[12], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			k1[ (  ( 2 * __DATA_NUM )  + __i ) ] =   ( ( y0[ (  ( 150 * __DATA_NUM )  + __i ) ] .add( y0[ (  ( 0 * __DATA_NUM )  + __i ) ]) ) ).negate() .divide( ( z[2].multiply(z[12], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			k1[ (  ( 3 * __DATA_NUM )  + __i ) ] =  (   ( (  (  ( y0[ (  ( 146 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 112 * __DATA_NUM )  + __i ) ])) .subtract(y0[ (  ( 125 * __DATA_NUM )  + __i ) ])) .subtract(y0[ (  ( 95 * __DATA_NUM )  + __i ) ])) ).negate() .divide( ( new BigDecimal(2).multiply(z[2], MathContext.DECIMAL128).multiply(z[12], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP)  .add( y0[ (  ( 142 * __DATA_NUM )  + __i ) ]) ) ;
			k1[ (  ( 4 * __DATA_NUM )  + __i ) ] =  (  (  (  ( z[15].multiply( ( z[16].subtract(x0[ (  ( 4 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) )  .add( y0[ (  ( 46 * __DATA_NUM )  + __i ) ]) ) .subtract(  y0[ (  ( 111 * __DATA_NUM )  + __i ) ].divide( ( z[2].multiply(z[12], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) )) .add(  y0[ (  ( 112 * __DATA_NUM )  + __i ) ].divide( ( new BigDecimal(4).multiply(z[2], MathContext.DECIMAL128).multiply(z[12], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ) ) ;
			k1[ (  ( 5 * __DATA_NUM )  + __i ) ] =  (  (  ( x0[ (  ( 6 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 6 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y0[ (  ( 5 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 138 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( ( x0[ (  ( 5 * __DATA_NUM )  + __i ) ].multiply( ( y0[ (  ( 129 * __DATA_NUM )  + __i ) ] .add( y0[ (  ( 76 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 6 * __DATA_NUM )  + __i ) ] =  (  (  ( x0[ (  ( 5 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 76 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( x0[ (  ( 7 * __DATA_NUM )  + __i ) ].multiply(z[18], MathContext.DECIMAL128) ) ) ) .subtract( ( x0[ (  ( 6 * __DATA_NUM )  + __i ) ].multiply( ( y0[ (  ( 6 * __DATA_NUM )  + __i ) ] .add( y0[ (  ( 51 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 7 * __DATA_NUM )  + __i ) ] =  (  (  ( y0[ (  ( 5 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 116 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( x0[ (  ( 6 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 51 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( ( x0[ (  ( 7 * __DATA_NUM )  + __i ) ].multiply( ( y0[ (  ( 7 * __DATA_NUM )  + __i ) ] .add( z[18]) ) , MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 8 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 8 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x0[ (  ( 8 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y0[ (  ( 52 * __DATA_NUM )  + __i ) ].multiply(x0[ (  ( 8 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 9 * __DATA_NUM )  + __i ) ] =  (  (  ( x0[ (  ( 10 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 78 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y0[ (  ( 54 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 143 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( ( x0[ (  ( 9 * __DATA_NUM )  + __i ) ].multiply( ( y0[ (  ( 130 * __DATA_NUM )  + __i ) ] .add( y0[ (  ( 10 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 10 * __DATA_NUM )  + __i ) ] =  (  (  ( x0[ (  ( 9 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 10 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( x0[ (  ( 11 * __DATA_NUM )  + __i ) ].multiply(z[21], MathContext.DECIMAL128) ) ) ) .subtract( ( x0[ (  ( 10 * __DATA_NUM )  + __i ) ].multiply( ( y0[ (  ( 78 * __DATA_NUM )  + __i ) ] .add( z[20]) ) , MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 11 * __DATA_NUM )  + __i ) ] =  (  (  ( y0[ (  ( 54 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 11 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( x0[ (  ( 10 * __DATA_NUM )  + __i ) ].multiply(z[20], MathContext.DECIMAL128) ) ) ) .subtract( ( x0[ (  ( 11 * __DATA_NUM )  + __i ) ].multiply( ( y0[ (  ( 55 * __DATA_NUM )  + __i ) ] .add( z[21]) ) , MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 12 * __DATA_NUM )  + __i ) ] =  (  (  ( x0[ (  ( 14 * __DATA_NUM )  + __i ) ].multiply(z[24], MathContext.DECIMAL128) ) .add( ( x0[ (  ( 13 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 56 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) .subtract( ( x0[ (  ( 12 * __DATA_NUM )  + __i ) ].multiply( ( y0[ (  ( 139 * __DATA_NUM )  + __i ) ] .add( z[25]) ) , MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 13 * __DATA_NUM )  + __i ) ] =  (  (  ( x0[ (  ( 12 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 139 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .add( ( y0[ (  ( 12 * __DATA_NUM )  + __i ) ].multiply(z[22], MathContext.DECIMAL128) ) ) ) .subtract( ( x0[ (  ( 13 * __DATA_NUM )  + __i ) ].multiply( ( z[23] .add( y0[ (  ( 56 * __DATA_NUM )  + __i ) ]) ) , MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 14 * __DATA_NUM )  + __i ) ] =  (  (  ( y0[ (  ( 12 * __DATA_NUM )  + __i ) ].multiply(z[27], MathContext.DECIMAL128) ) .add( ( x0[ (  ( 12 * __DATA_NUM )  + __i ) ].multiply(z[25], MathContext.DECIMAL128) ) ) ) .subtract( ( x0[ (  ( 14 * __DATA_NUM )  + __i ) ].multiply( ( z[24].add( ( z[28].multiply(y0[ (  ( 80 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128).multiply(x0[ (  ( 10 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) ) ) , MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 15 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 13 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x0[ (  ( 15 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y0[ (  ( 81 * __DATA_NUM )  + __i ) ].multiply(x0[ (  ( 15 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 16 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 14 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x0[ (  ( 16 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y0[ (  ( 57 * __DATA_NUM )  + __i ) ].multiply(x0[ (  ( 16 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 17 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 15 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x0[ (  ( 17 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y0[ (  ( 82 * __DATA_NUM )  + __i ) ].multiply(x0[ (  ( 17 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 18 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 18 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x0[ (  ( 18 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y0[ (  ( 105 * __DATA_NUM )  + __i ) ].multiply(x0[ (  ( 18 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 19 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 84 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x0[ (  ( 19 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y0[ (  ( 20 * __DATA_NUM )  + __i ) ].multiply(x0[ (  ( 19 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 20 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 61 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x0[ (  ( 20 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y0[ (  ( 21 * __DATA_NUM )  + __i ) ].multiply(x0[ (  ( 20 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 21 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 121 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x0[ (  ( 21 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y0[ (  ( 22 * __DATA_NUM )  + __i ) ].multiply(x0[ (  ( 21 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 22 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 24 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x0[ (  ( 22 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y0[ (  ( 106 * __DATA_NUM )  + __i ) ].multiply(x0[ (  ( 22 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 23 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 86 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x0[ (  ( 23 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( z[34].multiply(x0[ (  ( 23 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 24 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 26 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x0[ (  ( 24 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y0[ (  ( 87 * __DATA_NUM )  + __i ) ].multiply(x0[ (  ( 24 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 25 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 27 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x0[ (  ( 25 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y0[ (  ( 64 * __DATA_NUM )  + __i ) ].multiply(x0[ (  ( 25 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 26 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 92 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x0[ (  ( 26 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y0[ (  ( 123 * __DATA_NUM )  + __i ) ].multiply(x0[ (  ( 26 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 27 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 141 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x0[ (  ( 27 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y0[ (  ( 37 * __DATA_NUM )  + __i ) ].multiply(x0[ (  ( 27 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 28 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 135 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract(x0[ (  ( 28 * __DATA_NUM )  + __i ) ])) , MathContext.DECIMAL128) ) .subtract( ( y0[ (  ( 41 * __DATA_NUM )  + __i ) ].multiply(x0[ (  ( 28 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 29 * __DATA_NUM )  + __i ) ] =  (  ( x0[ (  ( 30 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 113 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) .subtract( ( x0[ (  ( 29 * __DATA_NUM )  + __i ) ].multiply(y0[ (  ( 147 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 30 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 126 * __DATA_NUM )  + __i ) ].multiply( ( new BigDecimal(1).subtract( ( x0[ (  ( 29 * __DATA_NUM )  + __i ) ] .add( x0[ (  ( 30 * __DATA_NUM )  + __i ) ]) ) )) , MathContext.DECIMAL128) ) .subtract( (  ( y0[ (  ( 113 * __DATA_NUM )  + __i ) ] .add( z[67]) ) .multiply(x0[ (  ( 30 * __DATA_NUM )  + __i ) ], MathContext.DECIMAL128) ) )) ;
			k1[ (  ( 31 * __DATA_NUM )  + __i ) ] =    ( y0[ (  ( 136 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 125 * __DATA_NUM )  + __i ) ])) .divide( ( new BigDecimal(2).multiply(z[2], MathContext.DECIMAL128).multiply(z[71], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			k1[ (  ( 32 * __DATA_NUM )  + __i ) ] =    (  ( (y0[ (  ( 112 * __DATA_NUM )  + __i ) ]).negate() .subtract(y0[ (  ( 136 * __DATA_NUM )  + __i ) ])) .subtract(y0[ (  ( 95 * __DATA_NUM )  + __i ) ])) .divide( ( new BigDecimal(2).multiply(z[2], MathContext.DECIMAL128).multiply(z[72], MathContext.DECIMAL128) )  ,128,BigDecimal.ROUND_HALF_UP) ;
			k1[ (  ( 33 * __DATA_NUM )  + __i ) ] =  ( y0[ (  ( 96 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 71 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 34 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 71 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 127 * __DATA_NUM )  + __i ) ])) .subtract(y0[ (  ( 97 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 35 * __DATA_NUM )  + __i ) ] =  (  ( y0[ (  ( 127 * __DATA_NUM )  + __i ) ].subtract(y0[ (  ( 45 * __DATA_NUM )  + __i ) ])) .subtract(y0[ (  ( 72 * __DATA_NUM )  + __i ) ])) ;
			k1[ (  ( 36 * __DATA_NUM )  + __i ) ] =  ( z[90].multiply( ( y0[ (  ( 43 * __DATA_NUM )  + __i ) ].subtract(z[91])) , MathContext.DECIMAL128) ) ;
			x1[ (  ( 0 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 0 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 0 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 1 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 1 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 1 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 2 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 2 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 2 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 3 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 3 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 3 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 4 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 4 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 4 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 5 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 5 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 5 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 6 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 6 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 6 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 7 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 7 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 7 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 8 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 8 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 8 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 9 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 9 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 9 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 10 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 10 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 10 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 11 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 11 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 11 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 12 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 12 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 12 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 13 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 13 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 13 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 14 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 14 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 14 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 15 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 15 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 15 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 16 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 16 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 16 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 17 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 17 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 17 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 18 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 18 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 18 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 19 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 19 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 19 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 20 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 20 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 20 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 21 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 21 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 21 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 22 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 22 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 22 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 23 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 23 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 23 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 24 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 24 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 24 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 25 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 25 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 25 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 26 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 26 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 26 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 27 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 27 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 27 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 28 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 28 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 28 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 29 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 29 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 29 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 30 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 30 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 30 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 31 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 31 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 31 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 32 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 32 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 32 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 33 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 33 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 33 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 34 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 34 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 34 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 35 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 35 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 35 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			x1[ (  ( 36 * __DATA_NUM )  + __i ) ] =  ( x0[ (  ( 36 * __DATA_NUM )  + __i ) ].add( ( k1[ (  ( 36 * __DATA_NUM )  + __i ) ].multiply(d, MathContext.DECIMAL128) ) ) ) ;
			xo[ (  ( 0 * __DATA_NUM )  + __i ) ] = x1[ (  ( 0 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 1 * __DATA_NUM )  + __i ) ] = x1[ (  ( 1 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 2 * __DATA_NUM )  + __i ) ] = x1[ (  ( 2 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 3 * __DATA_NUM )  + __i ) ] = x1[ (  ( 3 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 4 * __DATA_NUM )  + __i ) ] = x1[ (  ( 4 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 5 * __DATA_NUM )  + __i ) ] = x1[ (  ( 5 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 6 * __DATA_NUM )  + __i ) ] = x1[ (  ( 6 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 7 * __DATA_NUM )  + __i ) ] = x1[ (  ( 7 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 8 * __DATA_NUM )  + __i ) ] = x1[ (  ( 8 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 9 * __DATA_NUM )  + __i ) ] = x1[ (  ( 9 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 10 * __DATA_NUM )  + __i ) ] = x1[ (  ( 10 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 11 * __DATA_NUM )  + __i ) ] = x1[ (  ( 11 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 12 * __DATA_NUM )  + __i ) ] = x1[ (  ( 12 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 13 * __DATA_NUM )  + __i ) ] = x1[ (  ( 13 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 14 * __DATA_NUM )  + __i ) ] = x1[ (  ( 14 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 15 * __DATA_NUM )  + __i ) ] = x1[ (  ( 15 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 16 * __DATA_NUM )  + __i ) ] = x1[ (  ( 16 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 17 * __DATA_NUM )  + __i ) ] = x1[ (  ( 17 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 18 * __DATA_NUM )  + __i ) ] = x1[ (  ( 18 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 19 * __DATA_NUM )  + __i ) ] = x1[ (  ( 19 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 20 * __DATA_NUM )  + __i ) ] = x1[ (  ( 20 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 21 * __DATA_NUM )  + __i ) ] = x1[ (  ( 21 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 22 * __DATA_NUM )  + __i ) ] = x1[ (  ( 22 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 23 * __DATA_NUM )  + __i ) ] = x1[ (  ( 23 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 24 * __DATA_NUM )  + __i ) ] = x1[ (  ( 24 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 25 * __DATA_NUM )  + __i ) ] = x1[ (  ( 25 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 26 * __DATA_NUM )  + __i ) ] = x1[ (  ( 26 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 27 * __DATA_NUM )  + __i ) ] = x1[ (  ( 27 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 28 * __DATA_NUM )  + __i ) ] = x1[ (  ( 28 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 29 * __DATA_NUM )  + __i ) ] = x1[ (  ( 29 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 30 * __DATA_NUM )  + __i ) ] = x1[ (  ( 30 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 31 * __DATA_NUM )  + __i ) ] = x1[ (  ( 31 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 32 * __DATA_NUM )  + __i ) ] = x1[ (  ( 32 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 33 * __DATA_NUM )  + __i ) ] = x1[ (  ( 33 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 34 * __DATA_NUM )  + __i ) ] = x1[ (  ( 34 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 35 * __DATA_NUM )  + __i ) ] = x1[ (  ( 35 * __DATA_NUM )  + __i ) ];
			xo[ (  ( 36 * __DATA_NUM )  + __i ) ] = x1[ (  ( 36 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 0 * __DATA_NUM )  + __i ) ] = xo[ (  ( 0 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 1 * __DATA_NUM )  + __i ) ] = xo[ (  ( 1 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 2 * __DATA_NUM )  + __i ) ] = xo[ (  ( 2 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 3 * __DATA_NUM )  + __i ) ] = xo[ (  ( 3 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 4 * __DATA_NUM )  + __i ) ] = xo[ (  ( 4 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 5 * __DATA_NUM )  + __i ) ] = xo[ (  ( 5 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 6 * __DATA_NUM )  + __i ) ] = xo[ (  ( 6 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 7 * __DATA_NUM )  + __i ) ] = xo[ (  ( 7 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 8 * __DATA_NUM )  + __i ) ] = xo[ (  ( 8 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 9 * __DATA_NUM )  + __i ) ] = xo[ (  ( 9 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 10 * __DATA_NUM )  + __i ) ] = xo[ (  ( 10 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 11 * __DATA_NUM )  + __i ) ] = xo[ (  ( 11 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 12 * __DATA_NUM )  + __i ) ] = xo[ (  ( 12 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 13 * __DATA_NUM )  + __i ) ] = xo[ (  ( 13 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 14 * __DATA_NUM )  + __i ) ] = xo[ (  ( 14 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 15 * __DATA_NUM )  + __i ) ] = xo[ (  ( 15 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 16 * __DATA_NUM )  + __i ) ] = xo[ (  ( 16 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 17 * __DATA_NUM )  + __i ) ] = xo[ (  ( 17 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 18 * __DATA_NUM )  + __i ) ] = xo[ (  ( 18 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 19 * __DATA_NUM )  + __i ) ] = xo[ (  ( 19 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 20 * __DATA_NUM )  + __i ) ] = xo[ (  ( 20 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 21 * __DATA_NUM )  + __i ) ] = xo[ (  ( 21 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 22 * __DATA_NUM )  + __i ) ] = xo[ (  ( 22 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 23 * __DATA_NUM )  + __i ) ] = xo[ (  ( 23 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 24 * __DATA_NUM )  + __i ) ] = xo[ (  ( 24 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 25 * __DATA_NUM )  + __i ) ] = xo[ (  ( 25 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 26 * __DATA_NUM )  + __i ) ] = xo[ (  ( 26 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 27 * __DATA_NUM )  + __i ) ] = xo[ (  ( 27 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 28 * __DATA_NUM )  + __i ) ] = xo[ (  ( 28 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 29 * __DATA_NUM )  + __i ) ] = xo[ (  ( 29 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 30 * __DATA_NUM )  + __i ) ] = xo[ (  ( 30 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 31 * __DATA_NUM )  + __i ) ] = xo[ (  ( 31 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 32 * __DATA_NUM )  + __i ) ] = xo[ (  ( 32 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 33 * __DATA_NUM )  + __i ) ] = xo[ (  ( 33 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 34 * __DATA_NUM )  + __i ) ] = xo[ (  ( 34 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 35 * __DATA_NUM )  + __i ) ] = xo[ (  ( 35 * __DATA_NUM )  + __i ) ];
			xi[ (  ( 36 * __DATA_NUM )  + __i ) ] = xo[ (  ( 36 * __DATA_NUM )  + __i ) ];

		}


	}

}


/**
* Compute x^exponent to a given scale.  Uses the same
* algorithm as class numbercruncher.mathutils.IntPower.
* @param x the value x
* @param exponent the exponent value
* @param scale the desired scale of the result
* @return the result value
*/
public static BigDecimal intPower(BigDecimal x, long exponent,int scale)
{
   if (exponent < 0) {
      return BigDecimal.valueOf(1).divide(intPower(x, -exponent, scale), scale,BigDecimal.ROUND_HALF_EVEN);
   }

   BigDecimal power = BigDecimal.valueOf(1);
   // Loop to compute value^exponent.
   while (exponent > 0) {
       // Is the rightmost bit a 1?
       if ((exponent & 1) == 1) {
           power = power.multiply(x).setScale(scale, BigDecimal.ROUND_HALF_EVEN);
       }

       // Square x and shift exponent 1 bit to the right.
	x = x.multiply(x).setScale(scale, BigDecimal.ROUND_HALF_EVEN);
       exponent >>= 1;

       Thread.yield();
   }

   return power;
}
/**
 * Compute the integral root of x to a given scale, x >= 0.
 * Use Newton's algorithm.
 * @param x the value of x
 * @param index the integral root value
 * @param scale the desired scale of the result
 * @return the result value
 */
public static BigDecimal intRoot(BigDecimal x, long index,int scale)
{
   // Check that x >= 0.
   if (x.signum() < 0) {
       throw new IllegalArgumentException("x < 0");
   }
   int        sp1 = scale + 1;
   BigDecimal n   = x;
   BigDecimal i   = BigDecimal.valueOf(index);
   BigDecimal im1 = BigDecimal.valueOf(index-1);
   BigDecimal tolerance = BigDecimal.valueOf(5).movePointLeft(sp1);
   BigDecimal xPrev;
   // The initial approximation is x/index.
   x = x.divide(i, scale, BigDecimal.ROUND_HALF_EVEN);
   // Loop until the approximations converge
   // (two successive approximations are equal after rounding).
   do {
       // x^(index-1)
       BigDecimal xToIm1 = intPower(x, index-1, sp1);
       // x^index
       BigDecimal xToI = x.multiply(xToIm1).setScale(sp1, BigDecimal.ROUND_HALF_EVEN);
       // n + (index-1)*(x^index)
       BigDecimal numerator = n.add(im1.multiply(xToI)).setScale(sp1, BigDecimal.ROUND_HALF_EVEN);
       // (index*(x^(index-1))
       BigDecimal denominator = i.multiply(xToIm1).setScale(sp1, BigDecimal.ROUND_HALF_EVEN);

       // x = (n + (index-1)*(x^index)) / (index*(x^(index-1)))
       xPrev = x;
       x = numerator.divide(denominator, sp1, BigDecimal.ROUND_DOWN);

       Thread.yield();
   } while (x.subtract(xPrev).abs().compareTo(tolerance) > 0);
   return x;
}

/**
 * Compute e^x to a given scale.
 * Break x into its whole and fraction parts and
 * compute (e^(1 + fraction/whole))^whole using Taylor's formula.
 * @param x the value of x
 * @param scale the desired scale of the result
 * @return the result value
 */
public static BigDecimal exp(BigDecimal x, int scale)
{
   // e^0 = 1
   if (x.signum() == 0) {
       return BigDecimal.valueOf(1);
   }
   // If x is negative, return 1/(e^-x).
   else if (x.signum() == -1) {
       return BigDecimal.valueOf(1).divide(exp(x.negate(), scale), scale,BigDecimal.ROUND_HALF_EVEN);
   }

   // Compute the whole part of x.
   BigDecimal xWhole = x.setScale(0, BigDecimal.ROUND_DOWN);

   // If there isn't a whole part, compute and return e^x.
   if (xWhole.signum() == 0) return expTaylor(x, scale);

   // Compute the fraction part of x.
   BigDecimal xFraction = x.subtract(xWhole);

   // z = 1 + fraction/whole
   BigDecimal z = BigDecimal.valueOf(1).add(xFraction.divide(
                               xWhole, scale,
                               BigDecimal.ROUND_HALF_EVEN));

   // t = e^z
   BigDecimal t = expTaylor(z, scale);

   BigDecimal maxLong = BigDecimal.valueOf(Long.MAX_VALUE);
   BigDecimal result  = BigDecimal.valueOf(1);

   // Compute and return t^whole using intPower().
   // If whole > Long.MAX_VALUE, then first compute products
   // of e^Long.MAX_VALUE.
   while (xWhole.compareTo(maxLong) >= 0) {
       result = result.multiply(
                           intPower(t, Long.MAX_VALUE, scale))
                   .setScale(scale, BigDecimal.ROUND_HALF_EVEN);
       xWhole = xWhole.subtract(maxLong);

       Thread.yield();
   }
   return result.multiply(intPower(t, xWhole.longValue(), scale))
                   .setScale(scale, BigDecimal.ROUND_HALF_EVEN);
}

/**
 * Compute e^x to a given scale by the Taylor series.
 * @param x the value of x
 * @param scale the desired scale of the result
 * @return the result value
 */
private static BigDecimal expTaylor(BigDecimal x, int scale)
{
   BigDecimal factorial = BigDecimal.valueOf(1);
   BigDecimal xPower    = x;
   BigDecimal sumPrev;

   // 1 + x
   BigDecimal sum  = x.add(BigDecimal.valueOf(1));

   // Loop until the sums converge
   // (two successive sums are equal after rounding).
   int i = 2;
   do {
       // x^i
       xPower = xPower.multiply(x)
                   .setScale(scale, BigDecimal.ROUND_HALF_EVEN);

       // i!
       factorial = factorial.multiply(BigDecimal.valueOf(i));

       // x^i/i!
       BigDecimal term = xPower
                           .divide(factorial, scale,
                                   BigDecimal.ROUND_HALF_EVEN);

       // sum = sum + x^i/i!
       sumPrev = sum;
       sum = sum.add(term);

       ++i;
       Thread.yield();
   } while (sum.compareTo(sumPrev) != 0);

   return sum;
}

/**
 * Compute the natural logarithm of x to a given scale, x > 0.
 */
public static BigDecimal ln(BigDecimal x, int scale)
{
   // Check that x > 0.
   if (x.signum() <= 0) {
       throw new IllegalArgumentException("x <= 0");
   }

   // The number of digits to the left of the decimal point.
   int magnitude = x.toString().length() - x.scale() - 1;

   if (magnitude < 3) {
       return lnNewton(x, scale);
   }

   // Compute magnitude*ln(x^(1/magnitude)).
   else {

       // x^(1/magnitude)
       BigDecimal root = intRoot(x, magnitude, scale);

       // ln(x^(1/magnitude))
       BigDecimal lnRoot = lnNewton(root, scale);

       // magnitude*ln(x^(1/magnitude))
       return BigDecimal.valueOf(magnitude).multiply(lnRoot)
                   .setScale(scale, BigDecimal.ROUND_HALF_EVEN);
   }
}

/**
 * Compute the natural logarithm of x to a given scale, x > 0.
 * Use Newton's algorithm.
 */
private static BigDecimal lnNewton(BigDecimal x, int scale)
{
   int        sp1 = scale + 1;
   BigDecimal n   = x;
   BigDecimal term;

   // Convergence tolerance = 5*(10^-(scale+1))
   BigDecimal tolerance = BigDecimal.valueOf(5)
                                       .movePointLeft(sp1);

   // Loop until the approximations converge
   // (two successive approximations are within the tolerance).
   do {

       // e^x
       BigDecimal eToX = exp(x, sp1);

       // (e^x - n)/e^x
       term = eToX.subtract(n)
                   .divide(eToX, sp1, BigDecimal.ROUND_DOWN);

       // x - (e^x - n)/e^x
       x = x.subtract(term);

       Thread.yield();
   } while (term.compareTo(tolerance) > 0);

   return x.setScale(scale, BigDecimal.ROUND_HALF_EVEN);
}

/**
 * Compute the arctangent of x to a given scale, |x| < 1
 * @param x the value of x
 * @param scale the desired scale of the result
 * @return the result value
 */
public static BigDecimal arctan(BigDecimal x, int scale)
{
   // Check that |x| < 1.
   if (x.abs().compareTo(BigDecimal.valueOf(1)) >= 0) {
       throw new IllegalArgumentException("|x| >= 1");
   }

   // If x is negative, return -arctan(-x).
   if (x.signum() == -1) {
       return arctan(x.negate(), scale).negate();
   }
   else {
       return arctanTaylor(x, scale);
   }
}

/**
 * Compute the arctangent of x to a given scale
 * by the Taylor series, |x| < 1 
 * @param x the value of x
 * @param scale the desired scale of the result
 * @return the result value 
 */
private static BigDecimal arctanTaylor(BigDecimal x, int scale)
{
   int     sp1     = scale + 1;
   int     i       = 3;
   boolean addFlag = false;

   BigDecimal power = x;
   BigDecimal sum   = x;
   BigDecimal term;

   // Convergence tolerance = 5*(10^-(scale+1))
   BigDecimal tolerance = BigDecimal.valueOf(5)
                                       .movePointLeft(sp1);

   // Loop until the approximations converge
   // (two successive approximations are within the tolerance).
   do {
       // x^i
       power = power.multiply(x).multiply(x)
                   .setScale(sp1, BigDecimal.ROUND_HALF_EVEN);

       // (x^i)/i
       term = power.divide(BigDecimal.valueOf(i), sp1,
                            BigDecimal.ROUND_HALF_EVEN);

       // sum = sum +- (x^i)/i
       sum = addFlag ? sum.add(term)
                     : sum.subtract(term);

       i += 2;
       addFlag = !addFlag;

       Thread.yield();
   } while (term.compareTo(tolerance) > 0);

   return sum;
}

/**
 * Compute the square root of x to a given scale, x >= 0.
 * Use Newton's algorithm.
 * @param x the value of x
 * @param scale the desired scale of the result2
 * @return the result value
 */
public static BigDecimal sqrt(BigDecimal x, int scale)
{
   // Check that x >= 0.
   if (x.signum() < 0) {
       throw new IllegalArgumentException("x < 0");
   }

   // n = x*(10^(2*scale))
   BigInteger n = x.movePointRight(scale << 1).toBigInteger();

  // The first approximation is the upper half of n.
   int bits = (n.bitLength() + 1) >> 1;
   BigInteger ix = n.shiftRight(bits);
   BigInteger ixPrev;

   // Loop until the approximations converge
   // (two successive approximations are equal after rounding).
   do {
       ixPrev = ix;

       // x = (x + n/x)/2
       ix = ix.add(n.divide(ix)).shiftRight(1);

       Thread.yield();
   } while (ix.compareTo(ixPrev) != 0);

   return new BigDecimal(ix, scale);
}
}

